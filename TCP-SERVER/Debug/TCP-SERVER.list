
TCP-SERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f780  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca0  0800f930  0800f930  0001f930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125d0  080125d0  0003c3c8  2**0
                  CONTENTS
  4 .ARM          00000008  080125d0  080125d0  000225d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125d8  080125d8  0003c3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125d8  080125d8  000225d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125dc  080125dc  000225dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  10000000  080125e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 ccmram        0000c350  10000078  08012658  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  1000c3c8  1000c3c8  0003c3c8  2**0
                  CONTENTS
 11 .bss          00024d30  20000000  20000000  00040000  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  1000c3c8  1000c3c8  0003c3c8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003c3c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a5d8  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005411  00000000  00000000  000669d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001038  00000000  00000000  0006bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fa8  00000000  00000000  0006ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f180  00000000  00000000  0006ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f383  00000000  00000000  0009cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eaa2a  00000000  00000000  000bc2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001a6cf5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000049f4  00000000  00000000  001a6d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000000 	.word	0x20000000
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f918 	.word	0x0800f918

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000004 	.word	0x20000004
 80001ec:	0800f918 	.word	0x0800f918

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fd4c 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f832 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f89a 	bl	80006ec <MX_GPIO_Init>
  MX_LWIP_Init();
 80005b8:	f002 fec6 	bl	8003348 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  tcp_server_init();
 80005bc:	f000 fab4 	bl	8000b28 <tcp_server_init>
  random_string(SendBuf, SendBufLength);
 80005c0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <main+0x30>)
 80005c6:	f000 f80b 	bl	80005e0 <random_string>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  ethernetif_input(&gnetif);
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <main+0x34>)
 80005cc:	f003 fabc 	bl	8003b48 <ethernetif_input>
	  sys_check_timeouts();
 80005d0:	f00b fac0 	bl	800bb54 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005d4:	e7f9      	b.n	80005ca <main+0x22>
 80005d6:	bf00      	nop
 80005d8:	10000078 	.word	0x10000078
 80005dc:	200001a0 	.word	0x200001a0

080005e0 <random_string>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void random_string(char * string, uint16_t length)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	807b      	strh	r3, [r7, #2]
	int i=0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
	for(; i<length ; i++)
 80005f0:	e007      	b.n	8000602 <random_string+0x22>
	{
		string[i]='a';
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	2261      	movs	r2, #97	; 0x61
 80005fa:	701a      	strb	r2, [r3, #0]
	for(; i<length ; i++)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbf3      	blt.n	80005f2 <random_string+0x12>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f00d ffaa 	bl	800e580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800068c:	23a8      	movs	r3, #168	; 0xa8
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000694:	2307      	movs	r3, #7
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fa07 	bl	8002ab0 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f900 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fc68 	bl	8002fa0 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 f8e9 	bl	80008ac <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	4b63      	ldr	r3, [pc, #396]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a62      	ldr	r2, [pc, #392]	; (8000894 <MX_GPIO_Init+0x1a8>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b60      	ldr	r3, [pc, #384]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	4b5c      	ldr	r3, [pc, #368]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a5b      	ldr	r2, [pc, #364]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b59      	ldr	r3, [pc, #356]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b55      	ldr	r3, [pc, #340]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a54      	ldr	r2, [pc, #336]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b52      	ldr	r3, [pc, #328]	; (8000894 <MX_GPIO_Init+0x1a8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <MX_GPIO_Init+0x1a8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a4d      	ldr	r2, [pc, #308]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a46      	ldr	r2, [pc, #280]	; (8000894 <MX_GPIO_Init+0x1a8>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b40      	ldr	r3, [pc, #256]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a3f      	ldr	r2, [pc, #252]	; (8000894 <MX_GPIO_Init+0x1a8>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <MX_GPIO_Init+0x1a8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f244 0181 	movw	r1, #16513	; 0x4081
 80007b0:	4839      	ldr	r0, [pc, #228]	; (8000898 <MX_GPIO_Init+0x1ac>)
 80007b2:	f002 f949 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4838      	ldr	r0, [pc, #224]	; (800089c <MX_GPIO_Init+0x1b0>)
 80007bc:	f002 f944 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4832      	ldr	r0, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x1b4>)
 80007d8:	f001 ff8a 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <MX_GPIO_Init+0x1ac>)
 80007f6:	f001 ff7b 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800080c:	2307      	movs	r3, #7
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_GPIO_Init+0x1b8>)
 8000818:	f001 ff6a 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <MX_GPIO_Init+0x1b0>)
 8000834:	f001 ff5c 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0x1b0>)
 800084c:	f001 ff50 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000850:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000862:	230a      	movs	r3, #10
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_GPIO_Init+0x1bc>)
 800086e:	f001 ff3f 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_GPIO_Init+0x1bc>)
 8000888:	f001 ff32 	bl	80026f0 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400
 800089c:	40021800 	.word	0x40021800
 80008a0:	40020800 	.word	0x40020800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40020000 	.word	0x40020000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 fbca 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <ETH_IRQHandler+0x10>)
 8000962:	f001 f8f9 	bl	8001b58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20001ab8 	.word	0x20001ab8

08000970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_kill>:

int _kill(int pid, int sig)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <_kill+0x20>)
 800098c:	2216      	movs	r2, #22
 800098e:	601a      	str	r2, [r3, #0]
	return -1;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20024d20 	.word	0x20024d20

080009a4 <_exit>:

void _exit (int status)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ffe5 	bl	8000980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009b6:	e7fe      	b.n	80009b6 <_exit+0x12>

080009b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e009      	b.n	8000a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf1      	blt.n	8000a04 <_write+0x12>
	}
	return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_close>:

int _close(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return -1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a52:	605a      	str	r2, [r3, #4]
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_isatty>:

int _isatty(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d205      	bcs.n	8000ad0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <_sbrk+0x6c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	20030000 	.word	0x20030000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	2000001c 	.word	0x2000001c
 8000afc:	1000c3c8 	.word	0x1000c3c8
 8000b00:	20024d20 	.word	0x20024d20

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <tcp_server_init>:

static void tcp_server_handle(struct tcp_pcb* tpcb, struct tcp_server_struct* es);


void tcp_server_init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000b2e:	f006 fa5d 	bl	8006fec <tcp_new>
 8000b32:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 7);
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <tcp_server_init+0x4c>)
 8000b36:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2207      	movs	r2, #7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f005 f9ae 	bl	8005ea0 <tcp_bind>
 8000b44:	4603      	mov	r3, r0
 8000b46:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8000b48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000b50:	21ff      	movs	r1, #255	; 0xff
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f005 fa5c 	bl	8006010 <tcp_listen_with_backlog>
 8000b58:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000b5a:	4907      	ldr	r1, [pc, #28]	; (8000b78 <tcp_server_init+0x50>)
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f006 fac5 	bl	80070ec <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8000b62:	e003      	b.n	8000b6c <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	2001      	movs	r0, #1
 8000b68:	f003 fd54 	bl	8004614 <memp_free>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	0701a8c0 	.word	0x0701a8c0
 8000b78:	08000b7d 	.word	0x08000b7d

08000b7c <tcp_server_accept>:

static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f006 f83b 	bl	8006c08 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000b92:	200c      	movs	r0, #12
 8000b94:	f003 fb8e 	bl	80042b4 <mem_malloc>
 8000b98:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d01f      	beq.n	8000be0 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000bb8:	6939      	ldr	r1, [r7, #16]
 8000bba:	68b8      	ldr	r0, [r7, #8]
 8000bbc:	f006 fa1e 	bl	8006ffc <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8000bc0:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <tcp_server_accept+0x7c>)
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f006 fa2c 	bl	8007020 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <tcp_server_accept+0x80>)
 8000bca:	68b8      	ldr	r0, [r7, #8]
 8000bcc:	f006 fa6c 	bl	80070a8 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	490b      	ldr	r1, [pc, #44]	; (8000c00 <tcp_server_accept+0x84>)
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	f006 faa1 	bl	800711c <tcp_poll>

    ret_err = ERR_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	75fb      	strb	r3, [r7, #23]
 8000bde:	e005      	b.n	8000bec <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	68b8      	ldr	r0, [r7, #8]
 8000be4:	f000 f929 	bl	8000e3a <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000be8:	23ff      	movs	r3, #255	; 0xff
 8000bea:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	08000c05 	.word	0x08000c05
 8000bfc:	08000d7d 	.word	0x08000d7d
 8000c00:	08000e91 	.word	0x08000e91

08000c04 <tcp_server_recv>:

static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <tcp_server_recv+0x20>
 8000c18:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <tcp_server_recv+0x124>)
 8000c1a:	227a      	movs	r2, #122	; 0x7a
 8000c1c:	4943      	ldr	r1, [pc, #268]	; (8000d2c <tcp_server_recv+0x128>)
 8000c1e:	4844      	ldr	r0, [pc, #272]	; (8000d30 <tcp_server_recv+0x12c>)
 8000c20:	f00d fcb6 	bl	800e590 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d116      	bne.n	8000c5c <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d104      	bne.n	8000c46 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000c3c:	69b9      	ldr	r1, [r7, #24]
 8000c3e:	68b8      	ldr	r0, [r7, #8]
 8000c40:	f000 f8fb 	bl	8000e3a <tcp_server_connection_close>
 8000c44:	e007      	b.n	8000c56 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000c46:	493b      	ldr	r1, [pc, #236]	; (8000d34 <tcp_server_recv+0x130>)
 8000c48:	68b8      	ldr	r0, [r7, #8]
 8000c4a:	f006 fa0b 	bl	8007064 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	68b8      	ldr	r0, [r7, #8]
 8000c52:	f000 f89f 	bl	8000d94 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	77fb      	strb	r3, [r7, #31]
 8000c5a:	e05f      	b.n	8000d1c <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00b      	beq.n	8000c7c <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f004 fadf 	bl	8005234 <pbuf_free>
    }
    ret_err = err;
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	77fb      	strb	r3, [r7, #31]
 8000c7a:	e04f      	b.n	8000d1c <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d110      	bne.n	8000ca6 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000c90:	4928      	ldr	r1, [pc, #160]	; (8000d34 <tcp_server_recv+0x130>)
 8000c92:	68b8      	ldr	r0, [r7, #8]
 8000c94:	f006 f9e6 	bl	8007064 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000c98:	69b9      	ldr	r1, [r7, #24]
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	f000 f91c 	bl	8000ed8 <tcp_server_handle>

    ret_err = ERR_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	77fb      	strb	r3, [r7, #31]
 8000ca4:	e03a      	b.n	8000d1c <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d115      	bne.n	8000cda <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d107      	bne.n	8000cc6 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000cbc:	69b9      	ldr	r1, [r7, #24]
 8000cbe:	68b8      	ldr	r0, [r7, #8]
 8000cc0:	f000 f90a 	bl	8000ed8 <tcp_server_handle>
 8000cc4:	e006      	b.n	8000cd4 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f004 fbc8 	bl	8005464 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	77fb      	strb	r3, [r7, #31]
 8000cd8:	e020      	b.n	8000d1c <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d10e      	bne.n	8000d00 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	891b      	ldrh	r3, [r3, #8]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	68b8      	ldr	r0, [r7, #8]
 8000cea:	f005 faa7 	bl	800623c <tcp_recved>
    es->p = NULL;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f004 fa9d 	bl	8005234 <pbuf_free>
    ret_err = ERR_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	77fb      	strb	r3, [r7, #31]
 8000cfe:	e00d      	b.n	8000d1c <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	891b      	ldrh	r3, [r3, #8]
 8000d04:	4619      	mov	r1, r3
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f005 fa98 	bl	800623c <tcp_recved>
    es->p = NULL;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f004 fa8e 	bl	8005234 <pbuf_free>
    ret_err = ERR_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000d1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	0800f930 	.word	0x0800f930
 8000d2c:	0800f94c 	.word	0x0800f94c
 8000d30:	0800f958 	.word	0x0800f958
 8000d34:	08000d39 	.word	0x08000d39

08000d38 <tcp_server_sent>:

static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	4613      	mov	r3, r2
 8000d44:	80fb      	strh	r3, [r7, #6]
	struct tcp_server_struct *es;

	LWIP_UNUSED_ARG(len);

	es = (struct tcp_server_struct *)arg;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	617b      	str	r3, [r7, #20]
	es->retries = 0;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	705a      	strb	r2, [r3, #1]

	if(es->p != NULL)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <tcp_server_sent+0x2a>
	{
//		tcp_sent(tpcb, tcp_client_sent);
		tcp_server_send(tpcb, es);
 8000d58:	6979      	ldr	r1, [r7, #20]
 8000d5a:	68b8      	ldr	r0, [r7, #8]
 8000d5c:	f000 f81a 	bl	8000d94 <tcp_server_send>
 8000d60:	e007      	b.n	8000d72 <tcp_server_sent+0x3a>
	}
	else
	{
		if(es->state ==ES_CLOSING)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d103      	bne.n	8000d72 <tcp_server_sent+0x3a>
		{
			tcp_server_connection_close(tpcb, es);
 8000d6a:	6979      	ldr	r1, [r7, #20]
 8000d6c:	68b8      	ldr	r0, [r7, #8]
 8000d6e:	f000 f864 	bl	8000e3a <tcp_server_connection_close>
		}
	}

	return ERR_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <tcp_server_error>:

static void tcp_server_error(void *arg, err_t err)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]

}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <tcp_server_send>:


static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	75fb      	strb	r3, [r7, #23]

	while((wr_err == ERR_OK) &&(es->p != NULL) &&(es->p->len <= tcp_sndbuf(tpcb)))
 8000da2:	e036      	b.n	8000e12 <tcp_server_send+0x7e>
	{
		ptr = es->p;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]

		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	6859      	ldr	r1, [r3, #4]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	895a      	ldrh	r2, [r3, #10]
 8000db2:	2301      	movs	r3, #1
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f009 f863 	bl	8009e80 <tcp_write>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	75fb      	strb	r3, [r7, #23]

		if(wr_err == ERR_OK)
 8000dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d11d      	bne.n	8000e02 <tcp_server_send+0x6e>
		{
			u16_t plen;
			u8_t freed;

			plen = ptr->len;
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	895b      	ldrh	r3, [r3, #10]
 8000dca:	81fb      	strh	r3, [r7, #14]

			es->p = ptr->next;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	609a      	str	r2, [r3, #8]

			if(es->p != NULL)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d004      	beq.n	8000de6 <tcp_server_send+0x52>
			{
				pbuf_ref(es->p);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 fac7 	bl	8005374 <pbuf_ref>
			}
			do
			{
				freed = pbuf_free(ptr);
 8000de6:	6938      	ldr	r0, [r7, #16]
 8000de8:	f004 fa24 	bl	8005234 <pbuf_free>
 8000dec:	4603      	mov	r3, r0
 8000dee:	737b      	strb	r3, [r7, #13]
			}
			while(freed==0);
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f7      	beq.n	8000de6 <tcp_server_send+0x52>

			tcp_recved(tpcb, plen);
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f005 fa1e 	bl	800623c <tcp_recved>
 8000e00:	e007      	b.n	8000e12 <tcp_server_send+0x7e>
		}
		else if(wr_err ==ERR_MEM)
 8000e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0a:	d102      	bne.n	8000e12 <tcp_server_send+0x7e>
		{
			es->p = ptr;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	609a      	str	r2, [r3, #8]
	while((wr_err == ERR_OK) &&(es->p != NULL) &&(es->p->len <= tcp_sndbuf(tpcb)))
 8000e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10b      	bne.n	8000e32 <tcp_server_send+0x9e>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <tcp_server_send+0x9e>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	895a      	ldrh	r2, [r3, #10]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d9b8      	bls.n	8000da4 <tcp_server_send+0x10>
		{

		}
	}
//	tcp_output(tpcb);
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <tcp_server_connection_close>:

static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
	tcp_arg(tpcb, NULL);
 8000e44:	2100      	movs	r1, #0
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f006 f8d8 	bl	8006ffc <tcp_arg>
	tcp_sent(tpcb, NULL);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f006 f908 	bl	8007064 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8000e54:	2100      	movs	r1, #0
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f006 f8e2 	bl	8007020 <tcp_recv>
	tcp_err(tpcb, NULL);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f006 f922 	bl	80070a8 <tcp_err>
	tcp_accept(tpcb, NULL);
 8000e64:	2100      	movs	r1, #0
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f006 f940 	bl	80070ec <tcp_accept>
	tcp_poll(tpcb, NULL,0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f006 f953 	bl	800711c <tcp_poll>

	if(es !=NULL)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <tcp_server_connection_close+0x48>
	{
		mem_free(es);
 8000e7c:	6838      	ldr	r0, [r7, #0]
 8000e7e:	f003 f8bd 	bl	8003ffc <mem_free>
	}

	tcp_close(tpcb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f004 ff16 	bl	8005cb4 <tcp_close>

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <tcp_server_poll>:

static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_server_struct *es;

	es = (struct tcp_server_struct*)arg;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60bb      	str	r3, [r7, #8]

	if(es != NULL)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00e      	beq.n	8000ec2 <tcp_server_poll+0x32>
	{
		if(es->p != NULL)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d107      	bne.n	8000ebc <tcp_server_poll+0x2c>
		{

		}
		else
		{
			if(es->state == ES_CLOSING)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d103      	bne.n	8000ebc <tcp_server_poll+0x2c>
			{
				tcp_server_connection_close(tpcb,es);
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f7ff ffbf 	bl	8000e3a <tcp_server_connection_close>
			}
		}
		ret_err = ERR_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e004      	b.n	8000ecc <tcp_server_poll+0x3c>
	}
	else
	{
		tcp_abort(tpcb);
 8000ec2:	6838      	ldr	r0, [r7, #0]
 8000ec4:	f004 ffe0 	bl	8005e88 <tcp_abort>
		ret_err = ERR_ABRT;
 8000ec8:	23f3      	movs	r3, #243	; 0xf3
 8000eca:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <tcp_server_handle>:

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0a0      	sub	sp, #128	; 0x80
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	char *recv;

	/*save recieved string into recv */
	recv= (char*) es->p->payload;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
	pbuf_free(es->p);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 f9a0 	bl	8005234 <pbuf_free>

	char buf1[100];
	int len1 = sprintf(buf1, " Hello from server\n");
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4937      	ldr	r1, [pc, #220]	; (8000fd8 <tcp_server_handle+0x100>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f00d fba0 	bl	800e640 <siprintf>
 8000f00:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	struct pbuf *txBuf1 = pbuf_alloc(PBUF_TRANSPORT, len1, PBUF_RAM);
 8000f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2036      	movs	r0, #54	; 0x36
 8000f0e:	f003 feaf 	bl	8004c70 <pbuf_alloc>
 8000f12:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf1, buf1, len1);
 8000f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f20:	f004 fbf4 	bl	800570c <pbuf_take>

	/* copy the Tx buffer into the buffer  */
	es->p=txBuf1;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f28:	609a      	str	r2, [r3, #8]

	/* send the TX buffer  */
	tcp_server_send(tpcb,es);
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff31 	bl	8000d94 <tcp_server_send>

	/* delete the TX buffer  */
	pbuf_free(txBuf1);
 8000f32:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f34:	f004 f97e 	bl	8005234 <pbuf_free>
	pbuf_free(es->p);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 f979 	bl	8005234 <pbuf_free>

///////////////////////* start of my test area *///////////////////////
	if( !strcmp(recv,"red") )
 8000f42:	4926      	ldr	r1, [pc, #152]	; (8000fdc <tcp_server_handle+0x104>)
 8000f44:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f46:	f7ff f953 	bl	80001f0 <strcmp>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <tcp_server_handle+0x82>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f54:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <tcp_server_handle+0x108>)
 8000f56:	f001 fd90 	bl	8002a7a <HAL_GPIO_TogglePin>
	}
	if(  !strcmp(recv,"blue") )
 8000f5a:	4922      	ldr	r1, [pc, #136]	; (8000fe4 <tcp_server_handle+0x10c>)
 8000f5c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f5e:	f7ff f947 	bl	80001f0 <strcmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <tcp_server_handle+0x98>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <tcp_server_handle+0x108>)
 8000f6c:	f001 fd85 	bl	8002a7a <HAL_GPIO_TogglePin>
	}
	if(  !strcmp(recv,"yellow") )
 8000f70:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <tcp_server_handle+0x110>)
 8000f72:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f74:	f7ff f93c 	bl	80001f0 <strcmp>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <tcp_server_handle+0xae>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <tcp_server_handle+0x108>)
 8000f82:	f001 fd7a 	bl	8002a7a <HAL_GPIO_TogglePin>
	}
	if(  !strcmp(recv,"data") )
 8000f86:	4919      	ldr	r1, [pc, #100]	; (8000fec <tcp_server_handle+0x114>)
 8000f88:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f8a:	f7ff f931 	bl	80001f0 <strcmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d11c      	bne.n	8000fce <tcp_server_handle+0xf6>
	{

			/* allocate pbuf from RAM*/
			struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT, SendBufLength, PBUF_RAM);
 8000f94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f98:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000f9c:	2036      	movs	r0, #54	; 0x36
 8000f9e:	f003 fe67 	bl	8004c70 <pbuf_alloc>
 8000fa2:	6738      	str	r0, [r7, #112]	; 0x70

			/* copy the data into the buffer  */
			pbuf_take(txBuf, SendBuf, SendBufLength);
 8000fa4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000fa8:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <tcp_server_handle+0x118>)
 8000faa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000fac:	f004 fbae 	bl	800570c <pbuf_take>

			/* copy the Tx buffer into the buffer  */
			es->p=txBuf;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000fb4:	609a      	str	r2, [r3, #8]

			/* send the TX buffer  */
			tcp_server_send(tpcb,es);
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff feeb 	bl	8000d94 <tcp_server_send>

			/* free the TX buffer  */
			pbuf_free(txBuf);
 8000fbe:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000fc0:	f004 f938 	bl	8005234 <pbuf_free>

			/*free pcb pbuf */
			pbuf_free(es->p);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f933 	bl	8005234 <pbuf_free>
//
//			/*free pcb pbuf */
//			pbuf_free(es->p);
//	}

}
 8000fce:	bf00      	nop
 8000fd0:	3780      	adds	r7, #128	; 0x80
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0800f980 	.word	0x0800f980
 8000fdc:	0800f994 	.word	0x0800f994
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	0800f998 	.word	0x0800f998
 8000fe8:	0800f9a0 	.word	0x0800f9a0
 8000fec:	0800f9a8 	.word	0x0800f9a8
 8000ff0:	10000078 	.word	0x10000078

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001010:	4c0b      	ldr	r4, [pc, #44]	; (8001040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800101e:	f7ff fd71 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f00d fa53 	bl	800e4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fabf 	bl	80005a8 <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800102c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001030:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8001034:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8001038:	080125e0 	.word	0x080125e0
  ldr r2, =_sbss
 800103c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001040:	20024d30 	.word	0x20024d30

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_Init+0x40>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_Init+0x40>)
 800105e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x40>)
 800106a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f94f 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fc1c 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f967 	bl	800137e <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f92f 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	10000000 	.word	0x10000000
 80010e4:	10000008 	.word	0x10000008
 80010e8:	10000004 	.word	0x10000004

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	10000008 	.word	0x10000008
 8001110:	20000198 	.word	0x20000198

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000198 	.word	0x20000198

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	10000008 	.word	0x10000008

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff29 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff3e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff8e 	bl	8001268 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5d 	bl	8001214 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff31 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80013a8:	4baa      	ldr	r3, [pc, #680]	; (8001654 <HAL_ETH_Init+0x2bc>)
 80013aa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e183      	b.n	80016c6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f002 f8ea 	bl	80035ac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b9e      	ldr	r3, [pc, #632]	; (8001658 <HAL_ETH_Init+0x2c0>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a9d      	ldr	r2, [pc, #628]	; (8001658 <HAL_ETH_Init+0x2c0>)
 80013e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b9b      	ldr	r3, [pc, #620]	; (8001658 <HAL_ETH_Init+0x2c0>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013f4:	4b99      	ldr	r3, [pc, #612]	; (800165c <HAL_ETH_Init+0x2c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_ETH_Init+0x2c4>)
 80013fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001400:	4b96      	ldr	r3, [pc, #600]	; (800165c <HAL_ETH_Init+0x2c4>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4994      	ldr	r1, [pc, #592]	; (800165c <HAL_ETH_Init+0x2c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001426:	f7ff fe75 	bl	8001114 <HAL_GetTick>
 800142a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800142c:	e011      	b.n	8001452 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800142e:	f7ff fe71 	bl	8001114 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800143c:	d909      	bls.n	8001452 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e139      	b.n	80016c6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e4      	bne.n	800142e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f023 031c 	bic.w	r3, r3, #28
 8001472:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001474:	f001 ff5c 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8001478:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a78      	ldr	r2, [pc, #480]	; (8001660 <HAL_ETH_Init+0x2c8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d908      	bls.n	8001494 <HAL_ETH_Init+0xfc>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_ETH_Init+0x2cc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d804      	bhi.n	8001494 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	e027      	b.n	80014e4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_ETH_Init+0x2cc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d908      	bls.n	80014ae <HAL_ETH_Init+0x116>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4a6d      	ldr	r2, [pc, #436]	; (8001654 <HAL_ETH_Init+0x2bc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d204      	bcs.n	80014ae <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f043 030c 	orr.w	r3, r3, #12
 80014aa:	61fb      	str	r3, [r7, #28]
 80014ac:	e01a      	b.n	80014e4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4a68      	ldr	r2, [pc, #416]	; (8001654 <HAL_ETH_Init+0x2bc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d303      	bcc.n	80014be <HAL_ETH_Init+0x126>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4a6b      	ldr	r2, [pc, #428]	; (8001668 <HAL_ETH_Init+0x2d0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d911      	bls.n	80014e2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_ETH_Init+0x2d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <HAL_ETH_Init+0x140>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4a68      	ldr	r2, [pc, #416]	; (800166c <HAL_ETH_Init+0x2d4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d804      	bhi.n	80014d8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e005      	b.n	80014e4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e000      	b.n	80014e4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fc1d 	bl	8001d32 <HAL_ETH_WritePHYRegister>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001502:	6939      	ldr	r1, [r7, #16]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fdd3 	bl	80020b0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0d7      	b.n	80016c6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001516:	20ff      	movs	r0, #255	; 0xff
 8001518:	f7ff fe08 	bl	800112c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a5 	beq.w	8001670 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001526:	f7ff fdf5 	bl	8001114 <HAL_GetTick>
 800152a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fb94 	bl	8001c62 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800153a:	f7ff fdeb 	bl	8001114 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d90f      	bls.n	800156c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fdac 	bl	80020b0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0ac      	b.n	80016c6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0da      	beq.n	800152c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001576:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fbd8 	bl	8001d32 <HAL_ETH_WritePHYRegister>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fd8e 	bl	80020b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800159c:	2301      	movs	r3, #1
 800159e:	e092      	b.n	80016c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fdb8 	bl	8001114 <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	461a      	mov	r2, r3
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fb57 	bl	8001c62 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015b4:	f7ff fdae 	bl	8001114 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d90f      	bls.n	80015e6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fd6f 	bl	80020b0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e06f      	b.n	80016c6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0da      	beq.n	80015a6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	461a      	mov	r2, r3
 80015f6:	2110      	movs	r1, #16
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fb32 	bl	8001c62 <HAL_ETH_ReadPHYRegister>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fd50 	bl	80020b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001618:	2301      	movs	r3, #1
 800161a:	e054      	b.n	80016c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e002      	b.n	8001636 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	e035      	b.n	80016b4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e030      	b.n	80016b4 <HAL_ETH_Init+0x31c>
 8001652:	bf00      	nop
 8001654:	03938700 	.word	0x03938700
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	01312cff 	.word	0x01312cff
 8001664:	02160ebf 	.word	0x02160ebf
 8001668:	05f5e0ff 	.word	0x05f5e0ff
 800166c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001680:	4313      	orrs	r3, r2
 8001682:	b29b      	uxth	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fb52 	bl	8001d32 <HAL_ETH_WritePHYRegister>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fd08 	bl	80020b0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e00c      	b.n	80016c6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016b0:	f7ff fd3c 	bl	800112c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b4:	6939      	ldr	r1, [r7, #16]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fcfa 	bl	80020b0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop

080016d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ETH_DMATxDescListInit+0x20>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e052      	b.n	8001796 <HAL_ETH_DMATxDescListInit+0xc6>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e030      	b.n	800176e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	4413      	add	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	461a      	mov	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d105      	bne.n	8001746 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	d208      	bcs.n	8001762 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	e002      	b.n	8001768 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d3ca      	bcc.n	800170c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	3310      	adds	r3, #16
 8001782:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b087      	sub	sp, #28
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ETH_DMARxDescListInit+0x20>
 80017be:	2302      	movs	r3, #2
 80017c0:	e056      	b.n	8001870 <HAL_ETH_DMARxDescListInit+0xce>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e034      	b.n	8001848 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	015b      	lsls	r3, r3, #5
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ee:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017f6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	461a      	mov	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	429a      	cmp	r2, r3
 8001828:	d208      	bcs.n	800183c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	461a      	mov	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e002      	b.n	8001842 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3c6      	bcc.n	80017de <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185a:	330c      	adds	r3, #12
 800185c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ETH_TransmitFrame+0x24>
 800189c:	2302      	movs	r3, #2
 800189e:	e0cd      	b.n	8001a3c <HAL_ETH_TransmitFrame+0x1c0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0b8      	b.n	8001a3c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da09      	bge.n	80018e8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2212      	movs	r2, #18
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0a9      	b.n	8001a3c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d915      	bls.n	800191e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_ETH_TransmitFrame+0x1cc>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_ETH_TransmitFrame+0x1cc>)
 8001902:	fba3 1302 	umull	r1, r3, r3, r2
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e001      	b.n	8001922 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d11c      	bne.n	8001962 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001936:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001942:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001952:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001960:	e04b      	b.n	80019fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	e044      	b.n	80019f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001976:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d107      	bne.n	800198e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800198c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001996:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3b01      	subs	r3, #1
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d116      	bne.n	80019d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_ETH_TransmitFrame+0x1d0>)
 80019b6:	fb02 f203 	mul.w	r2, r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ce:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	3301      	adds	r3, #1
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3b6      	bcc.n	8001968 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	3314      	adds	r3, #20
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a16:	3314      	adds	r3, #20
 8001a18:	2204      	movs	r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	3304      	adds	r3, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	ac02b00b 	.word	0xac02b00b
 8001a4c:	fffffa0c 	.word	0xfffffa0c

08001a50 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ETH_GetReceivedFrame+0x1a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e070      	b.n	8001b4c <HAL_ETH_GetReceivedFrame+0xfc>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db5a      	blt.n	8001b3a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d030      	beq.n	8001af4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d103      	bne.n	8001aac <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ac0:	3b04      	subs	r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e02b      	b.n	8001b4c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
 8001b22:	e00a      	b.n	8001b3a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b68:	3314      	adds	r3, #20
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	d112      	bne.n	8001b9a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f860 	bl	8001c3a <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	3314      	adds	r3, #20
 8001b84:	2240      	movs	r2, #64	; 0x40
 8001b86:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b98:	e01b      	b.n	8001bd2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d111      	bne.n	8001bd2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f839 	bl	8001c26 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	3314      	adds	r3, #20
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bda:	3314      	adds	r3, #20
 8001bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	3314      	adds	r3, #20
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf6:	d112      	bne.n	8001c1e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f828 	bl	8001c4e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c06:	3314      	adds	r3, #20
 8001c08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c0c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b82      	cmp	r3, #130	; 0x82
 8001c82:	d101      	bne.n	8001c88 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
 8001c86:	e050      	b.n	8001d2a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2282      	movs	r2, #130	; 0x82
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 031c 	and.w	r3, r3, #28
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8a1b      	ldrh	r3, [r3, #16]
 8001ca4:	02db      	lsls	r3, r3, #11
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001cae:	897b      	ldrh	r3, [r7, #10]
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0302 	bic.w	r3, r3, #2
 8001cc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cd4:	f7ff fa1e 	bl	8001114 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cda:	e015      	b.n	8001d08 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001cdc:	f7ff fa1a 	bl	8001114 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d309      	bcc.n	8001d00 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e014      	b.n	8001d2a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1e4      	bne.n	8001cdc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b42      	cmp	r3, #66	; 0x42
 8001d52:	d101      	bne.n	8001d58 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
 8001d56:	e04e      	b.n	8001df6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2242      	movs	r2, #66	; 0x42
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 031c 	and.w	r3, r3, #28
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8a1b      	ldrh	r3, [r3, #16]
 8001d74:	02db      	lsls	r3, r3, #11
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d7e:	897b      	ldrh	r3, [r7, #10]
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dae:	f7ff f9b1 	bl	8001114 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001db4:	e015      	b.n	8001de2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001db6:	f7ff f9ad 	bl	8001114 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d309      	bcc.n	8001dda <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e00d      	b.n	8001df6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e4      	bne.n	8001db6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ETH_Start+0x16>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e01f      	b.n	8001e54 <HAL_ETH_Start+0x56>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fb45 	bl	80024b4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fb7c 	bl	8002528 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fc13 	bl	800265c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fbb0 	bl	800259c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fbdd 	bl	80025fc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ETH_Stop+0x16>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e01f      	b.n	8001eb2 <HAL_ETH_Stop+0x56>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fba2 	bl	80025cc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fbcf 	bl	800262c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fb67 	bl	8002562 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fbe1 	bl	800265c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fb27 	bl	80024ee <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ETH_ConfigMAC+0x1c>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e0e4      	b.n	80020a2 <HAL_ETH_ConfigMAC+0x1e6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80b1 	beq.w	8002052 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <HAL_ETH_ConfigMAC+0x1f0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f08:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f0e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f14:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f1a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f20:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f26:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f2c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f32:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f38:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f3e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f44:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f4a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff f8e2 	bl	800112c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f78:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f7e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f84:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f8a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f90:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f96:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001fa2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fa4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff f8bc 	bl	800112c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fc4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fce:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001fec:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ff2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ff8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ffe:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002004:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff f885 	bl	800112c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff f872 	bl	800112c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	61da      	str	r2, [r3, #28]
 8002050:	e01e      	b.n	8002090 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002060:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002082:	2001      	movs	r0, #1
 8002084:	f7ff f852 	bl	800112c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	ff20810f 	.word	0xff20810f

080020b0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0b0      	sub	sp, #192	; 0xc0
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020cc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020de:	2300      	movs	r3, #0
 80020e0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020fa:	663b      	str	r3, [r7, #96]	; 0x60
 80020fc:	e001      	b.n	8002102 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002106:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800210c:	2300      	movs	r3, #0
 800210e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002132:	2300      	movs	r3, #0
 8002134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002184:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002188:	4bac      	ldr	r3, [pc, #688]	; (800243c <ETH_MACDMAConfig+0x38c>)
 800218a:	4013      	ands	r3, r2
 800218c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002190:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002194:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002198:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800219a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800219c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021a2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021a6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021aa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021b0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021b4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021b8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021bc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021c0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021c4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7fe ffa1 	bl	800112c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021f8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021fc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002202:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002208:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800220a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800220e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002214:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002218:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002220:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002222:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800222e:	2001      	movs	r0, #1
 8002230:	f7fe ff7c 	bl	800112c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002246:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002250:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800225c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002260:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002264:	4013      	ands	r3, r2
 8002266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800226a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800226e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002274:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800227a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002280:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002286:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800228c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800228e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7fe ff3d 	bl	800112c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ba:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022bc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7fe ff28 	bl	800112c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022e4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ee:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800230a:	2304      	movs	r3, #4
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800230e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800231a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800232a:	2300      	movs	r3, #0
 800232c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800232e:	2300      	movs	r3, #0
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	3318      	adds	r3, #24
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002342:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <ETH_MACDMAConfig+0x390>)
 8002348:	4013      	ands	r3, r2
 800234a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800234e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002350:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002352:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002354:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002356:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002358:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800235a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800235c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800235e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002360:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002362:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002364:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002366:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800236a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800236e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002382:	3318      	adds	r3, #24
 8002384:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002388:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002392:	3318      	adds	r3, #24
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800239a:	2001      	movs	r0, #1
 800239c:	f7fe fec6 	bl	800112c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a8:	3318      	adds	r3, #24
 80023aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ae:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023b4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023b8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023bc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023c0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80023c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023c6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80023ca:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7fe fe9f 	bl	800112c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023fa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10f      	bne.n	8002424 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	331c      	adds	r3, #28
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800241c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002420:	331c      	adds	r3, #28
 8002422:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	461a      	mov	r2, r3
 800242a:	2100      	movs	r1, #0
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f809 	bl	8002444 <ETH_MACAddressConfig>
}
 8002432:	bf00      	nop
 8002434:	37c0      	adds	r7, #192	; 0xc0
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	ff20810f 	.word	0xff20810f
 8002440:	f8de3f23 	.word	0xf8de3f23

08002444 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3305      	adds	r3, #5
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	3204      	adds	r2, #4
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <ETH_MACAddressConfig+0x68>)
 8002466:	4413      	add	r3, r2
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3303      	adds	r3, #3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	061a      	lsls	r2, r3, #24
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3302      	adds	r3, #2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	4313      	orrs	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <ETH_MACAddressConfig+0x6c>)
 8002496:	4413      	add	r3, r2
 8002498:	461a      	mov	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6013      	str	r3, [r2, #0]
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40028040 	.word	0x40028040
 80024b0:	40028044 	.word	0x40028044

080024b4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f000 f8e9 	bl	80026b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002512:	2001      	movs	r0, #1
 8002514:	f000 f8cc 	bl	80026b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0204 	orr.w	r2, r2, #4
 8002542:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f000 f8af 	bl	80026b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0204 	bic.w	r2, r2, #4
 800257c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f892 	bl	80026b0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ac:	3318      	adds	r3, #24
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025bc:	3318      	adds	r3, #24
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025dc:	3318      	adds	r3, #24
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ec:	3318      	adds	r3, #24
 80025ee:	601a      	str	r2, [r3, #0]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260c:	3318      	adds	r3, #24
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0202 	orr.w	r2, r2, #2
 8002618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261c:	3318      	adds	r3, #24
 800261e:	601a      	str	r2, [r3, #0]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263c:	3318      	adds	r3, #24
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0202 	bic.w	r2, r2, #2
 8002648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264c:	3318      	adds	r3, #24
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002670:	3318      	adds	r3, #24
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800267c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002680:	3318      	adds	r3, #24
 8002682:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	3318      	adds	r3, #24
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002692:	2001      	movs	r0, #1
 8002694:	f000 f80c 	bl	80026b0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a2:	3318      	adds	r3, #24
 80026a4:	601a      	str	r2, [r3, #0]
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <ETH_Delay+0x38>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <ETH_Delay+0x3c>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a5b      	lsrs	r3, r3, #9
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80026cc:	bf00      	nop
  } 
  while (Delay --);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	60fa      	str	r2, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <ETH_Delay+0x1c>
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	10000000 	.word	0x10000000
 80026ec:	10624dd3 	.word	0x10624dd3

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e177      	b.n	80029fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	f040 8166 	bne.w	80029f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d005      	beq.n	8002742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273e:	2b02      	cmp	r3, #2
 8002740:	d130      	bne.n	80027a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0201 	and.w	r2, r3, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d017      	beq.n	80027e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d123      	bne.n	8002834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80c0 	beq.w	80029f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_GPIO_Init+0x324>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_GPIO_Init+0x324>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_GPIO_Init+0x324>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002892:	4a61      	ldr	r2, [pc, #388]	; (8002a18 <HAL_GPIO_Init+0x328>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <HAL_GPIO_Init+0x32c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d037      	beq.n	800292e <HAL_GPIO_Init+0x23e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a57      	ldr	r2, [pc, #348]	; (8002a20 <HAL_GPIO_Init+0x330>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d031      	beq.n	800292a <HAL_GPIO_Init+0x23a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a56      	ldr	r2, [pc, #344]	; (8002a24 <HAL_GPIO_Init+0x334>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02b      	beq.n	8002926 <HAL_GPIO_Init+0x236>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a55      	ldr	r2, [pc, #340]	; (8002a28 <HAL_GPIO_Init+0x338>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d025      	beq.n	8002922 <HAL_GPIO_Init+0x232>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a54      	ldr	r2, [pc, #336]	; (8002a2c <HAL_GPIO_Init+0x33c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <HAL_GPIO_Init+0x22e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a53      	ldr	r2, [pc, #332]	; (8002a30 <HAL_GPIO_Init+0x340>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x22a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <HAL_GPIO_Init+0x344>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x226>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <HAL_GPIO_Init+0x348>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x222>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <HAL_GPIO_Init+0x34c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x21e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <HAL_GPIO_Init+0x350>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x21a>
 8002906:	2309      	movs	r3, #9
 8002908:	e012      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800290a:	230a      	movs	r3, #10
 800290c:	e010      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800290e:	2308      	movs	r3, #8
 8002910:	e00e      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002912:	2307      	movs	r3, #7
 8002914:	e00c      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002916:	2306      	movs	r3, #6
 8002918:	e00a      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800291a:	2305      	movs	r3, #5
 800291c:	e008      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800291e:	2304      	movs	r3, #4
 8002920:	e006      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002922:	2303      	movs	r3, #3
 8002924:	e004      	b.n	8002930 <HAL_GPIO_Init+0x240>
 8002926:	2302      	movs	r3, #2
 8002928:	e002      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_GPIO_Init+0x240>
 800292e:	2300      	movs	r3, #0
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	f002 0203 	and.w	r2, r2, #3
 8002936:	0092      	lsls	r2, r2, #2
 8002938:	4093      	lsls	r3, r2
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002940:	4935      	ldr	r1, [pc, #212]	; (8002a18 <HAL_GPIO_Init+0x328>)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_GPIO_Init+0x354>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002972:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <HAL_GPIO_Init+0x354>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002978:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_GPIO_Init+0x354>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800299c:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <HAL_GPIO_Init+0x354>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_GPIO_Init+0x354>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_GPIO_Init+0x354>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_GPIO_Init+0x354>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_GPIO_Init+0x354>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3301      	adds	r3, #1
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	f67f ae84 	bls.w	800270c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40020800 	.word	0x40020800
 8002a28:	40020c00 	.word	0x40020c00
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021400 	.word	0x40021400
 8002a34:	40021800 	.word	0x40021800
 8002a38:	40021c00 	.word	0x40021c00
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40022400 	.word	0x40022400
 8002a44:	40013c00 	.word	0x40013c00

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a64:	e003      	b.n	8002a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	460b      	mov	r3, r1
 8002a84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4013      	ands	r3, r2
 8002a92:	041a      	lsls	r2, r3, #16
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	887b      	ldrh	r3, [r7, #2]
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e264      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d075      	beq.n	8002bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ace:	4ba3      	ldr	r3, [pc, #652]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4ba0      	ldr	r3, [pc, #640]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4b9d      	ldr	r3, [pc, #628]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b99      	ldr	r3, [pc, #612]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d157      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e23f      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x74>
 8002b16:	4b91      	ldr	r3, [pc, #580]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a90      	ldr	r2, [pc, #576]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a8a      	ldr	r2, [pc, #552]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b48:	4b84      	ldr	r3, [pc, #528]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a83      	ldr	r2, [pc, #524]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fad4 	bl	8001114 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fad0 	bl	8001114 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e204      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fac0 	bl	8001114 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fabc 	bl	8001114 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1f0      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b6c      	ldr	r3, [pc, #432]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe8>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1c4      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4952      	ldr	r1, [pc, #328]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <HAL_RCC_OscConfig+0x2b0>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fa75 	bl	8001114 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fa71 	bl	8001114 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1a5      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4940      	ldr	r1, [pc, #256]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_OscConfig+0x2b0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fa54 	bl	8001114 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe fa50 	bl	8001114 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e184      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d030      	beq.n	8002cfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_RCC_OscConfig+0x2b4>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fa34 	bl	8001114 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fa30 	bl	8001114 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e164      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x200>
 8002cce:	e015      	b.n	8002cfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_OscConfig+0x2b4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fa1d 	bl	8001114 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe fa19 	bl	8001114 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e14d      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a0 	beq.w	8002e4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x2b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d121      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x2b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RCC_OscConfig+0x2b8>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fe f9df 	bl	8001114 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	e011      	b.n	8002d7e <HAL_RCC_OscConfig+0x2ce>
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470000 	.word	0x42470000
 8002d64:	42470e80 	.word	0x42470e80
 8002d68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe f9d2 	bl	8001114 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e106      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b85      	ldr	r3, [pc, #532]	; (8002f94 <HAL_RCC_OscConfig+0x4e4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2f0>
 8002d92:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a80      	ldr	r2, [pc, #512]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x32a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x312>
 8002da8:	4b7b      	ldr	r3, [pc, #492]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a7a      	ldr	r2, [pc, #488]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	4b78      	ldr	r3, [pc, #480]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a77      	ldr	r2, [pc, #476]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x32a>
 8002dc2:	4b75      	ldr	r3, [pc, #468]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a74      	ldr	r2, [pc, #464]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b72      	ldr	r3, [pc, #456]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a71      	ldr	r2, [pc, #452]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7fe f997 	bl	8001114 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe f993 	bl	8001114 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0c5      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x33a>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f981 	bl	8001114 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe f97d 	bl	8001114 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0af      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a55      	ldr	r2, [pc, #340]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 809b 	beq.w	8002f8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e54:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d05c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d141      	bne.n	8002eec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b4c      	ldr	r3, [pc, #304]	; (8002f9c <HAL_RCC_OscConfig+0x4ec>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f951 	bl	8001114 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f94d 	bl	8001114 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e081      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e88:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	019b      	lsls	r3, r3, #6
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	4937      	ldr	r1, [pc, #220]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebe:	4b37      	ldr	r3, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x4ec>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f926 	bl	8001114 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe f922 	bl	8001114 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e056      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x41c>
 8002eea:	e04e      	b.n	8002f8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x4ec>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f90f 	bl	8001114 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe f90b 	bl	8001114 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e03f      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x44a>
 8002f18:	e037      	b.n	8002f8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e032      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_RCC_OscConfig+0x4e8>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d028      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d121      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d11a      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f56:	4013      	ands	r3, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	085b      	lsrs	r3, r3, #1
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40007000 	.word	0x40007000
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470060 	.word	0x42470060

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0cc      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d90c      	bls.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0b8      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	4b59      	ldr	r3, [pc, #356]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003018:	4b50      	ldr	r3, [pc, #320]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	494d      	ldr	r1, [pc, #308]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d044      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d119      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d003      	beq.n	800305e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305a:	2b03      	cmp	r3, #3
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	4b3f      	ldr	r3, [pc, #252]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	4b3b      	ldr	r3, [pc, #236]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e067      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f023 0203 	bic.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4934      	ldr	r1, [pc, #208]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003090:	f7fe f840 	bl	8001114 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	e00a      	b.n	80030ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003098:	f7fe f83c 	bl	8001114 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04f      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 020c 	and.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	429a      	cmp	r2, r3
 80030be:	d1eb      	bne.n	8003098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d20c      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e032      	b.n	800314e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4916      	ldr	r1, [pc, #88]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490e      	ldr	r1, [pc, #56]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003126:	f000 f821 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490a      	ldr	r1, [pc, #40]	; (8003160 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd ffa0 	bl	800108c <HAL_InitTick>

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023c00 	.word	0x40023c00
 800315c:	40023800 	.word	0x40023800
 8003160:	08012390 	.word	0x08012390
 8003164:	10000000 	.word	0x10000000
 8003168:	10000004 	.word	0x10000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	2300      	movs	r3, #0
 800317e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003184:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d00d      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x40>
 8003190:	2b08      	cmp	r3, #8
 8003192:	f200 80bd 	bhi.w	8003310 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 800319a:	2b04      	cmp	r3, #4
 800319c:	d003      	beq.n	80031a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800319e:	e0b7      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031a2:	60bb      	str	r3, [r7, #8]
       break;
 80031a4:	e0b7      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a6:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031a8:	60bb      	str	r3, [r7, #8]
      break;
 80031aa:	e0b4      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b6:	4b5b      	ldr	r3, [pc, #364]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d04d      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	ea02 0800 	and.w	r8, r2, r0
 80031da:	ea03 0901 	and.w	r9, r3, r1
 80031de:	4640      	mov	r0, r8
 80031e0:	4649      	mov	r1, r9
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	014b      	lsls	r3, r1, #5
 80031ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f0:	0142      	lsls	r2, r0, #5
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	ebb0 0008 	subs.w	r0, r0, r8
 80031fa:	eb61 0109 	sbc.w	r1, r1, r9
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	018b      	lsls	r3, r1, #6
 8003208:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800320c:	0182      	lsls	r2, r0, #6
 800320e:	1a12      	subs	r2, r2, r0
 8003210:	eb63 0301 	sbc.w	r3, r3, r1
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	00d9      	lsls	r1, r3, #3
 800321e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003222:	00d0      	lsls	r0, r2, #3
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	eb12 0208 	adds.w	r2, r2, r8
 800322c:	eb43 0309 	adc.w	r3, r3, r9
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	0259      	lsls	r1, r3, #9
 800323a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800323e:	0250      	lsls	r0, r2, #9
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f7fd f82e 	bl	80002b0 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e04a      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	461a      	mov	r2, r3
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800326e:	f04f 0100 	mov.w	r1, #0
 8003272:	ea02 0400 	and.w	r4, r2, r0
 8003276:	ea03 0501 	and.w	r5, r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	014b      	lsls	r3, r1, #5
 8003288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800328c:	0142      	lsls	r2, r0, #5
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	1b00      	subs	r0, r0, r4
 8003294:	eb61 0105 	sbc.w	r1, r1, r5
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	018b      	lsls	r3, r1, #6
 80032a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a6:	0182      	lsls	r2, r0, #6
 80032a8:	1a12      	subs	r2, r2, r0
 80032aa:	eb63 0301 	sbc.w	r3, r3, r1
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	00d9      	lsls	r1, r3, #3
 80032b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032bc:	00d0      	lsls	r0, r2, #3
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	1912      	adds	r2, r2, r4
 80032c4:	eb45 0303 	adc.w	r3, r5, r3
 80032c8:	f04f 0000 	mov.w	r0, #0
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	0299      	lsls	r1, r3, #10
 80032d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032d6:	0290      	lsls	r0, r2, #10
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f7fc ffe2 	bl	80002b0 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	60bb      	str	r3, [r7, #8]
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003312:	60bb      	str	r3, [r7, #8]
      break;
 8003314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003316:	68bb      	ldr	r3, [r7, #8]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	00f42400 	.word	0x00f42400
 800332c:	007a1200 	.word	0x007a1200

08003330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <HAL_RCC_GetHCLKFreq+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	10000000 	.word	0x10000000

08003348 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800334e:	4b8d      	ldr	r3, [pc, #564]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003350:	22c0      	movs	r2, #192	; 0xc0
 8003352:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003354:	4b8b      	ldr	r3, [pc, #556]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003356:	22a8      	movs	r2, #168	; 0xa8
 8003358:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800335a:	4b8a      	ldr	r3, [pc, #552]	; (8003584 <MX_LWIP_Init+0x23c>)
 800335c:	2201      	movs	r2, #1
 800335e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 7;
 8003360:	4b88      	ldr	r3, [pc, #544]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003362:	2207      	movs	r2, #7
 8003364:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003366:	4b88      	ldr	r3, [pc, #544]	; (8003588 <MX_LWIP_Init+0x240>)
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <MX_LWIP_Init+0x240>)
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003372:	4b85      	ldr	r3, [pc, #532]	; (8003588 <MX_LWIP_Init+0x240>)
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003378:	4b83      	ldr	r3, [pc, #524]	; (8003588 <MX_LWIP_Init+0x240>)
 800337a:	2200      	movs	r2, #0
 800337c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800337e:	4b83      	ldr	r3, [pc, #524]	; (800358c <MX_LWIP_Init+0x244>)
 8003380:	22c0      	movs	r2, #192	; 0xc0
 8003382:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003384:	4b81      	ldr	r3, [pc, #516]	; (800358c <MX_LWIP_Init+0x244>)
 8003386:	22a8      	movs	r2, #168	; 0xa8
 8003388:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800338a:	4b80      	ldr	r3, [pc, #512]	; (800358c <MX_LWIP_Init+0x244>)
 800338c:	2201      	movs	r2, #1
 800338e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 8;
 8003390:	4b7e      	ldr	r3, [pc, #504]	; (800358c <MX_LWIP_Init+0x244>)
 8003392:	2208      	movs	r2, #8
 8003394:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003396:	f000 fce1 	bl	8003d5c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800339a:	4b7a      	ldr	r3, [pc, #488]	; (8003584 <MX_LWIP_Init+0x23c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	061a      	lsls	r2, r3, #24
 80033a0:	4b78      	ldr	r3, [pc, #480]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	4b76      	ldr	r3, [pc, #472]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033aa:	789b      	ldrb	r3, [r3, #2]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	4313      	orrs	r3, r2
 80033b0:	4a74      	ldr	r2, [pc, #464]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033b2:	78d2      	ldrb	r2, [r2, #3]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	061a      	lsls	r2, r3, #24
 80033b8:	4b72      	ldr	r3, [pc, #456]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	0619      	lsls	r1, r3, #24
 80033be:	4b71      	ldr	r3, [pc, #452]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	4319      	orrs	r1, r3
 80033c6:	4b6f      	ldr	r3, [pc, #444]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033c8:	789b      	ldrb	r3, [r3, #2]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	430b      	orrs	r3, r1
 80033ce:	496d      	ldr	r1, [pc, #436]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033d0:	78c9      	ldrb	r1, [r1, #3]
 80033d2:	430b      	orrs	r3, r1
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033da:	431a      	orrs	r2, r3
 80033dc:	4b69      	ldr	r3, [pc, #420]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	0619      	lsls	r1, r3, #24
 80033e2:	4b68      	ldr	r3, [pc, #416]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	4319      	orrs	r1, r3
 80033ea:	4b66      	ldr	r3, [pc, #408]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033ec:	789b      	ldrb	r3, [r3, #2]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	430b      	orrs	r3, r1
 80033f2:	4964      	ldr	r1, [pc, #400]	; (8003584 <MX_LWIP_Init+0x23c>)
 80033f4:	78c9      	ldrb	r1, [r1, #3]
 80033f6:	430b      	orrs	r3, r1
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033fe:	431a      	orrs	r2, r3
 8003400:	4b60      	ldr	r3, [pc, #384]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	0619      	lsls	r1, r3, #24
 8003406:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	4319      	orrs	r1, r3
 800340e:	4b5d      	ldr	r3, [pc, #372]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003410:	789b      	ldrb	r3, [r3, #2]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	430b      	orrs	r3, r1
 8003416:	495b      	ldr	r1, [pc, #364]	; (8003584 <MX_LWIP_Init+0x23c>)
 8003418:	78c9      	ldrb	r1, [r1, #3]
 800341a:	430b      	orrs	r3, r1
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	4313      	orrs	r3, r2
 8003420:	4a5b      	ldr	r2, [pc, #364]	; (8003590 <MX_LWIP_Init+0x248>)
 8003422:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003424:	4b58      	ldr	r3, [pc, #352]	; (8003588 <MX_LWIP_Init+0x240>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	061a      	lsls	r2, r3, #24
 800342a:	4b57      	ldr	r3, [pc, #348]	; (8003588 <MX_LWIP_Init+0x240>)
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	431a      	orrs	r2, r3
 8003432:	4b55      	ldr	r3, [pc, #340]	; (8003588 <MX_LWIP_Init+0x240>)
 8003434:	789b      	ldrb	r3, [r3, #2]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	4313      	orrs	r3, r2
 800343a:	4a53      	ldr	r2, [pc, #332]	; (8003588 <MX_LWIP_Init+0x240>)
 800343c:	78d2      	ldrb	r2, [r2, #3]
 800343e:	4313      	orrs	r3, r2
 8003440:	061a      	lsls	r2, r3, #24
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <MX_LWIP_Init+0x240>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	0619      	lsls	r1, r3, #24
 8003448:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <MX_LWIP_Init+0x240>)
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	4319      	orrs	r1, r3
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <MX_LWIP_Init+0x240>)
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	430b      	orrs	r3, r1
 8003458:	494b      	ldr	r1, [pc, #300]	; (8003588 <MX_LWIP_Init+0x240>)
 800345a:	78c9      	ldrb	r1, [r1, #3]
 800345c:	430b      	orrs	r3, r1
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003464:	431a      	orrs	r2, r3
 8003466:	4b48      	ldr	r3, [pc, #288]	; (8003588 <MX_LWIP_Init+0x240>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	0619      	lsls	r1, r3, #24
 800346c:	4b46      	ldr	r3, [pc, #280]	; (8003588 <MX_LWIP_Init+0x240>)
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	4319      	orrs	r1, r3
 8003474:	4b44      	ldr	r3, [pc, #272]	; (8003588 <MX_LWIP_Init+0x240>)
 8003476:	789b      	ldrb	r3, [r3, #2]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	430b      	orrs	r3, r1
 800347c:	4942      	ldr	r1, [pc, #264]	; (8003588 <MX_LWIP_Init+0x240>)
 800347e:	78c9      	ldrb	r1, [r1, #3]
 8003480:	430b      	orrs	r3, r1
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003488:	431a      	orrs	r2, r3
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <MX_LWIP_Init+0x240>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	0619      	lsls	r1, r3, #24
 8003490:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <MX_LWIP_Init+0x240>)
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	4319      	orrs	r1, r3
 8003498:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <MX_LWIP_Init+0x240>)
 800349a:	789b      	ldrb	r3, [r3, #2]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	430b      	orrs	r3, r1
 80034a0:	4939      	ldr	r1, [pc, #228]	; (8003588 <MX_LWIP_Init+0x240>)
 80034a2:	78c9      	ldrb	r1, [r1, #3]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	0e1b      	lsrs	r3, r3, #24
 80034a8:	4313      	orrs	r3, r2
 80034aa:	4a3a      	ldr	r2, [pc, #232]	; (8003594 <MX_LWIP_Init+0x24c>)
 80034ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <MX_LWIP_Init+0x244>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	061a      	lsls	r2, r3, #24
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <MX_LWIP_Init+0x244>)
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	431a      	orrs	r2, r3
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <MX_LWIP_Init+0x244>)
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	4313      	orrs	r3, r2
 80034c4:	4a31      	ldr	r2, [pc, #196]	; (800358c <MX_LWIP_Init+0x244>)
 80034c6:	78d2      	ldrb	r2, [r2, #3]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	061a      	lsls	r2, r3, #24
 80034cc:	4b2f      	ldr	r3, [pc, #188]	; (800358c <MX_LWIP_Init+0x244>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	0619      	lsls	r1, r3, #24
 80034d2:	4b2e      	ldr	r3, [pc, #184]	; (800358c <MX_LWIP_Init+0x244>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	4319      	orrs	r1, r3
 80034da:	4b2c      	ldr	r3, [pc, #176]	; (800358c <MX_LWIP_Init+0x244>)
 80034dc:	789b      	ldrb	r3, [r3, #2]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	430b      	orrs	r3, r1
 80034e2:	492a      	ldr	r1, [pc, #168]	; (800358c <MX_LWIP_Init+0x244>)
 80034e4:	78c9      	ldrb	r1, [r1, #3]
 80034e6:	430b      	orrs	r3, r1
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034ee:	431a      	orrs	r2, r3
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <MX_LWIP_Init+0x244>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	0619      	lsls	r1, r3, #24
 80034f6:	4b25      	ldr	r3, [pc, #148]	; (800358c <MX_LWIP_Init+0x244>)
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	4319      	orrs	r1, r3
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <MX_LWIP_Init+0x244>)
 8003500:	789b      	ldrb	r3, [r3, #2]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	430b      	orrs	r3, r1
 8003506:	4921      	ldr	r1, [pc, #132]	; (800358c <MX_LWIP_Init+0x244>)
 8003508:	78c9      	ldrb	r1, [r1, #3]
 800350a:	430b      	orrs	r3, r1
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003512:	431a      	orrs	r2, r3
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <MX_LWIP_Init+0x244>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	0619      	lsls	r1, r3, #24
 800351a:	4b1c      	ldr	r3, [pc, #112]	; (800358c <MX_LWIP_Init+0x244>)
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	4319      	orrs	r1, r3
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MX_LWIP_Init+0x244>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	430b      	orrs	r3, r1
 800352a:	4918      	ldr	r1, [pc, #96]	; (800358c <MX_LWIP_Init+0x244>)
 800352c:	78c9      	ldrb	r1, [r1, #3]
 800352e:	430b      	orrs	r3, r1
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	4313      	orrs	r3, r2
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <MX_LWIP_Init+0x250>)
 8003536:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <MX_LWIP_Init+0x254>)
 800353a:	9302      	str	r3, [sp, #8]
 800353c:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <MX_LWIP_Init+0x258>)
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	2300      	movs	r3, #0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4b14      	ldr	r3, [pc, #80]	; (8003598 <MX_LWIP_Init+0x250>)
 8003546:	4a13      	ldr	r2, [pc, #76]	; (8003594 <MX_LWIP_Init+0x24c>)
 8003548:	4911      	ldr	r1, [pc, #68]	; (8003590 <MX_LWIP_Init+0x248>)
 800354a:	4816      	ldr	r0, [pc, #88]	; (80035a4 <MX_LWIP_Init+0x25c>)
 800354c:	f001 f894 	bl	8004678 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003550:	4814      	ldr	r0, [pc, #80]	; (80035a4 <MX_LWIP_Init+0x25c>)
 8003552:	f001 fa43 	bl	80049dc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <MX_LWIP_Init+0x25c>)
 8003558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003568:	480e      	ldr	r0, [pc, #56]	; (80035a4 <MX_LWIP_Init+0x25c>)
 800356a:	f001 fa47 	bl	80049fc <netif_set_up>
 800356e:	e002      	b.n	8003576 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <MX_LWIP_Init+0x25c>)
 8003572:	f001 faaf 	bl	8004ad4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003576:	490c      	ldr	r1, [pc, #48]	; (80035a8 <MX_LWIP_Init+0x260>)
 8003578:	480a      	ldr	r0, [pc, #40]	; (80035a4 <MX_LWIP_Init+0x25c>)
 800357a:	f001 fadd 	bl	8004b38 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	200001dc 	.word	0x200001dc
 8003588:	200001d8 	.word	0x200001d8
 800358c:	2000019c 	.word	0x2000019c
 8003590:	200001d4 	.word	0x200001d4
 8003594:	200001e0 	.word	0x200001e0
 8003598:	200001e4 	.word	0x200001e4
 800359c:	0800e321 	.word	0x0800e321
 80035a0:	08003b89 	.word	0x08003b89
 80035a4:	200001a0 	.word	0x200001a0
 80035a8:	08003bf5 	.word	0x08003bf5

080035ac <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a59      	ldr	r2, [pc, #356]	; (8003730 <HAL_ETH_MspInit+0x184>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f040 80ac 	bne.w	8003728 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_ETH_MspInit+0x188>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4a56      	ldr	r2, [pc, #344]	; (8003734 <HAL_ETH_MspInit+0x188>)
 80035da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035de:	6313      	str	r3, [r2, #48]	; 0x30
 80035e0:	4b54      	ldr	r3, [pc, #336]	; (8003734 <HAL_ETH_MspInit+0x188>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_ETH_MspInit+0x188>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_ETH_MspInit+0x188>)
 80035f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035fa:	6313      	str	r3, [r2, #48]	; 0x30
 80035fc:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_ETH_MspInit+0x188>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	4b49      	ldr	r3, [pc, #292]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4a48      	ldr	r2, [pc, #288]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003616:	6313      	str	r3, [r2, #48]	; 0x30
 8003618:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	4b42      	ldr	r3, [pc, #264]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4a41      	ldr	r2, [pc, #260]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	6313      	str	r3, [r2, #48]	; 0x30
 8003634:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6313      	str	r3, [r2, #48]	; 0x30
 8003650:	4b38      	ldr	r3, [pc, #224]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a33      	ldr	r2, [pc, #204]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	6313      	str	r3, [r2, #48]	; 0x30
 800366c:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <HAL_ETH_MspInit+0x188>)
 8003682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003686:	6313      	str	r3, [r2, #48]	; 0x30
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_ETH_MspInit+0x188>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003694:	2332      	movs	r3, #50	; 0x32
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a0:	2303      	movs	r3, #3
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036a4:	230b      	movs	r3, #11
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4822      	ldr	r0, [pc, #136]	; (8003738 <HAL_ETH_MspInit+0x18c>)
 80036b0:	f7ff f81e 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80036b4:	2386      	movs	r3, #134	; 0x86
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c0:	2303      	movs	r3, #3
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036c4:	230b      	movs	r3, #11
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036cc:	4619      	mov	r1, r3
 80036ce:	481b      	ldr	r0, [pc, #108]	; (800373c <HAL_ETH_MspInit+0x190>)
 80036d0:	f7ff f80e 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80036d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036da:	2302      	movs	r3, #2
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e2:	2303      	movs	r3, #3
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036e6:	230b      	movs	r3, #11
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80036ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ee:	4619      	mov	r1, r3
 80036f0:	4813      	ldr	r0, [pc, #76]	; (8003740 <HAL_ETH_MspInit+0x194>)
 80036f2:	f7fe fffd 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80036f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2302      	movs	r3, #2
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003704:	2303      	movs	r3, #3
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003708:	230b      	movs	r3, #11
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800370c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003710:	4619      	mov	r1, r3
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <HAL_ETH_MspInit+0x198>)
 8003714:	f7fe ffec 	bl	80026f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003718:	2200      	movs	r2, #0
 800371a:	2100      	movs	r1, #0
 800371c:	203d      	movs	r0, #61	; 0x3d
 800371e:	f7fd fe04 	bl	800132a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003722:	203d      	movs	r0, #61	; 0x3d
 8003724:	f7fd fe1d 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003728:	bf00      	nop
 800372a:	3738      	adds	r7, #56	; 0x38
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40028000 	.word	0x40028000
 8003734:	40023800 	.word	0x40023800
 8003738:	40020800 	.word	0x40020800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40021800 	.word	0x40021800

08003748 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003754:	4b4d      	ldr	r3, [pc, #308]	; (800388c <low_level_init+0x144>)
 8003756:	4a4e      	ldr	r2, [pc, #312]	; (8003890 <low_level_init+0x148>)
 8003758:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800375a:	4b4c      	ldr	r3, [pc, #304]	; (800388c <low_level_init+0x144>)
 800375c:	2201      	movs	r2, #1
 800375e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003760:	4b4a      	ldr	r3, [pc, #296]	; (800388c <low_level_init+0x144>)
 8003762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003766:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003768:	4b48      	ldr	r3, [pc, #288]	; (800388c <low_level_init+0x144>)
 800376a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800376e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <low_level_init+0x144>)
 8003772:	2200      	movs	r2, #0
 8003774:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003776:	2300      	movs	r3, #0
 8003778:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800377e:	23e1      	movs	r3, #225	; 0xe1
 8003780:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003782:	2300      	movs	r3, #0
 8003784:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003786:	2300      	movs	r3, #0
 8003788:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800378a:	2300      	movs	r3, #0
 800378c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800378e:	4a3f      	ldr	r2, [pc, #252]	; (800388c <low_level_init+0x144>)
 8003790:	f107 0308 	add.w	r3, r7, #8
 8003794:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <low_level_init+0x144>)
 8003798:	2200      	movs	r2, #0
 800379a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800379c:	4b3b      	ldr	r3, [pc, #236]	; (800388c <low_level_init+0x144>)
 800379e:	2200      	movs	r2, #0
 80037a0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80037a2:	4b3a      	ldr	r3, [pc, #232]	; (800388c <low_level_init+0x144>)
 80037a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037a8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80037aa:	4838      	ldr	r0, [pc, #224]	; (800388c <low_level_init+0x144>)
 80037ac:	f7fd fdf4 	bl	8001398 <HAL_ETH_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80037cc:	2304      	movs	r3, #4
 80037ce:	4a31      	ldr	r2, [pc, #196]	; (8003894 <low_level_init+0x14c>)
 80037d0:	4931      	ldr	r1, [pc, #196]	; (8003898 <low_level_init+0x150>)
 80037d2:	482e      	ldr	r0, [pc, #184]	; (800388c <low_level_init+0x144>)
 80037d4:	f7fd ff7c 	bl	80016d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80037d8:	2304      	movs	r3, #4
 80037da:	4a30      	ldr	r2, [pc, #192]	; (800389c <low_level_init+0x154>)
 80037dc:	4930      	ldr	r1, [pc, #192]	; (80038a0 <low_level_init+0x158>)
 80037de:	482b      	ldr	r0, [pc, #172]	; (800388c <low_level_init+0x144>)
 80037e0:	f7fd ffdf 	bl	80017a2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2206      	movs	r2, #6
 80037e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <low_level_init+0x144>)
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <low_level_init+0x144>)
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	785a      	ldrb	r2, [r3, #1]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <low_level_init+0x144>)
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	789a      	ldrb	r2, [r3, #2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <low_level_init+0x144>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	78da      	ldrb	r2, [r3, #3]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <low_level_init+0x144>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	791a      	ldrb	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <low_level_init+0x144>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	795a      	ldrb	r2, [r3, #5]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800383a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003842:	f043 030a 	orr.w	r3, r3, #10
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800384e:	480f      	ldr	r0, [pc, #60]	; (800388c <low_level_init+0x144>)
 8003850:	f7fe fad5 	bl	8001dfe <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	461a      	mov	r2, r3
 800385a:	211d      	movs	r1, #29
 800385c:	480b      	ldr	r0, [pc, #44]	; (800388c <low_level_init+0x144>)
 800385e:	f7fe fa00 	bl	8001c62 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f043 030b 	orr.w	r3, r3, #11
 8003868:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	461a      	mov	r2, r3
 800386e:	211d      	movs	r1, #29
 8003870:	4806      	ldr	r0, [pc, #24]	; (800388c <low_level_init+0x144>)
 8003872:	f7fe fa5e 	bl	8001d32 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003876:	f107 0310 	add.w	r3, r7, #16
 800387a:	461a      	mov	r2, r3
 800387c:	211d      	movs	r1, #29
 800387e:	4803      	ldr	r0, [pc, #12]	; (800388c <low_level_init+0x144>)
 8003880:	f7fe f9ef 	bl	8001c62 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003884:	bf00      	nop
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20001ab8 	.word	0x20001ab8
 8003890:	40028000 	.word	0x40028000
 8003894:	20001b00 	.word	0x20001b00
 8003898:	200001e8 	.word	0x200001e8
 800389c:	20000268 	.word	0x20000268
 80038a0:	20001a38 	.word	0x20001a38

080038a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80038ae:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <low_level_output+0x138>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80038c6:	4b45      	ldr	r3, [pc, #276]	; (80039dc <low_level_output+0x138>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	e05a      	b.n	800398c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da03      	bge.n	80038e6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80038de:	23f8      	movs	r3, #248	; 0xf8
 80038e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80038e4:	e05c      	b.n	80039a0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	895b      	ldrh	r3, [r3, #10]
 80038ea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80038f0:	e02f      	b.n	8003952 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	18d0      	adds	r0, r2, r3
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	18d1      	adds	r1, r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003906:	3304      	adds	r3, #4
 8003908:	461a      	mov	r2, r3
 800390a:	f00a fe11 	bl	800e530 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	da03      	bge.n	8003924 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800391c:	23f8      	movs	r3, #248	; 0xf8
 800391e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003922:	e03d      	b.n	80039a0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003934:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003940:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800394c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800395c:	4293      	cmp	r3, r2
 800395e:	d8c8      	bhi.n	80038f2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	18d0      	adds	r0, r2, r3
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4413      	add	r3, r2
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4619      	mov	r1, r3
 8003972:	f00a fddd 	bl	800e530 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1a1      	bne.n	80038d6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	4811      	ldr	r0, [pc, #68]	; (80039dc <low_level_output+0x138>)
 8003996:	f7fd ff71 	bl	800187c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <low_level_output+0x138>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a8:	3314      	adds	r3, #20
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00d      	beq.n	80039d0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <low_level_output+0x138>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	3314      	adds	r3, #20
 80039be:	2220      	movs	r2, #32
 80039c0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <low_level_output+0x138>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ca:	3304      	adds	r3, #4
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80039d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20001ab8 	.word	0x20001ab8

080039e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003a04:	484f      	ldr	r0, [pc, #316]	; (8003b44 <low_level_input+0x164>)
 8003a06:	f7fe f823 	bl	8001a50 <HAL_ETH_GetReceivedFrame>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <low_level_input+0x34>

    return NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e092      	b.n	8003b3a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003a14:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <low_level_input+0x164>)
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <low_level_input+0x164>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003a20:	89fb      	ldrh	r3, [r7, #14]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003a26:	89fb      	ldrh	r3, [r7, #14]
 8003a28:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f001 f91e 	bl	8004c70 <pbuf_alloc>
 8003a34:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d04b      	beq.n	8003ad4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a3c:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <low_level_input+0x164>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4a:	e040      	b.n	8003ace <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	895b      	ldrh	r3, [r3, #10]
 8003a50:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a56:	e021      	b.n	8003a9c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	18d0      	adds	r0, r2, r3
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	18d1      	adds	r1, r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f00a fd5e 	bl	800e530 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	4413      	add	r3, r2
 8003a86:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a8a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a96:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d8d6      	bhi.n	8003a58 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	18d0      	adds	r0, r2, r3
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4619      	mov	r1, r3
 8003abc:	f00a fd38 	bl	800e530 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1bb      	bne.n	8003a4c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <low_level_input+0x164>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e00b      	b.n	8003af8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3301      	adds	r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <low_level_input+0x164>)
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d3ee      	bcc.n	8003ae0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <low_level_input+0x164>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <low_level_input+0x164>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b10:	3314      	adds	r3, #20
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <low_level_input+0x164>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b24:	3314      	adds	r3, #20
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <low_level_input+0x164>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	3308      	adds	r3, #8
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3730      	adds	r7, #48	; 0x30
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20001ab8 	.word	0x20001ab8

08003b48 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff45 	bl	80039e0 <low_level_input>
 8003b56:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	4798      	blx	r3
 8003b68:	4603      	mov	r3, r0
 8003b6a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003b6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f001 fb5d 	bl	8005234 <pbuf_free>
    p = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e000      	b.n	8003b82 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003b80:	bf00      	nop
  }
}
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <ethernetif_init+0x1c>
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <ethernetif_init+0x48>)
 8003b98:	f44f 7206 	mov.w	r2, #536	; 0x218
 8003b9c:	490d      	ldr	r1, [pc, #52]	; (8003bd4 <ethernetif_init+0x4c>)
 8003b9e:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <ethernetif_init+0x50>)
 8003ba0:	f00a fcf6 	bl	800e590 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2273      	movs	r2, #115	; 0x73
 8003ba8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2274      	movs	r2, #116	; 0x74
 8003bb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <ethernetif_init+0x54>)
 8003bb8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <ethernetif_init+0x58>)
 8003bbe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fdc1 	bl	8003748 <low_level_init>

  return ERR_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	0800f9b0 	.word	0x0800f9b0
 8003bd4:	0800f9cc 	.word	0x0800f9cc
 8003bd8:	0800f9dc 	.word	0x0800f9dc
 8003bdc:	0800c7e5 	.word	0x0800c7e5
 8003be0:	080038a5 	.word	0x080038a5

08003be4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003be8:	f7fd fa94 	bl	8001114 <HAL_GetTick>
 8003bec:	4603      	mov	r3, r0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d05d      	beq.n	8003cd2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c16:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d03f      	beq.n	8003c9e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c22:	2100      	movs	r1, #0
 8003c24:	4830      	ldr	r0, [pc, #192]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c26:	f7fe f884 	bl	8001d32 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003c2a:	f7fd fa73 	bl	8001114 <HAL_GetTick>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c32:	f107 0308 	add.w	r3, r7, #8
 8003c36:	461a      	mov	r2, r3
 8003c38:	2101      	movs	r1, #1
 8003c3a:	482b      	ldr	r0, [pc, #172]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c3c:	f7fe f811 	bl	8001c62 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003c40:	f7fd fa68 	bl	8001114 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c4e:	d828      	bhi.n	8003ca2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0eb      	beq.n	8003c32 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2110      	movs	r1, #16
 8003c62:	4821      	ldr	r0, [pc, #132]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c64:	f7fd fffd 	bl	8001c62 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e002      	b.n	8003c82 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003c8c:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	e016      	b.n	8003cc2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e011      	b.n	8003cc2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <ethernetif_update_config+0xb0>
          goto error;
 8003ca2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2100      	movs	r1, #0
 8003cbc:	480a      	ldr	r0, [pc, #40]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003cbe:	f7fe f838 	bl	8001d32 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003cc6:	f7fe f8f9 	bl	8001ebc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003cca:	4807      	ldr	r0, [pc, #28]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003ccc:	f7fe f897 	bl	8001dfe <HAL_ETH_Start>
 8003cd0:	e002      	b.n	8003cd8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003cd2:	4805      	ldr	r0, [pc, #20]	; (8003ce8 <ethernetif_update_config+0xf4>)
 8003cd4:	f7fe f8c2 	bl	8001e5c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f807 	bl	8003cec <ethernetif_notify_conn_changed>
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20001ab8 	.word	0x20001ab8

08003cec <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	b21a      	sxth	r2, r3
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b21b      	sxth	r3, r3
 8003d1c:	b29b      	uxth	r3, r3
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	061a      	lsls	r2, r3, #24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0e1b      	lsrs	r3, r3, #24
 8003d4e:	4313      	orrs	r3, r2
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003d66:	f000 f8d1 	bl	8003f0c <mem_init>
  memp_init();
 8003d6a:	f000 fbc3 	bl	80044f4 <memp_init>
  pbuf_init();
  netif_init();
 8003d6e:	f000 fc7b 	bl	8004668 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003d72:	f007 ff31 	bl	800bbd8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003d76:	f001 fd8d 	bl	8005894 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003d7a:	f007 fea3 	bl	800bac4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <ptr_to_mem+0x1c>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4413      	add	r3, r2
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	20000020 	.word	0x20000020

08003da8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <mem_to_ptr+0x1c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	1ad3      	subs	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000020 	.word	0x20000020

08003dc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003dd0:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <plug_holes+0x120>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d206      	bcs.n	8003de8 <plug_holes+0x20>
 8003dda:	4b44      	ldr	r3, [pc, #272]	; (8003eec <plug_holes+0x124>)
 8003ddc:	f240 12df 	movw	r2, #479	; 0x1df
 8003de0:	4943      	ldr	r1, [pc, #268]	; (8003ef0 <plug_holes+0x128>)
 8003de2:	4844      	ldr	r0, [pc, #272]	; (8003ef4 <plug_holes+0x12c>)
 8003de4:	f00a fbd4 	bl	800e590 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <plug_holes+0x130>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d306      	bcc.n	8003e00 <plug_holes+0x38>
 8003df2:	4b3e      	ldr	r3, [pc, #248]	; (8003eec <plug_holes+0x124>)
 8003df4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003df8:	4940      	ldr	r1, [pc, #256]	; (8003efc <plug_holes+0x134>)
 8003dfa:	483e      	ldr	r0, [pc, #248]	; (8003ef4 <plug_holes+0x12c>)
 8003dfc:	f00a fbc8 	bl	800e590 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7a1b      	ldrb	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <plug_holes+0x4e>
 8003e08:	4b38      	ldr	r3, [pc, #224]	; (8003eec <plug_holes+0x124>)
 8003e0a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003e0e:	493c      	ldr	r1, [pc, #240]	; (8003f00 <plug_holes+0x138>)
 8003e10:	4838      	ldr	r0, [pc, #224]	; (8003ef4 <plug_holes+0x12c>)
 8003e12:	f00a fbbd 	bl	800e590 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8003e1e:	d906      	bls.n	8003e2e <plug_holes+0x66>
 8003e20:	4b32      	ldr	r3, [pc, #200]	; (8003eec <plug_holes+0x124>)
 8003e22:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003e26:	4937      	ldr	r1, [pc, #220]	; (8003f04 <plug_holes+0x13c>)
 8003e28:	4832      	ldr	r0, [pc, #200]	; (8003ef4 <plug_holes+0x12c>)
 8003e2a:	f00a fbb1 	bl	800e590 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ffa8 	bl	8003d88 <ptr_to_mem>
 8003e38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d024      	beq.n	8003e8c <plug_holes+0xc4>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	7a1b      	ldrb	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d120      	bne.n	8003e8c <plug_holes+0xc4>
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <plug_holes+0x130>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d01b      	beq.n	8003e8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <plug_holes+0x140>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d102      	bne.n	8003e64 <plug_holes+0x9c>
      lfree = mem;
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <plug_holes+0x140>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8003e74:	d00a      	beq.n	8003e8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff84 	bl	8003d88 <ptr_to_mem>
 8003e80:	4604      	mov	r4, r0
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff90 	bl	8003da8 <mem_to_ptr>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff79 	bl	8003d88 <ptr_to_mem>
 8003e96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d01f      	beq.n	8003ee0 <plug_holes+0x118>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	7a1b      	ldrb	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11b      	bne.n	8003ee0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <plug_holes+0x140>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d102      	bne.n	8003eb8 <plug_holes+0xf0>
      lfree = pmem;
 8003eb2:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <plug_holes+0x140>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8003ec8:	d00a      	beq.n	8003ee0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ff5a 	bl	8003d88 <ptr_to_mem>
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	68b8      	ldr	r0, [r7, #8]
 8003ed8:	f7ff ff66 	bl	8003da8 <mem_to_ptr>
 8003edc:	4603      	mov	r3, r0
 8003ede:	6063      	str	r3, [r4, #4]
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	20000020 	.word	0x20000020
 8003eec:	0800fa04 	.word	0x0800fa04
 8003ef0:	0800fa34 	.word	0x0800fa34
 8003ef4:	0800fa4c 	.word	0x0800fa4c
 8003ef8:	20000024 	.word	0x20000024
 8003efc:	0800fa74 	.word	0x0800fa74
 8003f00:	0800fa90 	.word	0x0800fa90
 8003f04:	0800faac 	.word	0x0800faac
 8003f08:	20000028 	.word	0x20000028

08003f0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <mem_init+0x68>)
 8003f14:	3303      	adds	r3, #3
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <mem_init+0x6c>)
 8003f1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <mem_init+0x6c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f44f 32f0 	mov.w	r2, #122880	; 0x1e000
 8003f2c:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003f3a:	f44f 30f0 	mov.w	r0, #122880	; 0x1e000
 8003f3e:	f7ff ff23 	bl	8003d88 <ptr_to_mem>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <mem_init+0x70>)
 8003f46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <mem_init+0x70>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <mem_init+0x70>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f44f 32f0 	mov.w	r2, #122880	; 0x1e000
 8003f58:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <mem_init+0x70>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 32f0 	mov.w	r2, #122880	; 0x1e000
 8003f62:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <mem_init+0x6c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <mem_init+0x74>)
 8003f6a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200032e8 	.word	0x200032e8
 8003f78:	20000020 	.word	0x20000020
 8003f7c:	20000024 	.word	0x20000024
 8003f80:	20000028 	.word	0x20000028

08003f84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff0b 	bl	8003da8 <mem_to_ptr>
 8003f92:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fef5 	bl	8003d88 <ptr_to_mem>
 8003f9e:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff feef 	bl	8003d88 <ptr_to_mem>
 8003faa:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8003fb4:	d818      	bhi.n	8003fe8 <mem_link_valid+0x64>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8003fbe:	d813      	bhi.n	8003fe8 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d004      	beq.n	8003fd4 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d109      	bne.n	8003fe8 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <mem_link_valid+0x74>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d006      	beq.n	8003fec <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <mem_link_valid+0x68>
    return 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <mem_link_valid+0x6a>
  }
  return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000024 	.word	0x20000024

08003ffc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d04c      	beq.n	80040a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <mem_free+0xb0>)
 8004016:	f240 2273 	movw	r2, #627	; 0x273
 800401a:	4925      	ldr	r1, [pc, #148]	; (80040b0 <mem_free+0xb4>)
 800401c:	4825      	ldr	r0, [pc, #148]	; (80040b4 <mem_free+0xb8>)
 800401e:	f00a fab7 	bl	800e590 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004022:	e040      	b.n	80040a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3b0c      	subs	r3, #12
 8004028:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800402a:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <mem_free+0xbc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	429a      	cmp	r2, r3
 8004032:	d306      	bcc.n	8004042 <mem_free+0x46>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f103 020c 	add.w	r2, r3, #12
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <mem_free+0xc0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d907      	bls.n	8004052 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <mem_free+0xb0>)
 8004044:	f240 227f 	movw	r2, #639	; 0x27f
 8004048:	491d      	ldr	r1, [pc, #116]	; (80040c0 <mem_free+0xc4>)
 800404a:	481a      	ldr	r0, [pc, #104]	; (80040b4 <mem_free+0xb8>)
 800404c:	f00a faa0 	bl	800e590 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004050:	e029      	b.n	80040a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	7a1b      	ldrb	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <mem_free+0xb0>)
 800405c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004060:	4918      	ldr	r1, [pc, #96]	; (80040c4 <mem_free+0xc8>)
 8004062:	4814      	ldr	r0, [pc, #80]	; (80040b4 <mem_free+0xb8>)
 8004064:	f00a fa94 	bl	800e590 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004068:	e01d      	b.n	80040a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7ff ff8a 	bl	8003f84 <mem_link_valid>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <mem_free+0xb0>)
 8004078:	f240 2295 	movw	r2, #661	; 0x295
 800407c:	4912      	ldr	r1, [pc, #72]	; (80040c8 <mem_free+0xcc>)
 800407e:	480d      	ldr	r0, [pc, #52]	; (80040b4 <mem_free+0xb8>)
 8004080:	f00a fa86 	bl	800e590 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004084:	e00f      	b.n	80040a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <mem_free+0xd0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d202      	bcs.n	800409c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004096:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <mem_free+0xd0>)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fe93 	bl	8003dc8 <plug_holes>
 80040a2:	e000      	b.n	80040a6 <mem_free+0xaa>
    return;
 80040a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0800fa04 	.word	0x0800fa04
 80040b0:	0800fad8 	.word	0x0800fad8
 80040b4:	0800fa4c 	.word	0x0800fa4c
 80040b8:	20000020 	.word	0x20000020
 80040bc:	20000024 	.word	0x20000024
 80040c0:	0800fafc 	.word	0x0800fafc
 80040c4:	0800fb18 	.word	0x0800fb18
 80040c8:	0800fb40 	.word	0x0800fb40
 80040cc:	20000028 	.word	0x20000028

080040d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3303      	adds	r3, #3
 80040de:	f023 0303 	bic.w	r3, r3, #3
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	2b0b      	cmp	r3, #11
 80040e8:	d801      	bhi.n	80040ee <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80040ea:	230c      	movs	r3, #12
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 80040f4:	d803      	bhi.n	80040fe <mem_trim+0x2e>
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d201      	bcs.n	8004102 <mem_trim+0x32>
    return NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	e0c4      	b.n	800428c <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004102:	4b64      	ldr	r3, [pc, #400]	; (8004294 <mem_trim+0x1c4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d304      	bcc.n	8004116 <mem_trim+0x46>
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <mem_trim+0x1c8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d306      	bcc.n	8004124 <mem_trim+0x54>
 8004116:	4b61      	ldr	r3, [pc, #388]	; (800429c <mem_trim+0x1cc>)
 8004118:	f240 22d1 	movw	r2, #721	; 0x2d1
 800411c:	4960      	ldr	r1, [pc, #384]	; (80042a0 <mem_trim+0x1d0>)
 800411e:	4861      	ldr	r0, [pc, #388]	; (80042a4 <mem_trim+0x1d4>)
 8004120:	f00a fa36 	bl	800e590 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004124:	4b5b      	ldr	r3, [pc, #364]	; (8004294 <mem_trim+0x1c4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d304      	bcc.n	8004138 <mem_trim+0x68>
 800412e:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <mem_trim+0x1c8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d301      	bcc.n	800413c <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	e0a7      	b.n	800428c <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b0c      	subs	r3, #12
 8004140:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004142:	6a38      	ldr	r0, [r7, #32]
 8004144:	f7ff fe30 	bl	8003da8 <mem_to_ptr>
 8004148:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	3b0c      	subs	r3, #12
 8004154:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	429a      	cmp	r2, r3
 800415c:	d906      	bls.n	800416c <mem_trim+0x9c>
 800415e:	4b4f      	ldr	r3, [pc, #316]	; (800429c <mem_trim+0x1cc>)
 8004160:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004164:	4950      	ldr	r1, [pc, #320]	; (80042a8 <mem_trim+0x1d8>)
 8004166:	484f      	ldr	r0, [pc, #316]	; (80042a4 <mem_trim+0x1d4>)
 8004168:	f00a fa12 	bl	800e590 <iprintf>
  if (newsize > size) {
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d901      	bls.n	8004178 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	e089      	b.n	800428c <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	429a      	cmp	r2, r3
 800417e:	d101      	bne.n	8004184 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	e083      	b.n	800428c <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fdfd 	bl	8003d88 <ptr_to_mem>
 800418e:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	7a1b      	ldrb	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d13c      	bne.n	8004212 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 80041a0:	d106      	bne.n	80041b0 <mem_trim+0xe0>
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <mem_trim+0x1cc>)
 80041a4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80041a8:	4940      	ldr	r1, [pc, #256]	; (80042ac <mem_trim+0x1dc>)
 80041aa:	483e      	ldr	r0, [pc, #248]	; (80042a4 <mem_trim+0x1d4>)
 80041ac:	f00a f9f0 	bl	800e590 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	4413      	add	r3, r2
 80041bc:	330c      	adds	r3, #12
 80041be:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 80041c0:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <mem_trim+0x1e0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d105      	bne.n	80041d6 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 80041ca:	6938      	ldr	r0, [r7, #16]
 80041cc:	f7ff fddc 	bl	8003d88 <ptr_to_mem>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <mem_trim+0x1e0>)
 80041d4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80041d6:	6938      	ldr	r0, [r7, #16]
 80041d8:	f7ff fdd6 	bl	8003d88 <ptr_to_mem>
 80041dc:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 80041fe:	d044      	beq.n	800428a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fdbf 	bl	8003d88 <ptr_to_mem>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6053      	str	r3, [r2, #4]
 8004210:	e03b      	b.n	800428a <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	3318      	adds	r3, #24
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d336      	bcc.n	800428a <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	4413      	add	r3, r2
 8004222:	330c      	adds	r3, #12
 8004224:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 800422e:	d106      	bne.n	800423e <mem_trim+0x16e>
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <mem_trim+0x1cc>)
 8004232:	f240 3216 	movw	r2, #790	; 0x316
 8004236:	491d      	ldr	r1, [pc, #116]	; (80042ac <mem_trim+0x1dc>)
 8004238:	481a      	ldr	r0, [pc, #104]	; (80042a4 <mem_trim+0x1d4>)
 800423a:	f00a f9a9 	bl	800e590 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800423e:	6938      	ldr	r0, [r7, #16]
 8004240:	f7ff fda2 	bl	8003d88 <ptr_to_mem>
 8004244:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8004246:	4b1a      	ldr	r3, [pc, #104]	; (80042b0 <mem_trim+0x1e0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d202      	bcs.n	8004256 <mem_trim+0x186>
      lfree = mem2;
 8004250:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <mem_trim+0x1e0>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8004278:	d007      	beq.n	800428a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fd82 	bl	8003d88 <ptr_to_mem>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800428a:	687b      	ldr	r3, [r7, #4]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3728      	adds	r7, #40	; 0x28
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000020 	.word	0x20000020
 8004298:	20000024 	.word	0x20000024
 800429c:	0800fa04 	.word	0x0800fa04
 80042a0:	0800fb74 	.word	0x0800fb74
 80042a4:	0800fa4c 	.word	0x0800fa4c
 80042a8:	0800fb8c 	.word	0x0800fb8c
 80042ac:	0800fbac 	.word	0x0800fbac
 80042b0:	20000028 	.word	0x20000028

080042b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <mem_malloc+0x12>
    return NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e0d0      	b.n	8004468 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3303      	adds	r3, #3
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b0b      	cmp	r3, #11
 80042d4:	d801      	bhi.n	80042da <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80042d6:	230c      	movs	r3, #12
 80042d8:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 80042e0:	d803      	bhi.n	80042ea <mem_malloc+0x36>
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d201      	bcs.n	80042ee <mem_malloc+0x3a>
    return NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e0bc      	b.n	8004468 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80042ee:	4b60      	ldr	r3, [pc, #384]	; (8004470 <mem_malloc+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fd58 	bl	8003da8 <mem_to_ptr>
 80042f8:	61f8      	str	r0, [r7, #28]
 80042fa:	e0ad      	b.n	8004458 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80042fc:	69f8      	ldr	r0, [r7, #28]
 80042fe:	f7ff fd43 	bl	8003d88 <ptr_to_mem>
 8004302:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	7a1b      	ldrb	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 809f 	bne.w	800444c <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	f200 8096 	bhi.w	800444c <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f1a3 020c 	sub.w	r2, r3, #12
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	3318      	adds	r3, #24
 8004330:	429a      	cmp	r2, r3
 8004332:	d331      	bcc.n	8004398 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	330c      	adds	r3, #12
 800433c:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8004344:	d106      	bne.n	8004354 <mem_malloc+0xa0>
 8004346:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <mem_malloc+0x1c0>)
 8004348:	f240 3287 	movw	r2, #903	; 0x387
 800434c:	494a      	ldr	r1, [pc, #296]	; (8004478 <mem_malloc+0x1c4>)
 800434e:	484b      	ldr	r0, [pc, #300]	; (800447c <mem_malloc+0x1c8>)
 8004350:	f00a f91e 	bl	800e590 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff fd17 	bl	8003d88 <ptr_to_mem>
 800435a:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2201      	movs	r2, #1
 800437a:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f5b3 3ff0 	cmp.w	r3, #122880	; 0x1e000
 8004384:	d00b      	beq.n	800439e <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fcfc 	bl	8003d88 <ptr_to_mem>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6053      	str	r3, [r2, #4]
 8004396:	e002      	b.n	800439e <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2201      	movs	r2, #1
 800439c:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800439e:	4b34      	ldr	r3, [pc, #208]	; (8004470 <mem_malloc+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d127      	bne.n	80043f8 <mem_malloc+0x144>
          struct mem *cur = lfree;
 80043a8:	4b31      	ldr	r3, [pc, #196]	; (8004470 <mem_malloc+0x1bc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80043ae:	e005      	b.n	80043bc <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fce7 	bl	8003d88 <ptr_to_mem>
 80043ba:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	7a1b      	ldrb	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <mem_malloc+0x11a>
 80043c4:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <mem_malloc+0x1cc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d1f0      	bne.n	80043b0 <mem_malloc+0xfc>
          }
          lfree = cur;
 80043ce:	4a28      	ldr	r2, [pc, #160]	; (8004470 <mem_malloc+0x1bc>)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80043d4:	4b26      	ldr	r3, [pc, #152]	; (8004470 <mem_malloc+0x1bc>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b29      	ldr	r3, [pc, #164]	; (8004480 <mem_malloc+0x1cc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d00b      	beq.n	80043f8 <mem_malloc+0x144>
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <mem_malloc+0x1bc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	7a1b      	ldrb	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <mem_malloc+0x144>
 80043ea:	4b22      	ldr	r3, [pc, #136]	; (8004474 <mem_malloc+0x1c0>)
 80043ec:	f240 32b5 	movw	r2, #949	; 0x3b5
 80043f0:	4924      	ldr	r1, [pc, #144]	; (8004484 <mem_malloc+0x1d0>)
 80043f2:	4822      	ldr	r0, [pc, #136]	; (800447c <mem_malloc+0x1c8>)
 80043f4:	f00a f8cc 	bl	800e590 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4413      	add	r3, r2
 80043fe:	330c      	adds	r3, #12
 8004400:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <mem_malloc+0x1cc>)
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	4293      	cmp	r3, r2
 8004406:	d906      	bls.n	8004416 <mem_malloc+0x162>
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <mem_malloc+0x1c0>)
 800440a:	f240 32b9 	movw	r2, #953	; 0x3b9
 800440e:	491e      	ldr	r1, [pc, #120]	; (8004488 <mem_malloc+0x1d4>)
 8004410:	481a      	ldr	r0, [pc, #104]	; (800447c <mem_malloc+0x1c8>)
 8004412:	f00a f8bd 	bl	800e590 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <mem_malloc+0x17a>
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <mem_malloc+0x1c0>)
 8004422:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004426:	4919      	ldr	r1, [pc, #100]	; (800448c <mem_malloc+0x1d8>)
 8004428:	4814      	ldr	r0, [pc, #80]	; (800447c <mem_malloc+0x1c8>)
 800442a:	f00a f8b1 	bl	800e590 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <mem_malloc+0x192>
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <mem_malloc+0x1c0>)
 800443a:	f240 32bd 	movw	r2, #957	; 0x3bd
 800443e:	4914      	ldr	r1, [pc, #80]	; (8004490 <mem_malloc+0x1dc>)
 8004440:	480e      	ldr	r0, [pc, #56]	; (800447c <mem_malloc+0x1c8>)
 8004442:	f00a f8a5 	bl	800e590 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	330c      	adds	r3, #12
 800444a:	e00d      	b.n	8004468 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 800444c:	69f8      	ldr	r0, [r7, #28]
 800444e:	f7ff fc9b 	bl	8003d88 <ptr_to_mem>
 8004452:	4603      	mov	r3, r0
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	f5c3 33f0 	rsb	r3, r3, #122880	; 0x1e000
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	429a      	cmp	r2, r3
 8004462:	f4ff af4b 	bcc.w	80042fc <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000028 	.word	0x20000028
 8004474:	0800fa04 	.word	0x0800fa04
 8004478:	0800fbac 	.word	0x0800fbac
 800447c:	0800fa4c 	.word	0x0800fa4c
 8004480:	20000024 	.word	0x20000024
 8004484:	0800fbc0 	.word	0x0800fbc0
 8004488:	0800fbdc 	.word	0x0800fbdc
 800448c:	0800fc0c 	.word	0x0800fc0c
 8004490:	0800fc3c 	.word	0x0800fc3c

08004494 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	3303      	adds	r3, #3
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e011      	b.n	80044da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	885b      	ldrh	r3, [r3, #2]
 80044de:	461a      	mov	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4293      	cmp	r3, r2
 80044e4:	dbe7      	blt.n	80044b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80044fa:	2300      	movs	r3, #0
 80044fc:	80fb      	strh	r3, [r7, #6]
 80044fe:	e009      	b.n	8004514 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <memp_init+0x30>)
 8004504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ffc3 	bl	8004494 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	3301      	adds	r3, #1
 8004512:	80fb      	strh	r3, [r7, #6]
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d9f2      	bls.n	8004500 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	0801240c 	.word	0x0801240c

08004528 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d012      	beq.n	8004564 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d006      	beq.n	8004560 <do_memp_malloc_pool+0x38>
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <do_memp_malloc_pool+0x48>)
 8004554:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004558:	4906      	ldr	r1, [pc, #24]	; (8004574 <do_memp_malloc_pool+0x4c>)
 800455a:	4807      	ldr	r0, [pc, #28]	; (8004578 <do_memp_malloc_pool+0x50>)
 800455c:	f00a f818 	bl	800e590 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	e000      	b.n	8004566 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	0800fc60 	.word	0x0800fc60
 8004574:	0800fc90 	.word	0x0800fc90
 8004578:	0800fcb4 	.word	0x0800fcb4

0800457c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b08      	cmp	r3, #8
 800458a:	d908      	bls.n	800459e <memp_malloc+0x22>
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <memp_malloc+0x3c>)
 800458e:	f240 1257 	movw	r2, #343	; 0x157
 8004592:	490a      	ldr	r1, [pc, #40]	; (80045bc <memp_malloc+0x40>)
 8004594:	480a      	ldr	r0, [pc, #40]	; (80045c0 <memp_malloc+0x44>)
 8004596:	f009 fffb 	bl	800e590 <iprintf>
 800459a:	2300      	movs	r3, #0
 800459c:	e008      	b.n	80045b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <memp_malloc+0x48>)
 80045a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff ffbe 	bl	8004528 <do_memp_malloc_pool>
 80045ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	0800fc60 	.word	0x0800fc60
 80045bc:	0800fcf0 	.word	0x0800fcf0
 80045c0:	0800fcb4 	.word	0x0800fcb4
 80045c4:	0801240c 	.word	0x0801240c

080045c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <do_memp_free_pool+0x22>
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <do_memp_free_pool+0x40>)
 80045de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80045e2:	490a      	ldr	r1, [pc, #40]	; (800460c <do_memp_free_pool+0x44>)
 80045e4:	480a      	ldr	r0, [pc, #40]	; (8004610 <do_memp_free_pool+0x48>)
 80045e6:	f009 ffd3 	bl	800e590 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	0800fc60 	.word	0x0800fc60
 800460c:	0800fd10 	.word	0x0800fd10
 8004610:	0800fcb4 	.word	0x0800fcb4

08004614 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d907      	bls.n	8004636 <memp_free+0x22>
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <memp_free+0x44>)
 8004628:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800462c:	490b      	ldr	r1, [pc, #44]	; (800465c <memp_free+0x48>)
 800462e:	480c      	ldr	r0, [pc, #48]	; (8004660 <memp_free+0x4c>)
 8004630:	f009 ffae 	bl	800e590 <iprintf>
 8004634:	e00c      	b.n	8004650 <memp_free+0x3c>

  if (mem == NULL) {
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <memp_free+0x50>)
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ffbe 	bl	80045c8 <do_memp_free_pool>
 800464c:	e000      	b.n	8004650 <memp_free+0x3c>
    return;
 800464e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	0800fc60 	.word	0x0800fc60
 800465c:	0800fd30 	.word	0x0800fd30
 8004660:	0800fcb4 	.word	0x0800fcb4
 8004664:	0801240c 	.word	0x0801240c

08004668 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d108      	bne.n	800469e <netif_add+0x26>
 800468c:	4b57      	ldr	r3, [pc, #348]	; (80047ec <netif_add+0x174>)
 800468e:	f240 1227 	movw	r2, #295	; 0x127
 8004692:	4957      	ldr	r1, [pc, #348]	; (80047f0 <netif_add+0x178>)
 8004694:	4857      	ldr	r0, [pc, #348]	; (80047f4 <netif_add+0x17c>)
 8004696:	f009 ff7b 	bl	800e590 <iprintf>
 800469a:	2300      	movs	r3, #0
 800469c:	e0a2      	b.n	80047e4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <netif_add+0x3e>
 80046a4:	4b51      	ldr	r3, [pc, #324]	; (80047ec <netif_add+0x174>)
 80046a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80046aa:	4953      	ldr	r1, [pc, #332]	; (80047f8 <netif_add+0x180>)
 80046ac:	4851      	ldr	r0, [pc, #324]	; (80047f4 <netif_add+0x17c>)
 80046ae:	f009 ff6f 	bl	800e590 <iprintf>
 80046b2:	2300      	movs	r3, #0
 80046b4:	e096      	b.n	80047e4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80046bc:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <netif_add+0x184>)
 80046be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80046c6:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <netif_add+0x184>)
 80046c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80046d0:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <netif_add+0x184>)
 80046d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a45      	ldr	r2, [pc, #276]	; (8004800 <netif_add+0x188>)
 80046ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a3a      	ldr	r2, [r7, #32]
 8004704:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <netif_add+0x18c>)
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004714:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f913 	bl	8004948 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	4798      	blx	r3
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <netif_add+0xba>
    return NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	e058      	b.n	80047e4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004738:	2bff      	cmp	r3, #255	; 0xff
 800473a:	d103      	bne.n	8004744 <netif_add+0xcc>
        netif->num = 0;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004748:	4b2f      	ldr	r3, [pc, #188]	; (8004808 <netif_add+0x190>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e02b      	b.n	80047a8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	429a      	cmp	r2, r3
 8004756:	d106      	bne.n	8004766 <netif_add+0xee>
 8004758:	4b24      	ldr	r3, [pc, #144]	; (80047ec <netif_add+0x174>)
 800475a:	f240 128b 	movw	r2, #395	; 0x18b
 800475e:	492b      	ldr	r1, [pc, #172]	; (800480c <netif_add+0x194>)
 8004760:	4824      	ldr	r0, [pc, #144]	; (80047f4 <netif_add+0x17c>)
 8004762:	f009 ff15 	bl	800e590 <iprintf>
        num_netifs++;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3301      	adds	r3, #1
 800476a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2bff      	cmp	r3, #255	; 0xff
 8004770:	dd06      	ble.n	8004780 <netif_add+0x108>
 8004772:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <netif_add+0x174>)
 8004774:	f240 128d 	movw	r2, #397	; 0x18d
 8004778:	4925      	ldr	r1, [pc, #148]	; (8004810 <netif_add+0x198>)
 800477a:	481e      	ldr	r0, [pc, #120]	; (80047f4 <netif_add+0x17c>)
 800477c:	f009 ff08 	bl	800e590 <iprintf>
        if (netif2->num == netif->num) {
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800478c:	429a      	cmp	r2, r3
 800478e:	d108      	bne.n	80047a2 <netif_add+0x12a>
          netif->num++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004796:	3301      	adds	r3, #1
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80047a0:	e005      	b.n	80047ae <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1d0      	bne.n	8004750 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1be      	bne.n	8004732 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047ba:	2bfe      	cmp	r3, #254	; 0xfe
 80047bc:	d103      	bne.n	80047c6 <netif_add+0x14e>
    netif_num = 0;
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <netif_add+0x18c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e006      	b.n	80047d4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047cc:	3301      	adds	r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <netif_add+0x18c>)
 80047d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <netif_add+0x190>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80047dc:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <netif_add+0x190>)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80047e2:	68fb      	ldr	r3, [r7, #12]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	0800fd4c 	.word	0x0800fd4c
 80047f0:	0800fde0 	.word	0x0800fde0
 80047f4:	0800fd9c 	.word	0x0800fd9c
 80047f8:	0800fdfc 	.word	0x0800fdfc
 80047fc:	08012470 	.word	0x08012470
 8004800:	08004b5b 	.word	0x08004b5b
 8004804:	20000050 	.word	0x20000050
 8004808:	20024cf4 	.word	0x20024cf4
 800480c:	0800fe20 	.word	0x0800fe20
 8004810:	0800fe34 	.word	0x0800fe34

08004814 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800481e:	6839      	ldr	r1, [r7, #0]
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f002 fe21 	bl	8007468 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f007 fb5f 	bl	800beec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <netif_do_set_ipaddr+0x20>
 800484a:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <netif_do_set_ipaddr+0x88>)
 800484c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004850:	491c      	ldr	r1, [pc, #112]	; (80048c4 <netif_do_set_ipaddr+0x8c>)
 8004852:	481d      	ldr	r0, [pc, #116]	; (80048c8 <netif_do_set_ipaddr+0x90>)
 8004854:	f009 fe9c 	bl	800e590 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <netif_do_set_ipaddr+0x34>
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <netif_do_set_ipaddr+0x88>)
 8004860:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004864:	4917      	ldr	r1, [pc, #92]	; (80048c4 <netif_do_set_ipaddr+0x8c>)
 8004866:	4818      	ldr	r0, [pc, #96]	; (80048c8 <netif_do_set_ipaddr+0x90>)
 8004868:	f009 fe92 	bl	800e590 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3304      	adds	r3, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d01c      	beq.n	80048b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3304      	adds	r3, #4
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ffbf 	bl	8004814 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <netif_do_set_ipaddr+0x6a>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	e000      	b.n	80048a4 <netif_do_set_ipaddr+0x6c>
 80048a2:	2300      	movs	r3, #0
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80048a8:	2101      	movs	r1, #1
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f8d2 	bl	8004a54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	0800fd4c 	.word	0x0800fd4c
 80048c4:	0800fe64 	.word	0x0800fe64
 80048c8:	0800fd9c 	.word	0x0800fd9c

080048cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3308      	adds	r3, #8
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d00a      	beq.n	80048fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <netif_do_set_netmask+0x26>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	e000      	b.n	80048f4 <netif_do_set_netmask+0x28>
 80048f2:	2300      	movs	r3, #0
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	330c      	adds	r3, #12
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d00a      	beq.n	800493a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <netif_do_set_gw+0x26>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	e000      	b.n	8004932 <netif_do_set_gw+0x28>
 8004930:	2300      	movs	r3, #0
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004964:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <netif_set_addr+0x90>)
 8004966:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <netif_set_addr+0x90>)
 8004970:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <netif_set_addr+0x90>)
 800497a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <netif_set_addr+0x42>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <netif_set_addr+0x46>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <netif_set_addr+0x48>
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d006      	beq.n	80049a6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004998:	f107 0310 	add.w	r3, r7, #16
 800499c:	461a      	mov	r2, r3
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff ff49 	bl	8004838 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff ff8e 	bl	80048cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ffa8 	bl	800490a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	461a      	mov	r2, r3
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7ff ff35 	bl	8004838 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80049ce:	bf00      	nop
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	08012470 	.word	0x08012470

080049dc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <netif_set_default+0x1c>)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20024cf8 	.word	0x20024cf8

080049fc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d107      	bne.n	8004a1a <netif_set_up+0x1e>
 8004a0a:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <netif_set_up+0x4c>)
 8004a0c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004a10:	490e      	ldr	r1, [pc, #56]	; (8004a4c <netif_set_up+0x50>)
 8004a12:	480f      	ldr	r0, [pc, #60]	; (8004a50 <netif_set_up+0x54>)
 8004a14:	f009 fdbc 	bl	800e590 <iprintf>
 8004a18:	e013      	b.n	8004a42 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004a3a:	2103      	movs	r1, #3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f809 	bl	8004a54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	0800fd4c 	.word	0x0800fd4c
 8004a4c:	0800fed4 	.word	0x0800fed4
 8004a50:	0800fd9c 	.word	0x0800fd9c

08004a54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <netif_issue_reports+0x20>
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <netif_issue_reports+0x74>)
 8004a68:	f240 326d 	movw	r2, #877	; 0x36d
 8004a6c:	4917      	ldr	r1, [pc, #92]	; (8004acc <netif_issue_reports+0x78>)
 8004a6e:	4818      	ldr	r0, [pc, #96]	; (8004ad0 <netif_issue_reports+0x7c>)
 8004a70:	f009 fd8e 	bl	800e590 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01e      	beq.n	8004ac0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a88:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d017      	beq.n	8004ac0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d013      	beq.n	8004ac2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00e      	beq.n	8004ac2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f008 f981 	bl	800cdc0 <etharp_request>
 8004abe:	e000      	b.n	8004ac2 <netif_issue_reports+0x6e>
    return;
 8004ac0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0800fd4c 	.word	0x0800fd4c
 8004acc:	0800fef0 	.word	0x0800fef0
 8004ad0:	0800fd9c 	.word	0x0800fd9c

08004ad4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d107      	bne.n	8004af2 <netif_set_down+0x1e>
 8004ae2:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <netif_set_down+0x58>)
 8004ae4:	f240 329b 	movw	r2, #923	; 0x39b
 8004ae8:	4911      	ldr	r1, [pc, #68]	; (8004b30 <netif_set_down+0x5c>)
 8004aea:	4812      	ldr	r0, [pc, #72]	; (8004b34 <netif_set_down+0x60>)
 8004aec:	f009 fd50 	bl	800e590 <iprintf>
 8004af0:	e019      	b.n	8004b26 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f007 fd0b 	bl	800c53c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	0800fd4c 	.word	0x0800fd4c
 8004b30:	0800ff14 	.word	0x0800ff14
 8004b34:	0800fd9c 	.word	0x0800fd9c

08004b38 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	61da      	str	r2, [r3, #28]
  }
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004b66:	f06f 030b 	mvn.w	r3, #11
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <netif_get_by_index+0x48>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e00c      	b.n	8004baa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b96:	3301      	adds	r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	79fa      	ldrb	r2, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d101      	bne.n	8004ba4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e006      	b.n	8004bb2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ef      	bne.n	8004b90 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20024cf4 	.word	0x20024cf4

08004bc4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <pbuf_free_ooseq+0x38>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <pbuf_free_ooseq+0x3c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	e00a      	b.n	8004bee <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f002 fc7f 	bl	80074e4 <tcp_free_ooseq>
      return;
 8004be6:	e005      	b.n	8004bf4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f1      	bne.n	8004bd8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20024cfc 	.word	0x20024cfc
 8004c00:	20024d04 	.word	0x20024d04

08004c04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <pbuf_pool_is_empty+0x14>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20024cfc 	.word	0x20024cfc

08004c1c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4611      	mov	r1, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	80fb      	strh	r3, [r7, #6]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	88fa      	ldrh	r2, [r7, #6]
 8004c42:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88ba      	ldrh	r2, [r7, #4]
 8004c48:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004c4a:	8b3b      	ldrh	r3, [r7, #24]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	7f3a      	ldrb	r2, [r7, #28]
 8004c56:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	81da      	strh	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	741a      	strb	r2, [r3, #16]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08c      	sub	sp, #48	; 0x30
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	80bb      	strh	r3, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004c86:	887b      	ldrh	r3, [r7, #2]
 8004c88:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004c8c:	d07f      	beq.n	8004d8e <pbuf_alloc+0x11e>
 8004c8e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004c92:	f300 80c7 	bgt.w	8004e24 <pbuf_alloc+0x1b4>
 8004c96:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004c9a:	d010      	beq.n	8004cbe <pbuf_alloc+0x4e>
 8004c9c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004ca0:	f300 80c0 	bgt.w	8004e24 <pbuf_alloc+0x1b4>
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d002      	beq.n	8004cae <pbuf_alloc+0x3e>
 8004ca8:	2b41      	cmp	r3, #65	; 0x41
 8004caa:	f040 80bb 	bne.w	8004e24 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	88bb      	ldrh	r3, [r7, #4]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f000 f8d1 	bl	8004e5c <pbuf_alloc_reference>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004cbc:	e0bc      	b.n	8004e38 <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004cc6:	88bb      	ldrh	r3, [r7, #4]
 8004cc8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004cca:	2008      	movs	r0, #8
 8004ccc:	f7ff fc56 	bl	800457c <memp_malloc>
 8004cd0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004cd8:	f7ff ff94 	bl	8004c04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ce4:	f000 faa6 	bl	8005234 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e0a6      	b.n	8004e3a <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004cee:	3303      	adds	r3, #3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f023 0303 	bic.w	r3, r3, #3
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8b7a      	ldrh	r2, [r7, #26]
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bf28      	it	cs
 8004d04:	4613      	movcs	r3, r2
 8004d06:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	3303      	adds	r3, #3
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	4618      	mov	r0, r3
 8004d18:	89f9      	ldrh	r1, [r7, #14]
 8004d1a:	8b7a      	ldrh	r2, [r7, #26]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	460b      	mov	r3, r1
 8004d26:	4601      	mov	r1, r0
 8004d28:	6938      	ldr	r0, [r7, #16]
 8004d2a:	f7ff ff77 	bl	8004c1c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <pbuf_alloc+0xd8>
 8004d3a:	4b42      	ldr	r3, [pc, #264]	; (8004e44 <pbuf_alloc+0x1d4>)
 8004d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d40:	4941      	ldr	r1, [pc, #260]	; (8004e48 <pbuf_alloc+0x1d8>)
 8004d42:	4842      	ldr	r0, [pc, #264]	; (8004e4c <pbuf_alloc+0x1dc>)
 8004d44:	f009 fc24 	bl	800e590 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004d48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d4a:	3303      	adds	r3, #3
 8004d4c:	f023 0303 	bic.w	r3, r3, #3
 8004d50:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004d54:	d106      	bne.n	8004d64 <pbuf_alloc+0xf4>
 8004d56:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <pbuf_alloc+0x1d4>)
 8004d58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004d5c:	493c      	ldr	r1, [pc, #240]	; (8004e50 <pbuf_alloc+0x1e0>)
 8004d5e:	483b      	ldr	r0, [pc, #236]	; (8004e4c <pbuf_alloc+0x1dc>)
 8004d60:	f009 fc16 	bl	800e590 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	e002      	b.n	8004d76 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004d7a:	8b7a      	ldrh	r2, [r7, #26]
 8004d7c:	89fb      	ldrh	r3, [r7, #14]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004d86:	8b7b      	ldrh	r3, [r7, #26]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d19e      	bne.n	8004cca <pbuf_alloc+0x5a>
      break;
 8004d8c:	e054      	b.n	8004e38 <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004d8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d90:	3303      	adds	r3, #3
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f023 0303 	bic.w	r3, r3, #3
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	88bb      	ldrh	r3, [r7, #4]
 8004d9c:	3303      	adds	r3, #3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f023 0303 	bic.w	r3, r3, #3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004daa:	8b3b      	ldrh	r3, [r7, #24]
 8004dac:	3314      	adds	r3, #20
 8004dae:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004db0:	8b3a      	ldrh	r2, [r7, #24]
 8004db2:	88bb      	ldrh	r3, [r7, #4]
 8004db4:	3303      	adds	r3, #3
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d306      	bcc.n	8004dcc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004dbe:	88bb      	ldrh	r3, [r7, #4]
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d201      	bcs.n	8004dd0 <pbuf_alloc+0x160>
        return NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e034      	b.n	8004e3a <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004dd0:	6978      	ldr	r0, [r7, #20]
 8004dd2:	f7ff fa6f 	bl	80042b4 <mem_malloc>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <pbuf_alloc+0x172>
        return NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e02b      	b.n	8004e3a <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004de2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004de4:	3314      	adds	r3, #20
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	4413      	add	r3, r2
 8004dea:	3303      	adds	r3, #3
 8004dec:	f023 0303 	bic.w	r3, r3, #3
 8004df0:	4618      	mov	r0, r3
 8004df2:	88b9      	ldrh	r1, [r7, #4]
 8004df4:	88ba      	ldrh	r2, [r7, #4]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	887b      	ldrh	r3, [r7, #2]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4601      	mov	r1, r0
 8004e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e04:	f7ff ff0a 	bl	8004c1c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <pbuf_alloc+0x1c6>
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <pbuf_alloc+0x1d4>)
 8004e16:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004e1a:	490e      	ldr	r1, [pc, #56]	; (8004e54 <pbuf_alloc+0x1e4>)
 8004e1c:	480b      	ldr	r0, [pc, #44]	; (8004e4c <pbuf_alloc+0x1dc>)
 8004e1e:	f009 fbb7 	bl	800e590 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004e22:	e008      	b.n	8004e36 <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <pbuf_alloc+0x1d4>)
 8004e26:	f240 1227 	movw	r2, #295	; 0x127
 8004e2a:	490b      	ldr	r1, [pc, #44]	; (8004e58 <pbuf_alloc+0x1e8>)
 8004e2c:	4807      	ldr	r0, [pc, #28]	; (8004e4c <pbuf_alloc+0x1dc>)
 8004e2e:	f009 fbaf 	bl	800e590 <iprintf>
      return NULL;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e001      	b.n	8004e3a <pbuf_alloc+0x1ca>
      break;
 8004e36:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	0800ff7c 	.word	0x0800ff7c
 8004e48:	0800ffac 	.word	0x0800ffac
 8004e4c:	0800ffdc 	.word	0x0800ffdc
 8004e50:	08010004 	.word	0x08010004
 8004e54:	08010038 	.word	0x08010038
 8004e58:	08010064 	.word	0x08010064

08004e5c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004e6c:	883b      	ldrh	r3, [r7, #0]
 8004e6e:	2b41      	cmp	r3, #65	; 0x41
 8004e70:	d009      	beq.n	8004e86 <pbuf_alloc_reference+0x2a>
 8004e72:	883b      	ldrh	r3, [r7, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d006      	beq.n	8004e86 <pbuf_alloc_reference+0x2a>
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <pbuf_alloc_reference+0x5c>)
 8004e7a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004e7e:	490f      	ldr	r1, [pc, #60]	; (8004ebc <pbuf_alloc_reference+0x60>)
 8004e80:	480f      	ldr	r0, [pc, #60]	; (8004ec0 <pbuf_alloc_reference+0x64>)
 8004e82:	f009 fb85 	bl	800e590 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004e86:	2007      	movs	r0, #7
 8004e88:	f7ff fb78 	bl	800457c <memp_malloc>
 8004e8c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e00b      	b.n	8004eb0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004e98:	8879      	ldrh	r1, [r7, #2]
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	883b      	ldrh	r3, [r7, #0]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff feb7 	bl	8004c1c <pbuf_init_alloced_pbuf>
  return p;
 8004eae:	68fb      	ldr	r3, [r7, #12]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	0800ff7c 	.word	0x0800ff7c
 8004ebc:	08010080 	.word	0x08010080
 8004ec0:	0800ffdc 	.word	0x0800ffdc

08004ec4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	81bb      	strh	r3, [r7, #12]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004edc:	8a7b      	ldrh	r3, [r7, #18]
 8004ede:	3303      	adds	r3, #3
 8004ee0:	f023 0203 	bic.w	r2, r3, #3
 8004ee4:	89bb      	ldrh	r3, [r7, #12]
 8004ee6:	441a      	add	r2, r3
 8004ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d901      	bls.n	8004ef2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e018      	b.n	8004f24 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004ef8:	8a7b      	ldrh	r3, [r7, #18]
 8004efa:	3303      	adds	r3, #3
 8004efc:	f023 0303 	bic.w	r3, r3, #3
 8004f00:	6a3a      	ldr	r2, [r7, #32]
 8004f02:	4413      	add	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e001      	b.n	8004f0c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	89b9      	ldrh	r1, [r7, #12]
 8004f10:	89ba      	ldrh	r2, [r7, #12]
 8004f12:	2302      	movs	r3, #2
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	6979      	ldr	r1, [r7, #20]
 8004f1e:	f7ff fe7d 	bl	8004c1c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004f22:	687b      	ldr	r3, [r7, #4]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <pbuf_realloc+0x20>
 8004f3e:	4b39      	ldr	r3, [pc, #228]	; (8005024 <pbuf_realloc+0xf8>)
 8004f40:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004f44:	4938      	ldr	r1, [pc, #224]	; (8005028 <pbuf_realloc+0xfc>)
 8004f46:	4839      	ldr	r0, [pc, #228]	; (800502c <pbuf_realloc+0x100>)
 8004f48:	f009 fb22 	bl	800e590 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	891b      	ldrh	r3, [r3, #8]
 8004f50:	887a      	ldrh	r2, [r7, #2]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d261      	bcs.n	800501a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	891a      	ldrh	r2, [r3, #8]
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004f60:	887b      	ldrh	r3, [r7, #2]
 8004f62:	817b      	strh	r3, [r7, #10]
  q = p;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004f68:	e018      	b.n	8004f9c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	895b      	ldrh	r3, [r3, #10]
 8004f6e:	897a      	ldrh	r2, [r7, #10]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	891a      	ldrh	r2, [r3, #8]
 8004f78:	893b      	ldrh	r3, [r7, #8]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <pbuf_realloc+0x70>
 8004f8e:	4b25      	ldr	r3, [pc, #148]	; (8005024 <pbuf_realloc+0xf8>)
 8004f90:	f240 12af 	movw	r2, #431	; 0x1af
 8004f94:	4926      	ldr	r1, [pc, #152]	; (8005030 <pbuf_realloc+0x104>)
 8004f96:	4825      	ldr	r0, [pc, #148]	; (800502c <pbuf_realloc+0x100>)
 8004f98:	f009 fafa 	bl	800e590 <iprintf>
  while (rem_len > q->len) {
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	895b      	ldrh	r3, [r3, #10]
 8004fa0:	897a      	ldrh	r2, [r7, #10]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d8e1      	bhi.n	8004f6a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7b1b      	ldrb	r3, [r3, #12]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11f      	bne.n	8004ff2 <pbuf_realloc+0xc6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	895b      	ldrh	r3, [r3, #10]
 8004fb6:	897a      	ldrh	r2, [r7, #10]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d01a      	beq.n	8004ff2 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	7b5b      	ldrb	r3, [r3, #13]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d114      	bne.n	8004ff2 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	897b      	ldrh	r3, [r7, #10]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff f87a 	bl	80040d0 <mem_trim>
 8004fdc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <pbuf_realloc+0xc6>
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <pbuf_realloc+0xf8>)
 8004fe6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004fea:	4912      	ldr	r1, [pc, #72]	; (8005034 <pbuf_realloc+0x108>)
 8004fec:	480f      	ldr	r0, [pc, #60]	; (800502c <pbuf_realloc+0x100>)
 8004fee:	f009 facf 	bl	800e590 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	897a      	ldrh	r2, [r7, #10]
 8004ff6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	895a      	ldrh	r2, [r3, #10]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f911 	bl	8005234 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e000      	b.n	800501c <pbuf_realloc+0xf0>
    return;
 800501a:	bf00      	nop

}
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	0800ff7c 	.word	0x0800ff7c
 8005028:	08010094 	.word	0x08010094
 800502c:	0800ffdc 	.word	0x0800ffdc
 8005030:	080100ac 	.word	0x080100ac
 8005034:	080100c4 	.word	0x080100c4

08005038 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <pbuf_add_header_impl+0x22>
 800504c:	4b2b      	ldr	r3, [pc, #172]	; (80050fc <pbuf_add_header_impl+0xc4>)
 800504e:	f240 12df 	movw	r2, #479	; 0x1df
 8005052:	492b      	ldr	r1, [pc, #172]	; (8005100 <pbuf_add_header_impl+0xc8>)
 8005054:	482b      	ldr	r0, [pc, #172]	; (8005104 <pbuf_add_header_impl+0xcc>)
 8005056:	f009 fa9b 	bl	800e590 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <pbuf_add_header_impl+0x30>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005066:	d301      	bcc.n	800506c <pbuf_add_header_impl+0x34>
    return 1;
 8005068:	2301      	movs	r3, #1
 800506a:	e043      	b.n	80050f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <pbuf_add_header_impl+0x3e>
    return 0;
 8005072:	2300      	movs	r3, #0
 8005074:	e03e      	b.n	80050f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	891a      	ldrh	r2, [r3, #8]
 800507e:	8a7b      	ldrh	r3, [r7, #18]
 8005080:	4413      	add	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	8a7a      	ldrh	r2, [r7, #18]
 8005086:	429a      	cmp	r2, r3
 8005088:	d901      	bls.n	800508e <pbuf_add_header_impl+0x56>
    return 1;
 800508a:	2301      	movs	r3, #1
 800508c:	e032      	b.n	80050f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	7b1b      	ldrb	r3, [r3, #12]
 8005092:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005094:	8a3b      	ldrh	r3, [r7, #16]
 8005096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	425b      	negs	r3, r3
 80050a6:	4413      	add	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3314      	adds	r3, #20
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d20d      	bcs.n	80050d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e01d      	b.n	80050f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	425b      	negs	r3, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	e001      	b.n	80050d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e011      	b.n	80050f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	895a      	ldrh	r2, [r3, #10]
 80050da:	8a7b      	ldrh	r3, [r7, #18]
 80050dc:	4413      	add	r3, r2
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	891a      	ldrh	r2, [r3, #8]
 80050e8:	8a7b      	ldrh	r3, [r7, #18]
 80050ea:	4413      	add	r3, r2
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	811a      	strh	r2, [r3, #8]


  return 0;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800ff7c 	.word	0x0800ff7c
 8005100:	080100e0 	.word	0x080100e0
 8005104:	0800ffdc 	.word	0x0800ffdc

08005108 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005112:	2200      	movs	r2, #0
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff ff8e 	bl	8005038 <pbuf_add_header_impl>
 800511c:	4603      	mov	r3, r0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <pbuf_remove_header+0x1e>
 8005138:	4b20      	ldr	r3, [pc, #128]	; (80051bc <pbuf_remove_header+0x94>)
 800513a:	f240 224b 	movw	r2, #587	; 0x24b
 800513e:	4920      	ldr	r1, [pc, #128]	; (80051c0 <pbuf_remove_header+0x98>)
 8005140:	4820      	ldr	r0, [pc, #128]	; (80051c4 <pbuf_remove_header+0x9c>)
 8005142:	f009 fa25 	bl	800e590 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <pbuf_remove_header+0x2c>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005152:	d301      	bcc.n	8005158 <pbuf_remove_header+0x30>
    return 1;
 8005154:	2301      	movs	r3, #1
 8005156:	e02c      	b.n	80051b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <pbuf_remove_header+0x3a>
    return 0;
 800515e:	2300      	movs	r3, #0
 8005160:	e027      	b.n	80051b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	895b      	ldrh	r3, [r3, #10]
 800516a:	89fa      	ldrh	r2, [r7, #14]
 800516c:	429a      	cmp	r2, r3
 800516e:	d908      	bls.n	8005182 <pbuf_remove_header+0x5a>
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <pbuf_remove_header+0x94>)
 8005172:	f240 2255 	movw	r2, #597	; 0x255
 8005176:	4914      	ldr	r1, [pc, #80]	; (80051c8 <pbuf_remove_header+0xa0>)
 8005178:	4812      	ldr	r0, [pc, #72]	; (80051c4 <pbuf_remove_header+0x9c>)
 800517a:	f009 fa09 	bl	800e590 <iprintf>
 800517e:	2301      	movs	r3, #1
 8005180:	e017      	b.n	80051b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	895a      	ldrh	r2, [r3, #10]
 8005198:	89fb      	ldrh	r3, [r7, #14]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	891a      	ldrh	r2, [r3, #8]
 80051a6:	89fb      	ldrh	r3, [r7, #14]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	0800ff7c 	.word	0x0800ff7c
 80051c0:	080100e0 	.word	0x080100e0
 80051c4:	0800ffdc 	.word	0x0800ffdc
 80051c8:	080100ec 	.word	0x080100ec

080051cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
 80051d8:	4613      	mov	r3, r2
 80051da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80051dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da08      	bge.n	80051f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80051e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051e8:	425b      	negs	r3, r3
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ff9b 	bl	8005128 <pbuf_remove_header>
 80051f2:	4603      	mov	r3, r0
 80051f4:	e007      	b.n	8005206 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80051f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80051fa:	787a      	ldrb	r2, [r7, #1]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff ff1a 	bl	8005038 <pbuf_add_header_impl>
 8005204:	4603      	mov	r3, r0
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800521a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800521e:	2201      	movs	r2, #1
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ffd2 	bl	80051cc <pbuf_header_impl>
 8005228:	4603      	mov	r3, r0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <pbuf_free+0x22>
 8005248:	4b38      	ldr	r3, [pc, #224]	; (800532c <pbuf_free+0xf8>)
 800524a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800524e:	4938      	ldr	r1, [pc, #224]	; (8005330 <pbuf_free+0xfc>)
 8005250:	4838      	ldr	r0, [pc, #224]	; (8005334 <pbuf_free+0x100>)
 8005252:	f009 f99d 	bl	800e590 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005256:	2300      	movs	r3, #0
 8005258:	e063      	b.n	8005322 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800525e:	e05c      	b.n	800531a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	89db      	ldrh	r3, [r3, #14]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <pbuf_free+0x42>
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <pbuf_free+0xf8>)
 800526a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800526e:	4932      	ldr	r1, [pc, #200]	; (8005338 <pbuf_free+0x104>)
 8005270:	4830      	ldr	r0, [pc, #192]	; (8005334 <pbuf_free+0x100>)
 8005272:	f009 f98d 	bl	800e590 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	89db      	ldrh	r3, [r3, #14]
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	81da      	strh	r2, [r3, #14]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	89db      	ldrh	r3, [r3, #14]
 8005286:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005288:	8abb      	ldrh	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d143      	bne.n	8005316 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7b1b      	ldrb	r3, [r3, #12]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7b5b      	ldrb	r3, [r3, #13]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d011      	beq.n	80052ce <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <pbuf_free+0x90>
 80052b6:	4b1d      	ldr	r3, [pc, #116]	; (800532c <pbuf_free+0xf8>)
 80052b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80052bc:	491f      	ldr	r1, [pc, #124]	; (800533c <pbuf_free+0x108>)
 80052be:	481d      	ldr	r0, [pc, #116]	; (8005334 <pbuf_free+0x100>)
 80052c0:	f009 f966 	bl	800e590 <iprintf>
        pc->custom_free_function(p);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	e01d      	b.n	800530a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d104      	bne.n	80052de <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	2008      	movs	r0, #8
 80052d8:	f7ff f99c 	bl	8004614 <memp_free>
 80052dc:	e015      	b.n	800530a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d104      	bne.n	80052ee <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	2007      	movs	r0, #7
 80052e8:	f7ff f994 	bl	8004614 <memp_free>
 80052ec:	e00d      	b.n	800530a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <pbuf_free+0xc8>
          mem_free(p);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fe fe81 	bl	8003ffc <mem_free>
 80052fa:	e006      	b.n	800530a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <pbuf_free+0xf8>)
 80052fe:	f240 320f 	movw	r2, #783	; 0x30f
 8005302:	490f      	ldr	r1, [pc, #60]	; (8005340 <pbuf_free+0x10c>)
 8005304:	480b      	ldr	r0, [pc, #44]	; (8005334 <pbuf_free+0x100>)
 8005306:	f009 f943 	bl	800e590 <iprintf>
        }
      }
      count++;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	3301      	adds	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	e001      	b.n	800531a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d19f      	bne.n	8005260 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	0800ff7c 	.word	0x0800ff7c
 8005330:	080100e0 	.word	0x080100e0
 8005334:	0800ffdc 	.word	0x0800ffdc
 8005338:	0801010c 	.word	0x0801010c
 800533c:	08010124 	.word	0x08010124
 8005340:	08010148 	.word	0x08010148

08005344 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005350:	e005      	b.n	800535e <pbuf_clen+0x1a>
    ++len;
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	3301      	adds	r3, #1
 8005356:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f6      	bne.n	8005352 <pbuf_clen+0xe>
  }
  return len;
 8005364:	89fb      	ldrh	r3, [r7, #14]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d010      	beq.n	80053a4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	89db      	ldrh	r3, [r3, #14]
 8005386:	3301      	adds	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	89db      	ldrh	r3, [r3, #14]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <pbuf_ref+0x30>
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <pbuf_ref+0x38>)
 8005398:	f240 3242 	movw	r2, #834	; 0x342
 800539c:	4904      	ldr	r1, [pc, #16]	; (80053b0 <pbuf_ref+0x3c>)
 800539e:	4805      	ldr	r0, [pc, #20]	; (80053b4 <pbuf_ref+0x40>)
 80053a0:	f009 f8f6 	bl	800e590 <iprintf>
  }
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	0800ff7c 	.word	0x0800ff7c
 80053b0:	0801015c 	.word	0x0801015c
 80053b4:	0800ffdc 	.word	0x0800ffdc

080053b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <pbuf_cat+0x16>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <pbuf_cat+0x26>
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <pbuf_cat+0x98>)
 80053d0:	f240 3259 	movw	r2, #857	; 0x359
 80053d4:	491f      	ldr	r1, [pc, #124]	; (8005454 <pbuf_cat+0x9c>)
 80053d6:	4820      	ldr	r0, [pc, #128]	; (8005458 <pbuf_cat+0xa0>)
 80053d8:	f009 f8da 	bl	800e590 <iprintf>
 80053dc:	e034      	b.n	8005448 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e00a      	b.n	80053fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	891a      	ldrh	r2, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	891b      	ldrh	r3, [r3, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	891a      	ldrh	r2, [r3, #8]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	895b      	ldrh	r3, [r3, #10]
 800540a:	429a      	cmp	r2, r3
 800540c:	d006      	beq.n	800541c <pbuf_cat+0x64>
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <pbuf_cat+0x98>)
 8005410:	f240 3262 	movw	r2, #866	; 0x362
 8005414:	4911      	ldr	r1, [pc, #68]	; (800545c <pbuf_cat+0xa4>)
 8005416:	4810      	ldr	r0, [pc, #64]	; (8005458 <pbuf_cat+0xa0>)
 8005418:	f009 f8ba 	bl	800e590 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <pbuf_cat+0x7a>
 8005424:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <pbuf_cat+0x98>)
 8005426:	f240 3263 	movw	r2, #867	; 0x363
 800542a:	490d      	ldr	r1, [pc, #52]	; (8005460 <pbuf_cat+0xa8>)
 800542c:	480a      	ldr	r0, [pc, #40]	; (8005458 <pbuf_cat+0xa0>)
 800542e:	f009 f8af 	bl	800e590 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	891a      	ldrh	r2, [r3, #8]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	891b      	ldrh	r3, [r3, #8]
 800543a:	4413      	add	r3, r2
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	0800ff7c 	.word	0x0800ff7c
 8005454:	08010170 	.word	0x08010170
 8005458:	0800ffdc 	.word	0x0800ffdc
 800545c:	080101a8 	.word	0x080101a8
 8005460:	080101d8 	.word	0x080101d8

08005464 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ffa1 	bl	80053b8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005476:	6838      	ldr	r0, [r7, #0]
 8005478:	f7ff ff7c 	bl	8005374 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <pbuf_copy+0x2a>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <pbuf_copy+0x2a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	891a      	ldrh	r2, [r3, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	891b      	ldrh	r3, [r3, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d209      	bcs.n	80054c2 <pbuf_copy+0x3e>
 80054ae:	4b57      	ldr	r3, [pc, #348]	; (800560c <pbuf_copy+0x188>)
 80054b0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80054b4:	4956      	ldr	r1, [pc, #344]	; (8005610 <pbuf_copy+0x18c>)
 80054b6:	4857      	ldr	r0, [pc, #348]	; (8005614 <pbuf_copy+0x190>)
 80054b8:	f009 f86a 	bl	800e590 <iprintf>
 80054bc:	f06f 030f 	mvn.w	r3, #15
 80054c0:	e09f      	b.n	8005602 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	895b      	ldrh	r3, [r3, #10]
 80054c6:	461a      	mov	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	895b      	ldrh	r3, [r3, #10]
 80054d0:	4619      	mov	r1, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1acb      	subs	r3, r1, r3
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d306      	bcc.n	80054e8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	895b      	ldrh	r3, [r3, #10]
 80054de:	461a      	mov	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e005      	b.n	80054f4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	895b      	ldrh	r3, [r3, #10]
 80054ec:	461a      	mov	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	18d0      	adds	r0, r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4413      	add	r3, r2
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4619      	mov	r1, r3
 8005508:	f009 f812 	bl	800e530 <memcpy>
    offset_to += len;
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4413      	add	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	895b      	ldrh	r3, [r3, #10]
 8005520:	461a      	mov	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4293      	cmp	r3, r2
 8005526:	d906      	bls.n	8005536 <pbuf_copy+0xb2>
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <pbuf_copy+0x188>)
 800552a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800552e:	493a      	ldr	r1, [pc, #232]	; (8005618 <pbuf_copy+0x194>)
 8005530:	4838      	ldr	r0, [pc, #224]	; (8005614 <pbuf_copy+0x190>)
 8005532:	f009 f82d 	bl	800e590 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	895b      	ldrh	r3, [r3, #10]
 800553a:	461a      	mov	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4293      	cmp	r3, r2
 8005540:	d906      	bls.n	8005550 <pbuf_copy+0xcc>
 8005542:	4b32      	ldr	r3, [pc, #200]	; (800560c <pbuf_copy+0x188>)
 8005544:	f240 32da 	movw	r2, #986	; 0x3da
 8005548:	4934      	ldr	r1, [pc, #208]	; (800561c <pbuf_copy+0x198>)
 800554a:	4832      	ldr	r0, [pc, #200]	; (8005614 <pbuf_copy+0x190>)
 800554c:	f009 f820 	bl	800e590 <iprintf>
    if (offset_from >= p_from->len) {
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	895b      	ldrh	r3, [r3, #10]
 8005554:	461a      	mov	r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4293      	cmp	r3, r2
 800555a:	d304      	bcc.n	8005566 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	895b      	ldrh	r3, [r3, #10]
 800556a:	461a      	mov	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4293      	cmp	r3, r2
 8005570:	d114      	bne.n	800559c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10c      	bne.n	800559c <pbuf_copy+0x118>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <pbuf_copy+0x118>
 8005588:	4b20      	ldr	r3, [pc, #128]	; (800560c <pbuf_copy+0x188>)
 800558a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800558e:	4924      	ldr	r1, [pc, #144]	; (8005620 <pbuf_copy+0x19c>)
 8005590:	4820      	ldr	r0, [pc, #128]	; (8005614 <pbuf_copy+0x190>)
 8005592:	f008 fffd 	bl	800e590 <iprintf>
 8005596:	f06f 030f 	mvn.w	r3, #15
 800559a:	e032      	b.n	8005602 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d013      	beq.n	80055ca <pbuf_copy+0x146>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	895a      	ldrh	r2, [r3, #10]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	891b      	ldrh	r3, [r3, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d10d      	bne.n	80055ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <pbuf_copy+0x146>
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <pbuf_copy+0x188>)
 80055b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80055bc:	4919      	ldr	r1, [pc, #100]	; (8005624 <pbuf_copy+0x1a0>)
 80055be:	4815      	ldr	r0, [pc, #84]	; (8005614 <pbuf_copy+0x190>)
 80055c0:	f008 ffe6 	bl	800e590 <iprintf>
 80055c4:	f06f 0305 	mvn.w	r3, #5
 80055c8:	e01b      	b.n	8005602 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <pbuf_copy+0x174>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	895a      	ldrh	r2, [r3, #10]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	891b      	ldrh	r3, [r3, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d10d      	bne.n	80055f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d009      	beq.n	80055f8 <pbuf_copy+0x174>
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <pbuf_copy+0x188>)
 80055e6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80055ea:	490e      	ldr	r1, [pc, #56]	; (8005624 <pbuf_copy+0x1a0>)
 80055ec:	4809      	ldr	r0, [pc, #36]	; (8005614 <pbuf_copy+0x190>)
 80055ee:	f008 ffcf 	bl	800e590 <iprintf>
 80055f2:	f06f 0305 	mvn.w	r3, #5
 80055f6:	e004      	b.n	8005602 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f47f af61 	bne.w	80054c2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	0800ff7c 	.word	0x0800ff7c
 8005610:	08010224 	.word	0x08010224
 8005614:	0800ffdc 	.word	0x0800ffdc
 8005618:	08010254 	.word	0x08010254
 800561c:	0801026c 	.word	0x0801026c
 8005620:	08010288 	.word	0x08010288
 8005624:	08010298 	.word	0x08010298

08005628 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	460b      	mov	r3, r1
 8005638:	80fb      	strh	r3, [r7, #6]
 800563a:	4613      	mov	r3, r2
 800563c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d108      	bne.n	800565e <pbuf_copy_partial+0x36>
 800564c:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <pbuf_copy_partial+0xd4>)
 800564e:	f240 420a 	movw	r2, #1034	; 0x40a
 8005652:	492b      	ldr	r1, [pc, #172]	; (8005700 <pbuf_copy_partial+0xd8>)
 8005654:	482b      	ldr	r0, [pc, #172]	; (8005704 <pbuf_copy_partial+0xdc>)
 8005656:	f008 ff9b 	bl	800e590 <iprintf>
 800565a:	2300      	movs	r3, #0
 800565c:	e04a      	b.n	80056f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <pbuf_copy_partial+0x4e>
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <pbuf_copy_partial+0xd4>)
 8005666:	f240 420b 	movw	r2, #1035	; 0x40b
 800566a:	4927      	ldr	r1, [pc, #156]	; (8005708 <pbuf_copy_partial+0xe0>)
 800566c:	4825      	ldr	r0, [pc, #148]	; (8005704 <pbuf_copy_partial+0xdc>)
 800566e:	f008 ff8f 	bl	800e590 <iprintf>
 8005672:	2300      	movs	r3, #0
 8005674:	e03e      	b.n	80056f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	e034      	b.n	80056e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800567c:	88bb      	ldrh	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <pbuf_copy_partial+0x70>
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	895b      	ldrh	r3, [r3, #10]
 8005686:	88ba      	ldrh	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d305      	bcc.n	8005698 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	895b      	ldrh	r3, [r3, #10]
 8005690:	88ba      	ldrh	r2, [r7, #4]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	80bb      	strh	r3, [r7, #4]
 8005696:	e023      	b.n	80056e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	895a      	ldrh	r2, [r3, #10]
 800569c:	88bb      	ldrh	r3, [r7, #4]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80056a2:	8b3a      	ldrh	r2, [r7, #24]
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d901      	bls.n	80056ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80056ae:	8b7b      	ldrh	r3, [r7, #26]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	18d0      	adds	r0, r2, r3
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	8b3a      	ldrh	r2, [r7, #24]
 80056be:	4619      	mov	r1, r3
 80056c0:	f008 ff36 	bl	800e530 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80056c4:	8afa      	ldrh	r2, [r7, #22]
 80056c6:	8b3b      	ldrh	r3, [r7, #24]
 80056c8:	4413      	add	r3, r2
 80056ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80056cc:	8b7a      	ldrh	r2, [r7, #26]
 80056ce:	8b3b      	ldrh	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	8b3b      	ldrh	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <pbuf_copy_partial+0xca>
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1c4      	bne.n	800567c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80056f2:	8afb      	ldrh	r3, [r7, #22]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	0800ff7c 	.word	0x0800ff7c
 8005700:	080102c4 	.word	0x080102c4
 8005704:	0800ffdc 	.word	0x0800ffdc
 8005708:	080102e4 	.word	0x080102e4

0800570c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <pbuf_take+0x30>
 8005728:	4b3a      	ldr	r3, [pc, #232]	; (8005814 <pbuf_take+0x108>)
 800572a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800572e:	493a      	ldr	r1, [pc, #232]	; (8005818 <pbuf_take+0x10c>)
 8005730:	483a      	ldr	r0, [pc, #232]	; (800581c <pbuf_take+0x110>)
 8005732:	f008 ff2d 	bl	800e590 <iprintf>
 8005736:	f06f 030f 	mvn.w	r3, #15
 800573a:	e067      	b.n	800580c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <pbuf_take+0x4a>
 8005742:	4b34      	ldr	r3, [pc, #208]	; (8005814 <pbuf_take+0x108>)
 8005744:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005748:	4935      	ldr	r1, [pc, #212]	; (8005820 <pbuf_take+0x114>)
 800574a:	4834      	ldr	r0, [pc, #208]	; (800581c <pbuf_take+0x110>)
 800574c:	f008 ff20 	bl	800e590 <iprintf>
 8005750:	f06f 030f 	mvn.w	r3, #15
 8005754:	e05a      	b.n	800580c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	891b      	ldrh	r3, [r3, #8]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	429a      	cmp	r2, r3
 800575e:	d909      	bls.n	8005774 <pbuf_take+0x68>
 8005760:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <pbuf_take+0x108>)
 8005762:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005766:	492f      	ldr	r1, [pc, #188]	; (8005824 <pbuf_take+0x118>)
 8005768:	482c      	ldr	r0, [pc, #176]	; (800581c <pbuf_take+0x110>)
 800576a:	f008 ff11 	bl	800e590 <iprintf>
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	e04b      	b.n	800580c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <pbuf_take+0x7e>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <pbuf_take+0x7e>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	891b      	ldrh	r3, [r3, #8]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	429a      	cmp	r2, r3
 8005788:	d902      	bls.n	8005790 <pbuf_take+0x84>
    return ERR_ARG;
 800578a:	f06f 030f 	mvn.w	r3, #15
 800578e:	e03d      	b.n	800580c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	61fb      	str	r3, [r7, #28]
 8005794:	e028      	b.n	80057e8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <pbuf_take+0x9e>
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <pbuf_take+0x108>)
 800579e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80057a2:	4921      	ldr	r1, [pc, #132]	; (8005828 <pbuf_take+0x11c>)
 80057a4:	481d      	ldr	r0, [pc, #116]	; (800581c <pbuf_take+0x110>)
 80057a6:	f008 fef3 	bl	800e590 <iprintf>
    buf_copy_len = total_copy_len;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	895b      	ldrh	r3, [r3, #10]
 80057b2:	461a      	mov	r2, r3
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d902      	bls.n	80057c0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	895b      	ldrh	r3, [r3, #10]
 80057be:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	6858      	ldr	r0, [r3, #4]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4619      	mov	r1, r3
 80057ce:	f008 feaf 	bl	800e530 <memcpy>
    total_copy_len -= buf_copy_len;
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	4413      	add	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1d3      	bne.n	8005796 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d103      	bne.n	80057fc <pbuf_take+0xf0>
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d006      	beq.n	800580a <pbuf_take+0xfe>
 80057fc:	4b05      	ldr	r3, [pc, #20]	; (8005814 <pbuf_take+0x108>)
 80057fe:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005802:	490a      	ldr	r1, [pc, #40]	; (800582c <pbuf_take+0x120>)
 8005804:	4805      	ldr	r0, [pc, #20]	; (800581c <pbuf_take+0x110>)
 8005806:	f008 fec3 	bl	800e590 <iprintf>
  return ERR_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	0800ff7c 	.word	0x0800ff7c
 8005818:	08010354 	.word	0x08010354
 800581c:	0800ffdc 	.word	0x0800ffdc
 8005820:	0801036c 	.word	0x0801036c
 8005824:	08010388 	.word	0x08010388
 8005828:	080103a8 	.word	0x080103a8
 800582c:	080103c0 	.word	0x080103c0

08005830 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	603a      	str	r2, [r7, #0]
 800583a:	71fb      	strb	r3, [r7, #7]
 800583c:	460b      	mov	r3, r1
 800583e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	8919      	ldrh	r1, [r3, #8]
 8005844:	88ba      	ldrh	r2, [r7, #4]
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fa11 	bl	8004c70 <pbuf_alloc>
 800584e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <pbuf_clone+0x2a>
    return NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	e011      	b.n	800587e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fe11 	bl	8005484 <pbuf_copy>
 8005862:	4603      	mov	r3, r0
 8005864:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005866:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <pbuf_clone+0x4c>
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <pbuf_clone+0x58>)
 8005870:	f240 5224 	movw	r2, #1316	; 0x524
 8005874:	4905      	ldr	r1, [pc, #20]	; (800588c <pbuf_clone+0x5c>)
 8005876:	4806      	ldr	r0, [pc, #24]	; (8005890 <pbuf_clone+0x60>)
 8005878:	f008 fe8a 	bl	800e590 <iprintf>
  return q;
 800587c:	68fb      	ldr	r3, [r7, #12]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	0800ff7c 	.word	0x0800ff7c
 800588c:	080103f0 	.word	0x080103f0
 8005890:	0800ffdc 	.word	0x0800ffdc

08005894 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005898:	f008 fe92 	bl	800e5c0 <rand>
 800589c:	4603      	mov	r3, r0
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	4b01      	ldr	r3, [pc, #4]	; (80058b4 <tcp_init+0x20>)
 80058ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	1000000a 	.word	0x1000000a

080058b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7d1b      	ldrb	r3, [r3, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <tcp_free+0x1c>
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <tcp_free+0x2c>)
 80058ca:	22d4      	movs	r2, #212	; 0xd4
 80058cc:	4906      	ldr	r1, [pc, #24]	; (80058e8 <tcp_free+0x30>)
 80058ce:	4807      	ldr	r0, [pc, #28]	; (80058ec <tcp_free+0x34>)
 80058d0:	f008 fe5e 	bl	800e590 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7fe fe9c 	bl	8004614 <memp_free>
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0801047c 	.word	0x0801047c
 80058e8:	080104ac 	.word	0x080104ac
 80058ec:	080104c0 	.word	0x080104c0

080058f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7d1b      	ldrb	r3, [r3, #20]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <tcp_free_listen+0x1c>
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <tcp_free_listen+0x2c>)
 8005902:	22df      	movs	r2, #223	; 0xdf
 8005904:	4906      	ldr	r1, [pc, #24]	; (8005920 <tcp_free_listen+0x30>)
 8005906:	4807      	ldr	r0, [pc, #28]	; (8005924 <tcp_free_listen+0x34>)
 8005908:	f008 fe42 	bl	800e590 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	2002      	movs	r0, #2
 8005910:	f7fe fe80 	bl	8004614 <memp_free>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	0801047c 	.word	0x0801047c
 8005920:	080104e8 	.word	0x080104e8
 8005924:	080104c0 	.word	0x080104c0

08005928 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800592c:	f001 f85c 	bl	80069e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <tcp_tmr+0x28>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <tcp_tmr+0x28>)
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <tcp_tmr+0x28>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005948:	f000 fd0e 	bl	8006368 <tcp_slowtmr>
  }
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000051 	.word	0x20000051

08005954 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <tcp_remove_listener+0x1c>
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <tcp_remove_listener+0x48>)
 8005966:	22ff      	movs	r2, #255	; 0xff
 8005968:	490d      	ldr	r1, [pc, #52]	; (80059a0 <tcp_remove_listener+0x4c>)
 800596a:	480e      	ldr	r0, [pc, #56]	; (80059a4 <tcp_remove_listener+0x50>)
 800596c:	f008 fe10 	bl	800e590 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e00a      	b.n	800598c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d102      	bne.n	8005986 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f1      	bne.n	8005976 <tcp_remove_listener+0x22>
    }
  }
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	0801047c 	.word	0x0801047c
 80059a0:	08010504 	.word	0x08010504
 80059a4:	080104c0 	.word	0x080104c0

080059a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <tcp_listen_closed+0x1c>
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <tcp_listen_closed+0x60>)
 80059b8:	f240 1211 	movw	r2, #273	; 0x111
 80059bc:	4913      	ldr	r1, [pc, #76]	; (8005a0c <tcp_listen_closed+0x64>)
 80059be:	4814      	ldr	r0, [pc, #80]	; (8005a10 <tcp_listen_closed+0x68>)
 80059c0:	f008 fde6 	bl	800e590 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7d1b      	ldrb	r3, [r3, #20]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d006      	beq.n	80059da <tcp_listen_closed+0x32>
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <tcp_listen_closed+0x60>)
 80059ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 80059d2:	4910      	ldr	r1, [pc, #64]	; (8005a14 <tcp_listen_closed+0x6c>)
 80059d4:	480e      	ldr	r0, [pc, #56]	; (8005a10 <tcp_listen_closed+0x68>)
 80059d6:	f008 fddb 	bl	800e590 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80059da:	2301      	movs	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e00b      	b.n	80059f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80059e0:	4a0d      	ldr	r2, [pc, #52]	; (8005a18 <tcp_listen_closed+0x70>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ffb1 	bl	8005954 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d9f0      	bls.n	80059e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	0801047c 	.word	0x0801047c
 8005a0c:	0801052c 	.word	0x0801052c
 8005a10:	080104c0 	.word	0x080104c0
 8005a14:	08010538 	.word	0x08010538
 8005a18:	08012448 	.word	0x08012448

08005a1c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005a1c:	b5b0      	push	{r4, r5, r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af04      	add	r7, sp, #16
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <tcp_close_shutdown+0x20>
 8005a2e:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <tcp_close_shutdown+0x1a0>)
 8005a30:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005a34:	4962      	ldr	r1, [pc, #392]	; (8005bc0 <tcp_close_shutdown+0x1a4>)
 8005a36:	4863      	ldr	r0, [pc, #396]	; (8005bc4 <tcp_close_shutdown+0x1a8>)
 8005a38:	f008 fdaa 	bl	800e590 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d067      	beq.n	8005b12 <tcp_close_shutdown+0xf6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7d1b      	ldrb	r3, [r3, #20]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d003      	beq.n	8005a52 <tcp_close_shutdown+0x36>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7d1b      	ldrb	r3, [r3, #20]
 8005a4e:	2b07      	cmp	r3, #7
 8005a50:	d15f      	bne.n	8005b12 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <tcp_close_shutdown+0x4a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5e:	f640 0242 	movw	r2, #2114	; 0x842
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d055      	beq.n	8005b12 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8b5b      	ldrh	r3, [r3, #26]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <tcp_close_shutdown+0x64>
 8005a72:	4b52      	ldr	r3, [pc, #328]	; (8005bbc <tcp_close_shutdown+0x1a0>)
 8005a74:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005a78:	4953      	ldr	r1, [pc, #332]	; (8005bc8 <tcp_close_shutdown+0x1ac>)
 8005a7a:	4852      	ldr	r0, [pc, #328]	; (8005bc4 <tcp_close_shutdown+0x1a8>)
 8005a7c:	f008 fd88 	bl	800e590 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005a88:	687d      	ldr	r5, [r7, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	8ad2      	ldrh	r2, [r2, #22]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	8b09      	ldrh	r1, [r1, #24]
 8005a96:	9102      	str	r1, [sp, #8]
 8005a98:	9201      	str	r2, [sp, #4]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	462b      	mov	r3, r5
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f005 fd8c 	bl	800b5c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 fb67 	bl	800717c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <tcp_close_shutdown+0x1b0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d105      	bne.n	8005ac4 <tcp_close_shutdown+0xa8>
 8005ab8:	4b44      	ldr	r3, [pc, #272]	; (8005bcc <tcp_close_shutdown+0x1b0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	4a43      	ldr	r2, [pc, #268]	; (8005bcc <tcp_close_shutdown+0x1b0>)
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e013      	b.n	8005aec <tcp_close_shutdown+0xd0>
 8005ac4:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <tcp_close_shutdown+0x1b0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e00c      	b.n	8005ae6 <tcp_close_shutdown+0xca>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d104      	bne.n	8005ae0 <tcp_close_shutdown+0xc4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	e005      	b.n	8005aec <tcp_close_shutdown+0xd0>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1ef      	bne.n	8005acc <tcp_close_shutdown+0xb0>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	4b37      	ldr	r3, [pc, #220]	; (8005bd0 <tcp_close_shutdown+0x1b4>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005af8:	4b36      	ldr	r3, [pc, #216]	; (8005bd4 <tcp_close_shutdown+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d102      	bne.n	8005b08 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005b02:	f003 fffd 	bl	8009b00 <tcp_trigger_input_pcb_close>
 8005b06:	e002      	b.n	8005b0e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff fed5 	bl	80058b8 <tcp_free>
      }
      return ERR_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e050      	b.n	8005bb4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	7d1b      	ldrb	r3, [r3, #20]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d03b      	beq.n	8005b92 <tcp_close_shutdown+0x176>
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	dc44      	bgt.n	8005ba8 <tcp_close_shutdown+0x18c>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <tcp_close_shutdown+0x10c>
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d02a      	beq.n	8005b7c <tcp_close_shutdown+0x160>
 8005b26:	e03f      	b.n	8005ba8 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8adb      	ldrh	r3, [r3, #22]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d021      	beq.n	8005b74 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b30:	4b29      	ldr	r3, [pc, #164]	; (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d105      	bne.n	8005b46 <tcp_close_shutdown+0x12a>
 8005b3a:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a25      	ldr	r2, [pc, #148]	; (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e013      	b.n	8005b6e <tcp_close_shutdown+0x152>
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <tcp_close_shutdown+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	e00c      	b.n	8005b68 <tcp_close_shutdown+0x14c>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d104      	bne.n	8005b62 <tcp_close_shutdown+0x146>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	e005      	b.n	8005b6e <tcp_close_shutdown+0x152>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ef      	bne.n	8005b4e <tcp_close_shutdown+0x132>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fe9f 	bl	80058b8 <tcp_free>
      break;
 8005b7a:	e01a      	b.n	8005bb2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff13 	bl	80059a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4815      	ldr	r0, [pc, #84]	; (8005bdc <tcp_close_shutdown+0x1c0>)
 8005b86:	f001 fb49 	bl	800721c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff feb0 	bl	80058f0 <tcp_free_listen>
      break;
 8005b90:	e00f      	b.n	8005bb2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	480d      	ldr	r0, [pc, #52]	; (8005bcc <tcp_close_shutdown+0x1b0>)
 8005b96:	f001 fb41 	bl	800721c <tcp_pcb_remove>
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <tcp_close_shutdown+0x1b4>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff fe89 	bl	80058b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005ba6:	e004      	b.n	8005bb2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f819 	bl	8005be0 <tcp_close_shutdown_fin>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	e000      	b.n	8005bb4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bdb0      	pop	{r4, r5, r7, pc}
 8005bbc:	0801047c 	.word	0x0801047c
 8005bc0:	08010550 	.word	0x08010550
 8005bc4:	080104c0 	.word	0x080104c0
 8005bc8:	08010570 	.word	0x08010570
 8005bcc:	20024d04 	.word	0x20024d04
 8005bd0:	20024d00 	.word	0x20024d00
 8005bd4:	20024d18 	.word	0x20024d18
 8005bd8:	20024d10 	.word	0x20024d10
 8005bdc:	20024d0c 	.word	0x20024d0c

08005be0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <tcp_close_shutdown_fin+0x1c>
 8005bee:	4b2e      	ldr	r3, [pc, #184]	; (8005ca8 <tcp_close_shutdown_fin+0xc8>)
 8005bf0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005bf4:	492d      	ldr	r1, [pc, #180]	; (8005cac <tcp_close_shutdown_fin+0xcc>)
 8005bf6:	482e      	ldr	r0, [pc, #184]	; (8005cb0 <tcp_close_shutdown_fin+0xd0>)
 8005bf8:	f008 fcca 	bl	800e590 <iprintf>

  switch (pcb->state) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7d1b      	ldrb	r3, [r3, #20]
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	d020      	beq.n	8005c46 <tcp_close_shutdown_fin+0x66>
 8005c04:	2b07      	cmp	r3, #7
 8005c06:	dc2b      	bgt.n	8005c60 <tcp_close_shutdown_fin+0x80>
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d002      	beq.n	8005c12 <tcp_close_shutdown_fin+0x32>
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d00d      	beq.n	8005c2c <tcp_close_shutdown_fin+0x4c>
 8005c10:	e026      	b.n	8005c60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f004 fde2 	bl	800a7dc <tcp_send_fin>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11f      	bne.n	8005c64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2205      	movs	r2, #5
 8005c28:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c2a:	e01b      	b.n	8005c64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f004 fdd5 	bl	800a7dc <tcp_send_fin>
 8005c32:	4603      	mov	r3, r0
 8005c34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d114      	bne.n	8005c68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2205      	movs	r2, #5
 8005c42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c44:	e010      	b.n	8005c68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f004 fdc8 	bl	800a7dc <tcp_send_fin>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2209      	movs	r2, #9
 8005c5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c5e:	e005      	b.n	8005c6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e01c      	b.n	8005c9e <tcp_close_shutdown_fin+0xbe>
      break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <tcp_close_shutdown_fin+0x8e>
      break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <tcp_close_shutdown_fin+0x8e>
      break;
 8005c6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f004 feee 	bl	800aa58 <tcp_output>
 8005c7c:	e00d      	b.n	8005c9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d108      	bne.n	8005c9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8b5b      	ldrh	r3, [r3, #26]
 8005c8c:	f043 0308 	orr.w	r3, r3, #8
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e001      	b.n	8005c9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	0801047c 	.word	0x0801047c
 8005cac:	0801052c 	.word	0x0801052c
 8005cb0:	080104c0 	.word	0x080104c0

08005cb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <tcp_close+0x22>
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <tcp_close+0x4c>)
 8005cc4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <tcp_close+0x50>)
 8005cca:	480f      	ldr	r0, [pc, #60]	; (8005d08 <tcp_close+0x54>)
 8005ccc:	f008 fc60 	bl	800e590 <iprintf>
 8005cd0:	f06f 030f 	mvn.w	r3, #15
 8005cd4:	e00f      	b.n	8005cf6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	7d1b      	ldrb	r3, [r3, #20]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d006      	beq.n	8005cec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8b5b      	ldrh	r3, [r3, #26]
 8005ce2:	f043 0310 	orr.w	r3, r3, #16
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005cec:	2101      	movs	r1, #1
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff fe94 	bl	8005a1c <tcp_close_shutdown>
 8005cf4:	4603      	mov	r3, r0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	0801047c 	.word	0x0801047c
 8005d04:	0801058c 	.word	0x0801058c
 8005d08:	080104c0 	.word	0x080104c0

08005d0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af04      	add	r7, sp, #16
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d107      	bne.n	8005d2c <tcp_abandon+0x20>
 8005d1c:	4b52      	ldr	r3, [pc, #328]	; (8005e68 <tcp_abandon+0x15c>)
 8005d1e:	f240 223d 	movw	r2, #573	; 0x23d
 8005d22:	4952      	ldr	r1, [pc, #328]	; (8005e6c <tcp_abandon+0x160>)
 8005d24:	4852      	ldr	r0, [pc, #328]	; (8005e70 <tcp_abandon+0x164>)
 8005d26:	f008 fc33 	bl	800e590 <iprintf>
 8005d2a:	e099      	b.n	8005e60 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7d1b      	ldrb	r3, [r3, #20]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d106      	bne.n	8005d42 <tcp_abandon+0x36>
 8005d34:	4b4c      	ldr	r3, [pc, #304]	; (8005e68 <tcp_abandon+0x15c>)
 8005d36:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d3a:	494e      	ldr	r1, [pc, #312]	; (8005e74 <tcp_abandon+0x168>)
 8005d3c:	484c      	ldr	r0, [pc, #304]	; (8005e70 <tcp_abandon+0x164>)
 8005d3e:	f008 fc27 	bl	800e590 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7d1b      	ldrb	r3, [r3, #20]
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	d107      	bne.n	8005d5a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	484a      	ldr	r0, [pc, #296]	; (8005e78 <tcp_abandon+0x16c>)
 8005d4e:	f001 fa65 	bl	800721c <tcp_pcb_remove>
    tcp_free(pcb);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fdb0 	bl	80058b8 <tcp_free>
 8005d58:	e082      	b.n	8005e60 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d74:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7d1b      	ldrb	r3, [r3, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d126      	bne.n	8005dd2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8adb      	ldrh	r3, [r3, #22]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02e      	beq.n	8005dea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	; (8005e7c <tcp_abandon+0x170>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d105      	bne.n	8005da2 <tcp_abandon+0x96>
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <tcp_abandon+0x170>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4a37      	ldr	r2, [pc, #220]	; (8005e7c <tcp_abandon+0x170>)
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e013      	b.n	8005dca <tcp_abandon+0xbe>
 8005da2:	4b36      	ldr	r3, [pc, #216]	; (8005e7c <tcp_abandon+0x170>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e00c      	b.n	8005dc4 <tcp_abandon+0xb8>
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d104      	bne.n	8005dbe <tcp_abandon+0xb2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e005      	b.n	8005dca <tcp_abandon+0xbe>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ef      	bne.n	8005daa <tcp_abandon+0x9e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	60da      	str	r2, [r3, #12]
 8005dd0:	e00b      	b.n	8005dea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8adb      	ldrh	r3, [r3, #22]
 8005dda:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4828      	ldr	r0, [pc, #160]	; (8005e80 <tcp_abandon+0x174>)
 8005de0:	f001 fa1c 	bl	800721c <tcp_pcb_remove>
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <tcp_abandon+0x178>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fed8 	bl	8006bac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fecf 	bl	8006bac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fec6 	bl	8006bac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	8b12      	ldrh	r2, [r2, #24]
 8005e30:	9202      	str	r2, [sp, #8]
 8005e32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005e34:	9201      	str	r2, [sp, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f005 fbbe 	bl	800b5c0 <tcp_rst>
    }
    last_state = pcb->state;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	7d1b      	ldrb	r3, [r3, #20]
 8005e48:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fd34 	bl	80058b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <tcp_abandon+0x154>
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f06f 010c 	mvn.w	r1, #12
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	4798      	blx	r3
  }
}
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	0801047c 	.word	0x0801047c
 8005e6c:	080105c0 	.word	0x080105c0
 8005e70:	080104c0 	.word	0x080104c0
 8005e74:	080105dc 	.word	0x080105dc
 8005e78:	20024d14 	.word	0x20024d14
 8005e7c:	20024d10 	.word	0x20024d10
 8005e80:	20024d04 	.word	0x20024d04
 8005e84:	20024d00 	.word	0x20024d00

08005e88 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005e90:	2101      	movs	r1, #1
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff3a 	bl	8005d0c <tcp_abandon>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005eae:	2304      	movs	r3, #4
 8005eb0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005eb8:	4b3e      	ldr	r3, [pc, #248]	; (8005fb4 <tcp_bind+0x114>)
 8005eba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <tcp_bind+0x36>
 8005ec2:	4b3d      	ldr	r3, [pc, #244]	; (8005fb8 <tcp_bind+0x118>)
 8005ec4:	f240 22a9 	movw	r2, #681	; 0x2a9
 8005ec8:	493c      	ldr	r1, [pc, #240]	; (8005fbc <tcp_bind+0x11c>)
 8005eca:	483d      	ldr	r0, [pc, #244]	; (8005fc0 <tcp_bind+0x120>)
 8005ecc:	f008 fb60 	bl	800e590 <iprintf>
 8005ed0:	f06f 030f 	mvn.w	r3, #15
 8005ed4:	e06a      	b.n	8005fac <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	7d1b      	ldrb	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <tcp_bind+0x52>
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <tcp_bind+0x118>)
 8005ee0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8005ee4:	4937      	ldr	r1, [pc, #220]	; (8005fc4 <tcp_bind+0x124>)
 8005ee6:	4836      	ldr	r0, [pc, #216]	; (8005fc0 <tcp_bind+0x120>)
 8005ee8:	f008 fb52 	bl	800e590 <iprintf>
 8005eec:	f06f 0305 	mvn.w	r3, #5
 8005ef0:	e05c      	b.n	8005fac <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <tcp_bind+0x6c>
    port = tcp_new_port();
 8005ef8:	f000 f9f0 	bl	80062dc <tcp_new_port>
 8005efc:	4603      	mov	r3, r0
 8005efe:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d135      	bne.n	8005f72 <tcp_bind+0xd2>
      return ERR_BUF;
 8005f06:	f06f 0301 	mvn.w	r3, #1
 8005f0a:	e04f      	b.n	8005fac <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	e02b      	b.n	8005f6a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005f12:	4a2d      	ldr	r2, [pc, #180]	; (8005fc8 <tcp_bind+0x128>)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e01e      	b.n	8005f5e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	8adb      	ldrh	r3, [r3, #22]
 8005f24:	88fa      	ldrh	r2, [r7, #6]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d116      	bne.n	8005f58 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8005f2a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d010      	beq.n	8005f52 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <tcp_bind+0xb2>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d102      	bne.n	8005f58 <tcp_bind+0xb8>
              return ERR_USE;
 8005f52:	f06f 0307 	mvn.w	r3, #7
 8005f56:	e029      	b.n	8005fac <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1dd      	bne.n	8005f20 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	dbcf      	blt.n	8005f12 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <tcp_bind+0xf2>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <tcp_bind+0xec>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	e000      	b.n	8005f8e <tcp_bind+0xee>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <tcp_bind+0x12c>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <tcp_bind+0x12c>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	f005 fccd 	bl	800b944 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	08012470 	.word	0x08012470
 8005fb8:	0801047c 	.word	0x0801047c
 8005fbc:	08010610 	.word	0x08010610
 8005fc0:	080104c0 	.word	0x080104c0
 8005fc4:	08010628 	.word	0x08010628
 8005fc8:	08012448 	.word	0x08012448
 8005fcc:	20024d10 	.word	0x20024d10

08005fd0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <tcp_accept_null+0x22>
 8005fe4:	4b07      	ldr	r3, [pc, #28]	; (8006004 <tcp_accept_null+0x34>)
 8005fe6:	f240 320f 	movw	r2, #783	; 0x30f
 8005fea:	4907      	ldr	r1, [pc, #28]	; (8006008 <tcp_accept_null+0x38>)
 8005fec:	4807      	ldr	r0, [pc, #28]	; (800600c <tcp_accept_null+0x3c>)
 8005fee:	f008 facf 	bl	800e590 <iprintf>

  tcp_abort(pcb);
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f7ff ff48 	bl	8005e88 <tcp_abort>

  return ERR_ABRT;
 8005ff8:	f06f 030c 	mvn.w	r3, #12
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	0801047c 	.word	0x0801047c
 8006008:	08010650 	.word	0x08010650
 800600c:	080104c0 	.word	0x080104c0

08006010 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	2200      	movs	r2, #0
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f806 	bl	8006034 <tcp_listen_with_backlog_and_err>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	460b      	mov	r3, r1
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <tcp_listen_with_backlog_and_err+0x2c>
 800604c:	4b47      	ldr	r3, [pc, #284]	; (800616c <tcp_listen_with_backlog_and_err+0x138>)
 800604e:	f240 3259 	movw	r2, #857	; 0x359
 8006052:	4947      	ldr	r1, [pc, #284]	; (8006170 <tcp_listen_with_backlog_and_err+0x13c>)
 8006054:	4847      	ldr	r0, [pc, #284]	; (8006174 <tcp_listen_with_backlog_and_err+0x140>)
 8006056:	f008 fa9b 	bl	800e590 <iprintf>
 800605a:	23f0      	movs	r3, #240	; 0xf0
 800605c:	76fb      	strb	r3, [r7, #27]
 800605e:	e079      	b.n	8006154 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	7d1b      	ldrb	r3, [r3, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d009      	beq.n	800607c <tcp_listen_with_backlog_and_err+0x48>
 8006068:	4b40      	ldr	r3, [pc, #256]	; (800616c <tcp_listen_with_backlog_and_err+0x138>)
 800606a:	f240 325a 	movw	r2, #858	; 0x35a
 800606e:	4942      	ldr	r1, [pc, #264]	; (8006178 <tcp_listen_with_backlog_and_err+0x144>)
 8006070:	4840      	ldr	r0, [pc, #256]	; (8006174 <tcp_listen_with_backlog_and_err+0x140>)
 8006072:	f008 fa8d 	bl	800e590 <iprintf>
 8006076:	23f1      	movs	r3, #241	; 0xf1
 8006078:	76fb      	strb	r3, [r7, #27]
 800607a:	e06b      	b.n	8006154 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	7d1b      	ldrb	r3, [r3, #20]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d104      	bne.n	800608e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006088:	23f7      	movs	r3, #247	; 0xf7
 800608a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800608c:	e062      	b.n	8006154 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800608e:	2002      	movs	r0, #2
 8006090:	f7fe fa74 	bl	800457c <memp_malloc>
 8006094:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800609c:	23ff      	movs	r3, #255	; 0xff
 800609e:	76fb      	strb	r3, [r7, #27]
    goto done;
 80060a0:	e058      	b.n	8006154 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8ada      	ldrh	r2, [r3, #22]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2201      	movs	r2, #1
 80060b6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	7d5a      	ldrb	r2, [r3, #21]
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	7a5a      	ldrb	r2, [r3, #9]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2200      	movs	r2, #0
 80060cc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	7ada      	ldrb	r2, [r3, #11]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	7a9a      	ldrb	r2, [r3, #10]
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8adb      	ldrh	r3, [r3, #22]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d021      	beq.n	8006132 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80060ee:	4b23      	ldr	r3, [pc, #140]	; (800617c <tcp_listen_with_backlog_and_err+0x148>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d105      	bne.n	8006104 <tcp_listen_with_backlog_and_err+0xd0>
 80060f8:	4b20      	ldr	r3, [pc, #128]	; (800617c <tcp_listen_with_backlog_and_err+0x148>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	4a1f      	ldr	r2, [pc, #124]	; (800617c <tcp_listen_with_backlog_and_err+0x148>)
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e013      	b.n	800612c <tcp_listen_with_backlog_and_err+0xf8>
 8006104:	4b1d      	ldr	r3, [pc, #116]	; (800617c <tcp_listen_with_backlog_and_err+0x148>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e00c      	b.n	8006126 <tcp_listen_with_backlog_and_err+0xf2>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	429a      	cmp	r2, r3
 8006114:	d104      	bne.n	8006120 <tcp_listen_with_backlog_and_err+0xec>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	60da      	str	r2, [r3, #12]
 800611e:	e005      	b.n	800612c <tcp_listen_with_backlog_and_err+0xf8>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ef      	bne.n	800610c <tcp_listen_with_backlog_and_err+0xd8>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fbc0 	bl	80058b8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4a11      	ldr	r2, [pc, #68]	; (8006180 <tcp_listen_with_backlog_and_err+0x14c>)
 800613c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <tcp_listen_with_backlog_and_err+0x150>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	60da      	str	r2, [r3, #12]
 8006146:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <tcp_listen_with_backlog_and_err+0x150>)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	f005 fbfa 	bl	800b944 <tcp_timer_needed>
  res = ERR_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7efa      	ldrb	r2, [r7, #27]
 800615e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006160:	69fb      	ldr	r3, [r7, #28]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	0801047c 	.word	0x0801047c
 8006170:	08010670 	.word	0x08010670
 8006174:	080104c0 	.word	0x080104c0
 8006178:	080106a0 	.word	0x080106a0
 800617c:	20024d10 	.word	0x20024d10
 8006180:	08005fd1 	.word	0x08005fd1
 8006184:	20024d0c 	.word	0x20024d0c

08006188 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <tcp_update_rcv_ann_wnd+0x1c>
 8006196:	4b25      	ldr	r3, [pc, #148]	; (800622c <tcp_update_rcv_ann_wnd+0xa4>)
 8006198:	f240 32a6 	movw	r2, #934	; 0x3a6
 800619c:	4924      	ldr	r1, [pc, #144]	; (8006230 <tcp_update_rcv_ann_wnd+0xa8>)
 800619e:	4825      	ldr	r0, [pc, #148]	; (8006234 <tcp_update_rcv_ann_wnd+0xac>)
 80061a0:	f008 f9f6 	bl	800e590 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80061ac:	4413      	add	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80061b8:	f240 4121 	movw	r1, #1057	; 0x421
 80061bc:	428a      	cmp	r2, r1
 80061be:	bf28      	it	cs
 80061c0:	460a      	movcs	r2, r1
 80061c2:	b292      	uxth	r2, r2
 80061c4:	4413      	add	r3, r2
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	db08      	blt.n	80061e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	e020      	b.n	8006222 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd03      	ble.n	80061f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061f4:	e014      	b.n	8006220 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	d306      	bcc.n	8006218 <tcp_update_rcv_ann_wnd+0x90>
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <tcp_update_rcv_ann_wnd+0xa4>)
 800620c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006210:	4909      	ldr	r1, [pc, #36]	; (8006238 <tcp_update_rcv_ann_wnd+0xb0>)
 8006212:	4808      	ldr	r0, [pc, #32]	; (8006234 <tcp_update_rcv_ann_wnd+0xac>)
 8006214:	f008 f9bc 	bl	800e590 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006220:	2300      	movs	r3, #0
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	0801047c 	.word	0x0801047c
 8006230:	080106d8 	.word	0x080106d8
 8006234:	080104c0 	.word	0x080104c0
 8006238:	080106fc 	.word	0x080106fc

0800623c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d107      	bne.n	800625e <tcp_recved+0x22>
 800624e:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <tcp_recved+0x90>)
 8006250:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006254:	491e      	ldr	r1, [pc, #120]	; (80062d0 <tcp_recved+0x94>)
 8006256:	481f      	ldr	r0, [pc, #124]	; (80062d4 <tcp_recved+0x98>)
 8006258:	f008 f99a 	bl	800e590 <iprintf>
 800625c:	e033      	b.n	80062c6 <tcp_recved+0x8a>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	7d1b      	ldrb	r3, [r3, #20]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d106      	bne.n	8006274 <tcp_recved+0x38>
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <tcp_recved+0x90>)
 8006268:	f240 32d2 	movw	r2, #978	; 0x3d2
 800626c:	491a      	ldr	r1, [pc, #104]	; (80062d8 <tcp_recved+0x9c>)
 800626e:	4819      	ldr	r0, [pc, #100]	; (80062d4 <tcp_recved+0x98>)
 8006270:	f008 f98e 	bl	800e590 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006278:	887b      	ldrh	r3, [r7, #2]
 800627a:	4413      	add	r3, r2
 800627c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800627e:	89fb      	ldrh	r3, [r7, #14]
 8006280:	f640 0242 	movw	r2, #2114	; 0x842
 8006284:	4293      	cmp	r3, r2
 8006286:	d804      	bhi.n	8006292 <tcp_recved+0x56>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	89fa      	ldrh	r2, [r7, #14]
 800628e:	429a      	cmp	r2, r3
 8006290:	d204      	bcs.n	800629c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f640 0242 	movw	r2, #2114	; 0x842
 8006298:	851a      	strh	r2, [r3, #40]	; 0x28
 800629a:	e002      	b.n	80062a2 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	89fa      	ldrh	r2, [r7, #14]
 80062a0:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ff70 	bl	8006188 <tcp_update_rcv_ann_wnd>
 80062a8:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 80062b0:	d309      	bcc.n	80062c6 <tcp_recved+0x8a>
    tcp_ack_now(pcb);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8b5b      	ldrh	r3, [r3, #26]
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f004 fbc9 	bl	800aa58 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	0801047c 	.word	0x0801047c
 80062d0:	08010718 	.word	0x08010718
 80062d4:	080104c0 	.word	0x080104c0
 80062d8:	08010730 	.word	0x08010730

080062dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80062e6:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <tcp_new_port+0x84>)
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <tcp_new_port+0x84>)
 80062f0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80062f2:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <tcp_new_port+0x84>)
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d103      	bne.n	8006306 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80062fe:	4b18      	ldr	r3, [pc, #96]	; (8006360 <tcp_new_port+0x84>)
 8006300:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006304:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006306:	2300      	movs	r3, #0
 8006308:	71fb      	strb	r3, [r7, #7]
 800630a:	e01e      	b.n	800634a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <tcp_new_port+0x88>)
 8006310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	e011      	b.n	800633e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	8ada      	ldrh	r2, [r3, #22]
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <tcp_new_port+0x84>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d108      	bne.n	8006338 <tcp_new_port+0x5c>
        n++;
 8006326:	88bb      	ldrh	r3, [r7, #4]
 8006328:	3301      	adds	r3, #1
 800632a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800632c:	88bb      	ldrh	r3, [r7, #4]
 800632e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006332:	d3d8      	bcc.n	80062e6 <tcp_new_port+0xa>
          return 0;
 8006334:	2300      	movs	r3, #0
 8006336:	e00d      	b.n	8006354 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ea      	bne.n	800631a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	3301      	adds	r3, #1
 8006348:	71fb      	strb	r3, [r7, #7]
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d9dd      	bls.n	800630c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <tcp_new_port+0x84>)
 8006352:	881b      	ldrh	r3, [r3, #0]
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	1000000a 	.word	0x1000000a
 8006364:	08012448 	.word	0x08012448

08006368 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006368:	b5b0      	push	{r4, r5, r7, lr}
 800636a:	b090      	sub	sp, #64	; 0x40
 800636c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006374:	4b94      	ldr	r3, [pc, #592]	; (80065c8 <tcp_slowtmr+0x260>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	4a93      	ldr	r2, [pc, #588]	; (80065c8 <tcp_slowtmr+0x260>)
 800637c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800637e:	4b93      	ldr	r3, [pc, #588]	; (80065cc <tcp_slowtmr+0x264>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	4b91      	ldr	r3, [pc, #580]	; (80065cc <tcp_slowtmr+0x264>)
 8006388:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800638e:	4b90      	ldr	r3, [pc, #576]	; (80065d0 <tcp_slowtmr+0x268>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006394:	e29f      	b.n	80068d6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	7d1b      	ldrb	r3, [r3, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <tcp_slowtmr+0x44>
 800639e:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <tcp_slowtmr+0x26c>)
 80063a0:	f240 42be 	movw	r2, #1214	; 0x4be
 80063a4:	498c      	ldr	r1, [pc, #560]	; (80065d8 <tcp_slowtmr+0x270>)
 80063a6:	488d      	ldr	r0, [pc, #564]	; (80065dc <tcp_slowtmr+0x274>)
 80063a8:	f008 f8f2 	bl	800e590 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	7d1b      	ldrb	r3, [r3, #20]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d106      	bne.n	80063c2 <tcp_slowtmr+0x5a>
 80063b4:	4b87      	ldr	r3, [pc, #540]	; (80065d4 <tcp_slowtmr+0x26c>)
 80063b6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80063ba:	4989      	ldr	r1, [pc, #548]	; (80065e0 <tcp_slowtmr+0x278>)
 80063bc:	4887      	ldr	r0, [pc, #540]	; (80065dc <tcp_slowtmr+0x274>)
 80063be:	f008 f8e7 	bl	800e590 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	7d1b      	ldrb	r3, [r3, #20]
 80063c6:	2b0a      	cmp	r3, #10
 80063c8:	d106      	bne.n	80063d8 <tcp_slowtmr+0x70>
 80063ca:	4b82      	ldr	r3, [pc, #520]	; (80065d4 <tcp_slowtmr+0x26c>)
 80063cc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80063d0:	4984      	ldr	r1, [pc, #528]	; (80065e4 <tcp_slowtmr+0x27c>)
 80063d2:	4882      	ldr	r0, [pc, #520]	; (80065dc <tcp_slowtmr+0x274>)
 80063d4:	f008 f8dc 	bl	800e590 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	7f9a      	ldrb	r2, [r3, #30]
 80063dc:	4b7b      	ldr	r3, [pc, #492]	; (80065cc <tcp_slowtmr+0x264>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d105      	bne.n	80063f0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80063ee:	e272      	b.n	80068d6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80063f0:	4b76      	ldr	r3, [pc, #472]	; (80065cc <tcp_slowtmr+0x264>)
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	7d1b      	ldrb	r3, [r3, #20]
 8006408:	2b02      	cmp	r3, #2
 800640a:	d10a      	bne.n	8006422 <tcp_slowtmr+0xba>
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006412:	2b05      	cmp	r3, #5
 8006414:	d905      	bls.n	8006422 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800641a:	3301      	adds	r3, #1
 800641c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006420:	e11e      	b.n	8006660 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006428:	2b0b      	cmp	r3, #11
 800642a:	d905      	bls.n	8006438 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800642c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006430:	3301      	adds	r3, #1
 8006432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006436:	e113      	b.n	8006660 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800643e:	2b00      	cmp	r3, #0
 8006440:	d075      	beq.n	800652e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	2b00      	cmp	r3, #0
 8006448:	d006      	beq.n	8006458 <tcp_slowtmr+0xf0>
 800644a:	4b62      	ldr	r3, [pc, #392]	; (80065d4 <tcp_slowtmr+0x26c>)
 800644c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006450:	4965      	ldr	r1, [pc, #404]	; (80065e8 <tcp_slowtmr+0x280>)
 8006452:	4862      	ldr	r0, [pc, #392]	; (80065dc <tcp_slowtmr+0x274>)
 8006454:	f008 f89c 	bl	800e590 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <tcp_slowtmr+0x106>
 8006460:	4b5c      	ldr	r3, [pc, #368]	; (80065d4 <tcp_slowtmr+0x26c>)
 8006462:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006466:	4961      	ldr	r1, [pc, #388]	; (80065ec <tcp_slowtmr+0x284>)
 8006468:	485c      	ldr	r0, [pc, #368]	; (80065dc <tcp_slowtmr+0x274>)
 800646a:	f008 f891 	bl	800e590 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006474:	2b0b      	cmp	r3, #11
 8006476:	d905      	bls.n	8006484 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800647c:	3301      	adds	r3, #1
 800647e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006482:	e0ed      	b.n	8006660 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800648a:	3b01      	subs	r3, #1
 800648c:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <tcp_slowtmr+0x288>)
 800648e:	5cd3      	ldrb	r3, [r2, r3]
 8006490:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006498:	7c7a      	ldrb	r2, [r7, #17]
 800649a:	429a      	cmp	r2, r3
 800649c:	d907      	bls.n	80064ae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064a4:	3301      	adds	r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80064b4:	7c7a      	ldrb	r2, [r7, #17]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	f200 80d2 	bhi.w	8006660 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80064bc:	2301      	movs	r3, #1
 80064be:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80064ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064cc:	f005 f96c 	bl	800b7a8 <tcp_zero_window_probe>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d014      	beq.n	8006500 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80064d6:	2300      	movs	r3, #0
 80064d8:	623b      	str	r3, [r7, #32]
 80064da:	e011      	b.n	8006500 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064e2:	4619      	mov	r1, r3
 80064e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e6:	f004 f831 	bl	800a54c <tcp_split_unsent_seg>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d107      	bne.n	8006500 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80064f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f2:	f004 fab1 	bl	800aa58 <tcp_output>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80ac 	beq.w	8006660 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006516:	2b06      	cmp	r3, #6
 8006518:	f200 80a2 	bhi.w	8006660 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006522:	3301      	adds	r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800652c:	e098      	b.n	8006660 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006534:	2b00      	cmp	r3, #0
 8006536:	db0f      	blt.n	8006558 <tcp_slowtmr+0x1f0>
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800653e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006542:	4293      	cmp	r3, r2
 8006544:	d008      	beq.n	8006558 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800654c:	b29b      	uxth	r3, r3
 800654e:	3301      	adds	r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	b21a      	sxth	r2, r3
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006564:	429a      	cmp	r2, r3
 8006566:	db7b      	blt.n	8006660 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800656a:	f004 fd67 	bl	800b03c <tcp_rexmit_rto_prepare>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <tcp_slowtmr+0x21c>
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006578:	2b00      	cmp	r3, #0
 800657a:	d171      	bne.n	8006660 <tcp_slowtmr+0x2f8>
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d06d      	beq.n	8006660 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	7d1b      	ldrb	r3, [r3, #20]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d03a      	beq.n	8006602 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006592:	2b0c      	cmp	r3, #12
 8006594:	bf28      	it	cs
 8006596:	230c      	movcs	r3, #12
 8006598:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80065a0:	10db      	asrs	r3, r3, #3
 80065a2:	b21b      	sxth	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80065ac:	4413      	add	r3, r2
 80065ae:	7efa      	ldrb	r2, [r7, #27]
 80065b0:	4910      	ldr	r1, [pc, #64]	; (80065f4 <tcp_slowtmr+0x28c>)
 80065b2:	5c8a      	ldrb	r2, [r1, r2]
 80065b4:	4093      	lsls	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80065be:	4293      	cmp	r3, r2
 80065c0:	dc1a      	bgt.n	80065f8 <tcp_slowtmr+0x290>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	b21a      	sxth	r2, r3
 80065c6:	e019      	b.n	80065fc <tcp_slowtmr+0x294>
 80065c8:	20024d08 	.word	0x20024d08
 80065cc:	20000052 	.word	0x20000052
 80065d0:	20024d04 	.word	0x20024d04
 80065d4:	0801047c 	.word	0x0801047c
 80065d8:	080107c0 	.word	0x080107c0
 80065dc:	080104c0 	.word	0x080104c0
 80065e0:	080107ec 	.word	0x080107ec
 80065e4:	08010818 	.word	0x08010818
 80065e8:	08010848 	.word	0x08010848
 80065ec:	0801087c 	.word	0x0801087c
 80065f0:	08012440 	.word	0x08012440
 80065f4:	08012430 	.word	0x08012430
 80065f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	2200      	movs	r2, #0
 8006606:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006614:	4293      	cmp	r3, r2
 8006616:	bf28      	it	cs
 8006618:	4613      	movcs	r3, r2
 800661a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800661c:	8a7b      	ldrh	r3, [r7, #18]
 800661e:	085b      	lsrs	r3, r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	b29b      	uxth	r3, r3
 8006636:	429a      	cmp	r2, r3
 8006638:	d206      	bcs.n	8006648 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	2200      	movs	r2, #0
 8006656:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800665a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800665c:	f004 fd5e 	bl	800b11c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006662:	7d1b      	ldrb	r3, [r3, #20]
 8006664:	2b06      	cmp	r3, #6
 8006666:	d111      	bne.n	800668c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	8b5b      	ldrh	r3, [r3, #26]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006674:	4b9d      	ldr	r3, [pc, #628]	; (80068ec <tcp_slowtmr+0x584>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b28      	cmp	r3, #40	; 0x28
 8006680:	d904      	bls.n	800668c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006686:	3301      	adds	r3, #1
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	7a5b      	ldrb	r3, [r3, #9]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d04c      	beq.n	8006732 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800669c:	2b04      	cmp	r3, #4
 800669e:	d003      	beq.n	80066a8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80066a4:	2b07      	cmp	r3, #7
 80066a6:	d144      	bne.n	8006732 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066a8:	4b90      	ldr	r3, [pc, #576]	; (80068ec <tcp_slowtmr+0x584>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80066bc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80066c0:	498b      	ldr	r1, [pc, #556]	; (80068f0 <tcp_slowtmr+0x588>)
 80066c2:	fba1 1303 	umull	r1, r3, r1, r3
 80066c6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d90a      	bls.n	80066e2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80066cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d0:	3301      	adds	r3, #1
 80066d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80066d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066da:	3301      	adds	r3, #1
 80066dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066e0:	e027      	b.n	8006732 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066e2:	4b82      	ldr	r3, [pc, #520]	; (80068ec <tcp_slowtmr+0x584>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80066f8:	4618      	mov	r0, r3
 80066fa:	4b7e      	ldr	r3, [pc, #504]	; (80068f4 <tcp_slowtmr+0x58c>)
 80066fc:	fb03 f300 	mul.w	r3, r3, r0
 8006700:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006702:	497b      	ldr	r1, [pc, #492]	; (80068f0 <tcp_slowtmr+0x588>)
 8006704:	fba1 1303 	umull	r1, r3, r1, r3
 8006708:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800670a:	429a      	cmp	r2, r3
 800670c:	d911      	bls.n	8006732 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800670e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006710:	f005 f80a 	bl	800b728 <tcp_keepalive>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800671a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800671e:	2b00      	cmp	r3, #0
 8006720:	d107      	bne.n	8006732 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006728:	3301      	adds	r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006736:	2b00      	cmp	r3, #0
 8006738:	d011      	beq.n	800675e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800673a:	4b6c      	ldr	r3, [pc, #432]	; (80068ec <tcp_slowtmr+0x584>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	1ad2      	subs	r2, r2, r3
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800674a:	4619      	mov	r1, r3
 800674c:	460b      	mov	r3, r1
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	440b      	add	r3, r1
 8006752:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800675a:	f000 fec3 	bl	80074e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	7d1b      	ldrb	r3, [r3, #20]
 8006762:	2b03      	cmp	r3, #3
 8006764:	d10b      	bne.n	800677e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006766:	4b61      	ldr	r3, [pc, #388]	; (80068ec <tcp_slowtmr+0x584>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b28      	cmp	r3, #40	; 0x28
 8006772:	d904      	bls.n	800677e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006778:	3301      	adds	r3, #1
 800677a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	7d1b      	ldrb	r3, [r3, #20]
 8006782:	2b09      	cmp	r3, #9
 8006784:	d10b      	bne.n	800679e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006786:	4b59      	ldr	r3, [pc, #356]	; (80068ec <tcp_slowtmr+0x584>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2bf0      	cmp	r3, #240	; 0xf0
 8006792:	d904      	bls.n	800679e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006798:	3301      	adds	r3, #1
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800679e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d060      	beq.n	8006868 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ac:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80067ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067b0:	f000 fce4 	bl	800717c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80067ba:	4b4f      	ldr	r3, [pc, #316]	; (80068f8 <tcp_slowtmr+0x590>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d106      	bne.n	80067d2 <tcp_slowtmr+0x46a>
 80067c4:	4b4d      	ldr	r3, [pc, #308]	; (80068fc <tcp_slowtmr+0x594>)
 80067c6:	f240 526d 	movw	r2, #1389	; 0x56d
 80067ca:	494d      	ldr	r1, [pc, #308]	; (8006900 <tcp_slowtmr+0x598>)
 80067cc:	484d      	ldr	r0, [pc, #308]	; (8006904 <tcp_slowtmr+0x59c>)
 80067ce:	f007 fedf 	bl	800e590 <iprintf>
        prev->next = pcb->next;
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	60da      	str	r2, [r3, #12]
 80067da:	e00f      	b.n	80067fc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80067dc:	4b46      	ldr	r3, [pc, #280]	; (80068f8 <tcp_slowtmr+0x590>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d006      	beq.n	80067f4 <tcp_slowtmr+0x48c>
 80067e6:	4b45      	ldr	r3, [pc, #276]	; (80068fc <tcp_slowtmr+0x594>)
 80067e8:	f240 5271 	movw	r2, #1393	; 0x571
 80067ec:	4946      	ldr	r1, [pc, #280]	; (8006908 <tcp_slowtmr+0x5a0>)
 80067ee:	4845      	ldr	r0, [pc, #276]	; (8006904 <tcp_slowtmr+0x59c>)
 80067f0:	f007 fece 	bl	800e590 <iprintf>
        tcp_active_pcbs = pcb->next;
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4a3f      	ldr	r2, [pc, #252]	; (80068f8 <tcp_slowtmr+0x590>)
 80067fa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80067fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006800:	2b00      	cmp	r3, #0
 8006802:	d013      	beq.n	800682c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800680c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	3304      	adds	r3, #4
 8006812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006814:	8ad2      	ldrh	r2, [r2, #22]
 8006816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006818:	8b09      	ldrh	r1, [r1, #24]
 800681a:	9102      	str	r1, [sp, #8]
 800681c:	9201      	str	r2, [sp, #4]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	462b      	mov	r3, r5
 8006822:	4622      	mov	r2, r4
 8006824:	4601      	mov	r1, r0
 8006826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006828:	f004 feca 	bl	800b5c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	7d1b      	ldrb	r3, [r3, #20]
 8006836:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006842:	6838      	ldr	r0, [r7, #0]
 8006844:	f7ff f838 	bl	80058b8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006848:	4b30      	ldr	r3, [pc, #192]	; (800690c <tcp_slowtmr+0x5a4>)
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <tcp_slowtmr+0x4f6>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f06f 010c 	mvn.w	r1, #12
 800685a:	68b8      	ldr	r0, [r7, #8]
 800685c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800685e:	4b2b      	ldr	r3, [pc, #172]	; (800690c <tcp_slowtmr+0x5a4>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d037      	beq.n	80068d6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006866:	e590      	b.n	800638a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	7f1b      	ldrb	r3, [r3, #28]
 8006876:	3301      	adds	r3, #1
 8006878:	b2da      	uxtb	r2, r3
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	7f1a      	ldrb	r2, [r3, #28]
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	7f5b      	ldrb	r3, [r3, #29]
 8006886:	429a      	cmp	r2, r3
 8006888:	d325      	bcc.n	80068d6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	2200      	movs	r2, #0
 800688e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006890:	4b1e      	ldr	r3, [pc, #120]	; (800690c <tcp_slowtmr+0x5a4>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <tcp_slowtmr+0x550>
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a8:	6912      	ldr	r2, [r2, #16]
 80068aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80068b6:	e002      	b.n	80068be <tcp_slowtmr+0x556>
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <tcp_slowtmr+0x5a4>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d000      	beq.n	80068c8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80068c6:	e560      	b.n	800638a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80068c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80068d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d2:	f004 f8c1 	bl	800aa58 <tcp_output>
  while (pcb != NULL) {
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f47f ad5c 	bne.w	8006396 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <tcp_slowtmr+0x5a8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80068e8:	e067      	b.n	80069ba <tcp_slowtmr+0x652>
 80068ea:	bf00      	nop
 80068ec:	20024d08 	.word	0x20024d08
 80068f0:	10624dd3 	.word	0x10624dd3
 80068f4:	000124f8 	.word	0x000124f8
 80068f8:	20024d04 	.word	0x20024d04
 80068fc:	0801047c 	.word	0x0801047c
 8006900:	080108b4 	.word	0x080108b4
 8006904:	080104c0 	.word	0x080104c0
 8006908:	080108e0 	.word	0x080108e0
 800690c:	20024d00 	.word	0x20024d00
 8006910:	20024d14 	.word	0x20024d14
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	7d1b      	ldrb	r3, [r3, #20]
 8006918:	2b0a      	cmp	r3, #10
 800691a:	d006      	beq.n	800692a <tcp_slowtmr+0x5c2>
 800691c:	4b2b      	ldr	r3, [pc, #172]	; (80069cc <tcp_slowtmr+0x664>)
 800691e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006922:	492b      	ldr	r1, [pc, #172]	; (80069d0 <tcp_slowtmr+0x668>)
 8006924:	482b      	ldr	r0, [pc, #172]	; (80069d4 <tcp_slowtmr+0x66c>)
 8006926:	f007 fe33 	bl	800e590 <iprintf>
    pcb_remove = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006930:	4b29      	ldr	r3, [pc, #164]	; (80069d8 <tcp_slowtmr+0x670>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2bf0      	cmp	r3, #240	; 0xf0
 800693c:	d904      	bls.n	8006948 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800693e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006942:	3301      	adds	r3, #1
 8006944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800694c:	2b00      	cmp	r3, #0
 800694e:	d02f      	beq.n	80069b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006952:	f000 fc13 	bl	800717c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800695c:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <tcp_slowtmr+0x674>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006962:	429a      	cmp	r2, r3
 8006964:	d106      	bne.n	8006974 <tcp_slowtmr+0x60c>
 8006966:	4b19      	ldr	r3, [pc, #100]	; (80069cc <tcp_slowtmr+0x664>)
 8006968:	f240 52af 	movw	r2, #1455	; 0x5af
 800696c:	491c      	ldr	r1, [pc, #112]	; (80069e0 <tcp_slowtmr+0x678>)
 800696e:	4819      	ldr	r0, [pc, #100]	; (80069d4 <tcp_slowtmr+0x66c>)
 8006970:	f007 fe0e 	bl	800e590 <iprintf>
        prev->next = pcb->next;
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	60da      	str	r2, [r3, #12]
 800697c:	e00f      	b.n	800699e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <tcp_slowtmr+0x674>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006984:	429a      	cmp	r2, r3
 8006986:	d006      	beq.n	8006996 <tcp_slowtmr+0x62e>
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <tcp_slowtmr+0x664>)
 800698a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800698e:	4915      	ldr	r1, [pc, #84]	; (80069e4 <tcp_slowtmr+0x67c>)
 8006990:	4810      	ldr	r0, [pc, #64]	; (80069d4 <tcp_slowtmr+0x66c>)
 8006992:	f007 fdfd 	bl	800e590 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	4a10      	ldr	r2, [pc, #64]	; (80069dc <tcp_slowtmr+0x674>)
 800699c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80069a8:	69f8      	ldr	r0, [r7, #28]
 80069aa:	f7fe ff85 	bl	80058b8 <tcp_free>
 80069ae:	e004      	b.n	80069ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1a9      	bne.n	8006914 <tcp_slowtmr+0x5ac>
    }
  }
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bdb0      	pop	{r4, r5, r7, pc}
 80069ca:	bf00      	nop
 80069cc:	0801047c 	.word	0x0801047c
 80069d0:	0801090c 	.word	0x0801090c
 80069d4:	080104c0 	.word	0x080104c0
 80069d8:	20024d08 	.word	0x20024d08
 80069dc:	20024d14 	.word	0x20024d14
 80069e0:	0801093c 	.word	0x0801093c
 80069e4:	08010964 	.word	0x08010964

080069e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80069ee:	4b2d      	ldr	r3, [pc, #180]	; (8006aa4 <tcp_fasttmr+0xbc>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <tcp_fasttmr+0xbc>)
 80069f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80069fa:	4b2b      	ldr	r3, [pc, #172]	; (8006aa8 <tcp_fasttmr+0xc0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006a00:	e048      	b.n	8006a94 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7f9a      	ldrb	r2, [r3, #30]
 8006a06:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <tcp_fasttmr+0xbc>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d03f      	beq.n	8006a8e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006a0e:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <tcp_fasttmr+0xbc>)
 8006a10:	781a      	ldrb	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8b5b      	ldrh	r3, [r3, #26]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8b5b      	ldrh	r3, [r3, #26]
 8006a26:	f043 0302 	orr.w	r3, r3, #2
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f004 f811 	bl	800aa58 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8b5b      	ldrh	r3, [r3, #26]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8b5b      	ldrh	r3, [r3, #26]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8b5b      	ldrh	r3, [r3, #26]
 8006a54:	f023 0308 	bic.w	r3, r3, #8
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff f8be 	bl	8005be0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a72:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <tcp_fasttmr+0xc4>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f819 	bl	8006ab0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <tcp_fasttmr+0xc4>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d000      	beq.n	8006a88 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006a86:	e7b8      	b.n	80069fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	e002      	b.n	8006a94 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1b3      	bne.n	8006a02 <tcp_fasttmr+0x1a>
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000052 	.word	0x20000052
 8006aa8:	20024d04 	.word	0x20024d04
 8006aac:	20024d00 	.word	0x20024d00

08006ab0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <tcp_process_refused_data+0x22>
 8006abe:	4b38      	ldr	r3, [pc, #224]	; (8006ba0 <tcp_process_refused_data+0xf0>)
 8006ac0:	f240 6209 	movw	r2, #1545	; 0x609
 8006ac4:	4937      	ldr	r1, [pc, #220]	; (8006ba4 <tcp_process_refused_data+0xf4>)
 8006ac6:	4838      	ldr	r0, [pc, #224]	; (8006ba8 <tcp_process_refused_data+0xf8>)
 8006ac8:	f007 fd62 	bl	800e590 <iprintf>
 8006acc:	f06f 030f 	mvn.w	r3, #15
 8006ad0:	e061      	b.n	8006b96 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad6:	7b5b      	ldrb	r3, [r3, #13]
 8006ad8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ade:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <tcp_process_refused_data+0x58>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6918      	ldr	r0, [r3, #16]
 8006afa:	2300      	movs	r3, #0
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	47a0      	blx	r4
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	e007      	b.n	8006b18 <tcp_process_refused_data+0x68>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	6879      	ldr	r1, [r7, #4]
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f000 f8c4 	bl	8006c9c <tcp_recv_null>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d12b      	bne.n	8006b78 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d034      	beq.n	8006b94 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2e:	f640 0242 	movw	r2, #2114	; 0x842
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d005      	beq.n	8006b42 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <tcp_process_refused_data+0xb4>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6918      	ldr	r0, [r3, #16]
 8006b56:	2300      	movs	r3, #0
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	47a0      	blx	r4
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
 8006b62:	e001      	b.n	8006b68 <tcp_process_refused_data+0xb8>
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b6c:	f113 0f0d 	cmn.w	r3, #13
 8006b70:	d110      	bne.n	8006b94 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8006b72:	f06f 030c 	mvn.w	r3, #12
 8006b76:	e00e      	b.n	8006b96 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8006b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b7c:	f113 0f0d 	cmn.w	r3, #13
 8006b80:	d102      	bne.n	8006b88 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006b82:	f06f 030c 	mvn.w	r3, #12
 8006b86:	e006      	b.n	8006b96 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006b8e:	f06f 0304 	mvn.w	r3, #4
 8006b92:	e000      	b.n	8006b96 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd90      	pop	{r4, r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	0801047c 	.word	0x0801047c
 8006ba4:	0801098c 	.word	0x0801098c
 8006ba8:	080104c0 	.word	0x080104c0

08006bac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006bb4:	e007      	b.n	8006bc6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f80a 	bl	8006bd6 <tcp_seg_free>
    seg = next;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f4      	bne.n	8006bb6 <tcp_segs_free+0xa>
  }
}
 8006bcc:	bf00      	nop
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7fe fb1f 	bl	8005234 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	2003      	movs	r0, #3
 8006bfa:	f7fd fd0b 	bl	8004614 <memp_free>
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d107      	bne.n	8006c2a <tcp_setprio+0x22>
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <tcp_setprio+0x30>)
 8006c1c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006c20:	4906      	ldr	r1, [pc, #24]	; (8006c3c <tcp_setprio+0x34>)
 8006c22:	4807      	ldr	r0, [pc, #28]	; (8006c40 <tcp_setprio+0x38>)
 8006c24:	f007 fcb4 	bl	800e590 <iprintf>
 8006c28:	e002      	b.n	8006c30 <tcp_setprio+0x28>

  pcb->prio = prio;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	78fa      	ldrb	r2, [r7, #3]
 8006c2e:	755a      	strb	r2, [r3, #21]
}
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	0801047c 	.word	0x0801047c
 8006c3c:	080109b4 	.word	0x080109b4
 8006c40:	080104c0 	.word	0x080104c0

08006c44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <tcp_seg_copy+0x1c>
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <tcp_seg_copy+0x4c>)
 8006c54:	f240 6282 	movw	r2, #1666	; 0x682
 8006c58:	490e      	ldr	r1, [pc, #56]	; (8006c94 <tcp_seg_copy+0x50>)
 8006c5a:	480f      	ldr	r0, [pc, #60]	; (8006c98 <tcp_seg_copy+0x54>)
 8006c5c:	f007 fc98 	bl	800e590 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006c60:	2003      	movs	r0, #3
 8006c62:	f7fd fc8b 	bl	800457c <memp_malloc>
 8006c66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <tcp_seg_copy+0x2e>
    return NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e00a      	b.n	8006c88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006c72:	2210      	movs	r2, #16
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f007 fc5a 	bl	800e530 <memcpy>
  pbuf_ref(cseg->p);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fb77 	bl	8005374 <pbuf_ref>
  return cseg;
 8006c86:	68fb      	ldr	r3, [r7, #12]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	0801047c 	.word	0x0801047c
 8006c94:	080109d0 	.word	0x080109d0
 8006c98:	080104c0 	.word	0x080104c0

08006c9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d109      	bne.n	8006cc4 <tcp_recv_null+0x28>
 8006cb0:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <tcp_recv_null+0x60>)
 8006cb2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006cb6:	4912      	ldr	r1, [pc, #72]	; (8006d00 <tcp_recv_null+0x64>)
 8006cb8:	4812      	ldr	r0, [pc, #72]	; (8006d04 <tcp_recv_null+0x68>)
 8006cba:	f007 fc69 	bl	800e590 <iprintf>
 8006cbe:	f06f 030f 	mvn.w	r3, #15
 8006cc2:	e016      	b.n	8006cf2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	891b      	ldrh	r3, [r3, #8]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68b8      	ldr	r0, [r7, #8]
 8006cd2:	f7ff fab3 	bl	800623c <tcp_recved>
    pbuf_free(p);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fe faac 	bl	8005234 <pbuf_free>
 8006cdc:	e008      	b.n	8006cf0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006ce6:	68b8      	ldr	r0, [r7, #8]
 8006ce8:	f7fe ffe4 	bl	8005cb4 <tcp_close>
 8006cec:	4603      	mov	r3, r0
 8006cee:	e000      	b.n	8006cf2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	0801047c 	.word	0x0801047c
 8006d00:	080109ec 	.word	0x080109ec
 8006d04:	080104c0 	.word	0x080104c0

08006d08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	db01      	blt.n	8006d1e <tcp_kill_prio+0x16>
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	e000      	b.n	8006d20 <tcp_kill_prio+0x18>
 8006d1e:	237f      	movs	r3, #127	; 0x7f
 8006d20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d034      	beq.n	8006d92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <tcp_kill_prio+0x94>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e01f      	b.n	8006d7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	7d5b      	ldrb	r3, [r3, #21]
 8006d42:	7afa      	ldrb	r2, [r7, #11]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d80c      	bhi.n	8006d62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006d4c:	7afa      	ldrb	r2, [r7, #11]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d112      	bne.n	8006d78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006d52:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <tcp_kill_prio+0x98>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d80a      	bhi.n	8006d78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006d62:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <tcp_kill_prio+0x98>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	7d5b      	ldrb	r3, [r3, #21]
 8006d76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1dc      	bne.n	8006d3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f7ff f87c 	bl	8005e88 <tcp_abort>
 8006d90:	e000      	b.n	8006d94 <tcp_kill_prio+0x8c>
    return;
 8006d92:	bf00      	nop
  }
}
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20024d04 	.word	0x20024d04
 8006da0:	20024d08 	.word	0x20024d08

08006da4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d009      	beq.n	8006dc8 <tcp_kill_state+0x24>
 8006db4:	79fb      	ldrb	r3, [r7, #7]
 8006db6:	2b09      	cmp	r3, #9
 8006db8:	d006      	beq.n	8006dc8 <tcp_kill_state+0x24>
 8006dba:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <tcp_kill_state+0x80>)
 8006dbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006dc0:	4919      	ldr	r1, [pc, #100]	; (8006e28 <tcp_kill_state+0x84>)
 8006dc2:	481a      	ldr	r0, [pc, #104]	; (8006e2c <tcp_kill_state+0x88>)
 8006dc4:	f007 fbe4 	bl	800e590 <iprintf>

  inactivity = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006dd0:	4b17      	ldr	r3, [pc, #92]	; (8006e30 <tcp_kill_state+0x8c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	e017      	b.n	8006e08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	7d1b      	ldrb	r3, [r3, #20]
 8006ddc:	79fa      	ldrb	r2, [r7, #7]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d10f      	bne.n	8006e02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <tcp_kill_state+0x90>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d807      	bhi.n	8006e02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <tcp_kill_state+0x90>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e4      	bne.n	8006dd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006e14:	2100      	movs	r1, #0
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f7fe ff78 	bl	8005d0c <tcp_abandon>
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	0801047c 	.word	0x0801047c
 8006e28:	08010a08 	.word	0x08010a08
 8006e2c:	080104c0 	.word	0x080104c0
 8006e30:	20024d04 	.word	0x20024d04
 8006e34:	20024d08 	.word	0x20024d08

08006e38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e46:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <tcp_kill_timewait+0x58>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e012      	b.n	8006e74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <tcp_kill_timewait+0x5c>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d807      	bhi.n	8006e6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <tcp_kill_timewait+0x5c>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e9      	bne.n	8006e4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006e80:	68b8      	ldr	r0, [r7, #8]
 8006e82:	f7ff f801 	bl	8005e88 <tcp_abort>
  }
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20024d14 	.word	0x20024d14
 8006e94:	20024d08 	.word	0x20024d08

08006e98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <tcp_handle_closepend+0x48>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006ea4:	e014      	b.n	8006ed0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8b5b      	ldrh	r3, [r3, #26]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8b5b      	ldrh	r3, [r3, #26]
 8006ebc:	f023 0308 	bic.w	r3, r3, #8
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fe fe8a 	bl	8005be0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e7      	bne.n	8006ea6 <tcp_handle_closepend+0xe>
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20024d04 	.word	0x20024d04

08006ee4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006eee:	2001      	movs	r0, #1
 8006ef0:	f7fd fb44 	bl	800457c <memp_malloc>
 8006ef4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d126      	bne.n	8006f4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006efc:	f7ff ffcc 	bl	8006e98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006f00:	f7ff ff9a 	bl	8006e38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f04:	2001      	movs	r0, #1
 8006f06:	f7fd fb39 	bl	800457c <memp_malloc>
 8006f0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d11b      	bne.n	8006f4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006f12:	2009      	movs	r0, #9
 8006f14:	f7ff ff46 	bl	8006da4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f7fd fb2f 	bl	800457c <memp_malloc>
 8006f1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d111      	bne.n	8006f4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006f26:	2008      	movs	r0, #8
 8006f28:	f7ff ff3c 	bl	8006da4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	f7fd fb25 	bl	800457c <memp_malloc>
 8006f32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fee3 	bl	8006d08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f42:	2001      	movs	r0, #1
 8006f44:	f7fd fb1a 	bl	800457c <memp_malloc>
 8006f48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d03f      	beq.n	8006fd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006f50:	229c      	movs	r2, #156	; 0x9c
 8006f52:	2100      	movs	r1, #0
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f007 fb13 	bl	800e580 <memset>
    pcb->prio = prio;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	79fa      	ldrb	r2, [r7, #7]
 8006f5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006f66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f640 0242 	movw	r2, #2114	; 0x842
 8006f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006f86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2206      	movs	r2, #6
 8006f94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <tcp_alloc+0xf8>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <tcp_alloc+0xfc>)
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006fbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a08      	ldr	r2, [pc, #32]	; (8006fe4 <tcp_alloc+0x100>)
 8006fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a07      	ldr	r2, [pc, #28]	; (8006fe8 <tcp_alloc+0x104>)
 8006fcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20024d08 	.word	0x20024d08
 8006fe0:	20000052 	.word	0x20000052
 8006fe4:	08006c9d 	.word	0x08006c9d
 8006fe8:	006ddd00 	.word	0x006ddd00

08006fec <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006ff0:	2040      	movs	r0, #64	; 0x40
 8006ff2:	f7ff ff77 	bl	8006ee4 <tcp_alloc>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	611a      	str	r2, [r3, #16]
  }
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7d1b      	ldrb	r3, [r3, #20]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d106      	bne.n	8007046 <tcp_recv+0x26>
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <tcp_recv+0x38>)
 800703a:	f240 72df 	movw	r2, #2015	; 0x7df
 800703e:	4907      	ldr	r1, [pc, #28]	; (800705c <tcp_recv+0x3c>)
 8007040:	4807      	ldr	r0, [pc, #28]	; (8007060 <tcp_recv+0x40>)
 8007042:	f007 faa5 	bl	800e590 <iprintf>
    pcb->recv = recv;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	0801047c 	.word	0x0801047c
 800705c:	08010a18 	.word	0x08010a18
 8007060:	080104c0 	.word	0x080104c0

08007064 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00e      	beq.n	8007092 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7d1b      	ldrb	r3, [r3, #20]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d106      	bne.n	800708a <tcp_sent+0x26>
 800707c:	4b07      	ldr	r3, [pc, #28]	; (800709c <tcp_sent+0x38>)
 800707e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007082:	4907      	ldr	r1, [pc, #28]	; (80070a0 <tcp_sent+0x3c>)
 8007084:	4807      	ldr	r0, [pc, #28]	; (80070a4 <tcp_sent+0x40>)
 8007086:	f007 fa83 	bl	800e590 <iprintf>
    pcb->sent = sent;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	0801047c 	.word	0x0801047c
 80070a0:	08010a40 	.word	0x08010a40
 80070a4:	080104c0 	.word	0x080104c0

080070a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00e      	beq.n	80070d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7d1b      	ldrb	r3, [r3, #20]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d106      	bne.n	80070ce <tcp_err+0x26>
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <tcp_err+0x38>)
 80070c2:	f640 020d 	movw	r2, #2061	; 0x80d
 80070c6:	4907      	ldr	r1, [pc, #28]	; (80070e4 <tcp_err+0x3c>)
 80070c8:	4807      	ldr	r0, [pc, #28]	; (80070e8 <tcp_err+0x40>)
 80070ca:	f007 fa61 	bl	800e590 <iprintf>
    pcb->errf = err;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	0801047c 	.word	0x0801047c
 80070e4:	08010a68 	.word	0x08010a68
 80070e8:	080104c0 	.word	0x080104c0

080070ec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <tcp_accept+0x22>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	7d1b      	ldrb	r3, [r3, #20]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d104      	bne.n	800710e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	619a      	str	r2, [r3, #24]
  }
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <tcp_poll+0x24>
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <tcp_poll+0x50>)
 8007132:	f640 023d 	movw	r2, #2109	; 0x83d
 8007136:	490e      	ldr	r1, [pc, #56]	; (8007170 <tcp_poll+0x54>)
 8007138:	480e      	ldr	r0, [pc, #56]	; (8007174 <tcp_poll+0x58>)
 800713a:	f007 fa29 	bl	800e590 <iprintf>
 800713e:	e011      	b.n	8007164 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	7d1b      	ldrb	r3, [r3, #20]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d106      	bne.n	8007156 <tcp_poll+0x3a>
 8007148:	4b08      	ldr	r3, [pc, #32]	; (800716c <tcp_poll+0x50>)
 800714a:	f640 023e 	movw	r2, #2110	; 0x83e
 800714e:	490a      	ldr	r1, [pc, #40]	; (8007178 <tcp_poll+0x5c>)
 8007150:	4808      	ldr	r0, [pc, #32]	; (8007174 <tcp_poll+0x58>)
 8007152:	f007 fa1d 	bl	800e590 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	79fa      	ldrb	r2, [r7, #7]
 8007162:	775a      	strb	r2, [r3, #29]
}
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	0801047c 	.word	0x0801047c
 8007170:	08010a90 	.word	0x08010a90
 8007174:	080104c0 	.word	0x080104c0
 8007178:	08010aa8 	.word	0x08010aa8

0800717c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <tcp_pcb_purge+0x1e>
 800718a:	4b21      	ldr	r3, [pc, #132]	; (8007210 <tcp_pcb_purge+0x94>)
 800718c:	f640 0251 	movw	r2, #2129	; 0x851
 8007190:	4920      	ldr	r1, [pc, #128]	; (8007214 <tcp_pcb_purge+0x98>)
 8007192:	4821      	ldr	r0, [pc, #132]	; (8007218 <tcp_pcb_purge+0x9c>)
 8007194:	f007 f9fc 	bl	800e590 <iprintf>
 8007198:	e037      	b.n	800720a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	7d1b      	ldrb	r3, [r3, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d033      	beq.n	800720a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80071a6:	2b0a      	cmp	r3, #10
 80071a8:	d02f      	beq.n	800720a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d02b      	beq.n	800720a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe f838 	bl	8005234 <pbuf_free>
      pcb->refused_data = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f986 	bl	80074e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff fce1 	bl	8006bac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fcdc 	bl	8006bac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	0801047c 	.word	0x0801047c
 8007214:	08010ac8 	.word	0x08010ac8
 8007218:	080104c0 	.word	0x080104c0

0800721c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <tcp_pcb_remove+0x1e>
 800722c:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <tcp_pcb_remove+0x10c>)
 800722e:	f640 0283 	movw	r2, #2179	; 0x883
 8007232:	493e      	ldr	r1, [pc, #248]	; (800732c <tcp_pcb_remove+0x110>)
 8007234:	483e      	ldr	r0, [pc, #248]	; (8007330 <tcp_pcb_remove+0x114>)
 8007236:	f007 f9ab 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <tcp_pcb_remove+0x32>
 8007240:	4b39      	ldr	r3, [pc, #228]	; (8007328 <tcp_pcb_remove+0x10c>)
 8007242:	f640 0284 	movw	r2, #2180	; 0x884
 8007246:	493b      	ldr	r1, [pc, #236]	; (8007334 <tcp_pcb_remove+0x118>)
 8007248:	4839      	ldr	r0, [pc, #228]	; (8007330 <tcp_pcb_remove+0x114>)
 800724a:	f007 f9a1 	bl	800e590 <iprintf>

  TCP_RMV(pcblist, pcb);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d105      	bne.n	8007264 <tcp_pcb_remove+0x48>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e013      	b.n	800728c <tcp_pcb_remove+0x70>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e00c      	b.n	8007286 <tcp_pcb_remove+0x6a>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d104      	bne.n	8007280 <tcp_pcb_remove+0x64>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	60da      	str	r2, [r3, #12]
 800727e:	e005      	b.n	800728c <tcp_pcb_remove+0x70>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1ef      	bne.n	800726c <tcp_pcb_remove+0x50>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2200      	movs	r2, #0
 8007290:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007292:	6838      	ldr	r0, [r7, #0]
 8007294:	f7ff ff72 	bl	800717c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	7d1b      	ldrb	r3, [r3, #20]
 800729c:	2b0a      	cmp	r3, #10
 800729e:	d013      	beq.n	80072c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d00f      	beq.n	80072c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	8b5b      	ldrh	r3, [r3, #26]
 80072ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d009      	beq.n	80072c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	8b5b      	ldrh	r3, [r3, #26]
 80072b8:	f043 0302 	orr.w	r3, r3, #2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80072c2:	6838      	ldr	r0, [r7, #0]
 80072c4:	f003 fbc8 	bl	800aa58 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	7d1b      	ldrb	r3, [r3, #20]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d020      	beq.n	8007312 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <tcp_pcb_remove+0xca>
 80072d8:	4b13      	ldr	r3, [pc, #76]	; (8007328 <tcp_pcb_remove+0x10c>)
 80072da:	f640 0293 	movw	r2, #2195	; 0x893
 80072de:	4916      	ldr	r1, [pc, #88]	; (8007338 <tcp_pcb_remove+0x11c>)
 80072e0:	4813      	ldr	r0, [pc, #76]	; (8007330 <tcp_pcb_remove+0x114>)
 80072e2:	f007 f955 	bl	800e590 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d006      	beq.n	80072fc <tcp_pcb_remove+0xe0>
 80072ee:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <tcp_pcb_remove+0x10c>)
 80072f0:	f640 0294 	movw	r2, #2196	; 0x894
 80072f4:	4911      	ldr	r1, [pc, #68]	; (800733c <tcp_pcb_remove+0x120>)
 80072f6:	480e      	ldr	r0, [pc, #56]	; (8007330 <tcp_pcb_remove+0x114>)
 80072f8:	f007 f94a 	bl	800e590 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <tcp_pcb_remove+0xf6>
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <tcp_pcb_remove+0x10c>)
 8007306:	f640 0296 	movw	r2, #2198	; 0x896
 800730a:	490d      	ldr	r1, [pc, #52]	; (8007340 <tcp_pcb_remove+0x124>)
 800730c:	4808      	ldr	r0, [pc, #32]	; (8007330 <tcp_pcb_remove+0x114>)
 800730e:	f007 f93f 	bl	800e590 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2200      	movs	r2, #0
 8007316:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	0801047c 	.word	0x0801047c
 800732c:	08010ae4 	.word	0x08010ae4
 8007330:	080104c0 	.word	0x080104c0
 8007334:	08010b00 	.word	0x08010b00
 8007338:	08010b20 	.word	0x08010b20
 800733c:	08010b38 	.word	0x08010b38
 8007340:	08010b54 	.word	0x08010b54

08007344 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <tcp_next_iss+0x1c>
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <tcp_next_iss+0x38>)
 8007354:	f640 02af 	movw	r2, #2223	; 0x8af
 8007358:	4909      	ldr	r1, [pc, #36]	; (8007380 <tcp_next_iss+0x3c>)
 800735a:	480a      	ldr	r0, [pc, #40]	; (8007384 <tcp_next_iss+0x40>)
 800735c:	f007 f918 	bl	800e590 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007360:	4b09      	ldr	r3, [pc, #36]	; (8007388 <tcp_next_iss+0x44>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4b09      	ldr	r3, [pc, #36]	; (800738c <tcp_next_iss+0x48>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4413      	add	r3, r2
 800736a:	4a07      	ldr	r2, [pc, #28]	; (8007388 <tcp_next_iss+0x44>)
 800736c:	6013      	str	r3, [r2, #0]
  return iss;
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <tcp_next_iss+0x44>)
 8007370:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	0801047c 	.word	0x0801047c
 8007380:	08010b6c 	.word	0x08010b6c
 8007384:	080104c0 	.word	0x080104c0
 8007388:	1000000c 	.word	0x1000000c
 800738c:	20024d08 	.word	0x20024d08

08007390 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <tcp_eff_send_mss_netif+0x22>
 80073a4:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <tcp_eff_send_mss_netif+0x68>)
 80073a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80073aa:	4914      	ldr	r1, [pc, #80]	; (80073fc <tcp_eff_send_mss_netif+0x6c>)
 80073ac:	4814      	ldr	r0, [pc, #80]	; (8007400 <tcp_eff_send_mss_netif+0x70>)
 80073ae:	f007 f8ef 	bl	800e590 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80073b8:	89fb      	ldrh	r3, [r7, #14]
 80073ba:	e019      	b.n	80073f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80073c2:	8afb      	ldrh	r3, [r7, #22]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80073c8:	2328      	movs	r3, #40	; 0x28
 80073ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80073cc:	8afa      	ldrh	r2, [r7, #22]
 80073ce:	8abb      	ldrh	r3, [r7, #20]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d904      	bls.n	80073de <tcp_eff_send_mss_netif+0x4e>
 80073d4:	8afa      	ldrh	r2, [r7, #22]
 80073d6:	8abb      	ldrh	r3, [r7, #20]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	b29b      	uxth	r3, r3
 80073dc:	e000      	b.n	80073e0 <tcp_eff_send_mss_netif+0x50>
 80073de:	2300      	movs	r3, #0
 80073e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80073e2:	8a7a      	ldrh	r2, [r7, #18]
 80073e4:	89fb      	ldrh	r3, [r7, #14]
 80073e6:	4293      	cmp	r3, r2
 80073e8:	bf28      	it	cs
 80073ea:	4613      	movcs	r3, r2
 80073ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80073ee:	89fb      	ldrh	r3, [r7, #14]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	0801047c 	.word	0x0801047c
 80073fc:	08010b88 	.word	0x08010b88
 8007400:	080104c0 	.word	0x080104c0

08007404 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d119      	bne.n	800744c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800741a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800741e:	4910      	ldr	r1, [pc, #64]	; (8007460 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007420:	4810      	ldr	r0, [pc, #64]	; (8007464 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007422:	f007 f8b5 	bl	800e590 <iprintf>

  while (pcb != NULL) {
 8007426:	e011      	b.n	800744c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d108      	bne.n	8007446 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7fe fd24 	bl	8005e88 <tcp_abort>
      pcb = next;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	e002      	b.n	800744c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1ea      	bne.n	8007428 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	0801047c 	.word	0x0801047c
 8007460:	08010bb0 	.word	0x08010bb0
 8007464:	080104c0 	.word	0x080104c0

08007468 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d02a      	beq.n	80074ce <tcp_netif_ip_addr_changed+0x66>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d026      	beq.n	80074ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007480:	4b15      	ldr	r3, [pc, #84]	; (80074d8 <tcp_netif_ip_addr_changed+0x70>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff ffbc 	bl	8007404 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800748c:	4b13      	ldr	r3, [pc, #76]	; (80074dc <tcp_netif_ip_addr_changed+0x74>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff ffb6 	bl	8007404 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d017      	beq.n	80074ce <tcp_netif_ip_addr_changed+0x66>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d013      	beq.n	80074ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074a6:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <tcp_netif_ip_addr_changed+0x78>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e00c      	b.n	80074c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d103      	bne.n	80074c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1ef      	bne.n	80074ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20024d04 	.word	0x20024d04
 80074dc:	20024d10 	.word	0x20024d10
 80074e0:	20024d0c 	.word	0x20024d0c

080074e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d007      	beq.n	8007504 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff fb57 	bl	8006bac <tcp_segs_free>
    pcb->ooseq = NULL;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b08d      	sub	sp, #52	; 0x34
 8007510:	af04      	add	r7, sp, #16
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d105      	bne.n	8007528 <tcp_input+0x1c>
 800751c:	4b9b      	ldr	r3, [pc, #620]	; (800778c <tcp_input+0x280>)
 800751e:	2283      	movs	r2, #131	; 0x83
 8007520:	499b      	ldr	r1, [pc, #620]	; (8007790 <tcp_input+0x284>)
 8007522:	489c      	ldr	r0, [pc, #624]	; (8007794 <tcp_input+0x288>)
 8007524:	f007 f834 	bl	800e590 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	4a9a      	ldr	r2, [pc, #616]	; (8007798 <tcp_input+0x28c>)
 800752e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	895b      	ldrh	r3, [r3, #10]
 8007534:	2b13      	cmp	r3, #19
 8007536:	f240 83c5 	bls.w	8007cc4 <tcp_input+0x7b8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800753a:	4b98      	ldr	r3, [pc, #608]	; (800779c <tcp_input+0x290>)
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	4a97      	ldr	r2, [pc, #604]	; (800779c <tcp_input+0x290>)
 8007540:	6812      	ldr	r2, [r2, #0]
 8007542:	4611      	mov	r1, r2
 8007544:	4618      	mov	r0, r3
 8007546:	f006 f871 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 83bb 	bne.w	8007cc8 <tcp_input+0x7bc>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007552:	4b92      	ldr	r3, [pc, #584]	; (800779c <tcp_input+0x290>)
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800755a:	2be0      	cmp	r3, #224	; 0xe0
 800755c:	f000 83b4 	beq.w	8007cc8 <tcp_input+0x7bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007560:	4b8d      	ldr	r3, [pc, #564]	; (8007798 <tcp_input+0x28c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	899b      	ldrh	r3, [r3, #12]
 8007566:	b29b      	uxth	r3, r3
 8007568:	4618      	mov	r0, r3
 800756a:	f7fc fbc9 	bl	8003d00 <lwip_htons>
 800756e:	4603      	mov	r3, r0
 8007570:	0b1b      	lsrs	r3, r3, #12
 8007572:	b29b      	uxth	r3, r3
 8007574:	b2db      	uxtb	r3, r3
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800757a:	7cbb      	ldrb	r3, [r7, #18]
 800757c:	2b13      	cmp	r3, #19
 800757e:	f240 83a5 	bls.w	8007ccc <tcp_input+0x7c0>
 8007582:	7cbb      	ldrb	r3, [r7, #18]
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	891b      	ldrh	r3, [r3, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	f200 839e 	bhi.w	8007ccc <tcp_input+0x7c0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007590:	7cbb      	ldrb	r3, [r7, #18]
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b14      	subs	r3, #20
 8007596:	b29a      	uxth	r2, r3
 8007598:	4b81      	ldr	r3, [pc, #516]	; (80077a0 <tcp_input+0x294>)
 800759a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800759c:	4b81      	ldr	r3, [pc, #516]	; (80077a4 <tcp_input+0x298>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	895a      	ldrh	r2, [r3, #10]
 80075a6:	7cbb      	ldrb	r3, [r7, #18]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d309      	bcc.n	80075c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80075ae:	4b7c      	ldr	r3, [pc, #496]	; (80077a0 <tcp_input+0x294>)
 80075b0:	881a      	ldrh	r2, [r3, #0]
 80075b2:	4b7d      	ldr	r3, [pc, #500]	; (80077a8 <tcp_input+0x29c>)
 80075b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80075b6:	7cbb      	ldrb	r3, [r7, #18]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fd fdb4 	bl	8005128 <pbuf_remove_header>
 80075c0:	e04e      	b.n	8007660 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <tcp_input+0xca>
 80075ca:	4b70      	ldr	r3, [pc, #448]	; (800778c <tcp_input+0x280>)
 80075cc:	22c2      	movs	r2, #194	; 0xc2
 80075ce:	4977      	ldr	r1, [pc, #476]	; (80077ac <tcp_input+0x2a0>)
 80075d0:	4870      	ldr	r0, [pc, #448]	; (8007794 <tcp_input+0x288>)
 80075d2:	f006 ffdd 	bl	800e590 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80075d6:	2114      	movs	r1, #20
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fd fda5 	bl	8005128 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	895a      	ldrh	r2, [r3, #10]
 80075e2:	4b71      	ldr	r3, [pc, #452]	; (80077a8 <tcp_input+0x29c>)
 80075e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80075e6:	4b6e      	ldr	r3, [pc, #440]	; (80077a0 <tcp_input+0x294>)
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	4b6f      	ldr	r3, [pc, #444]	; (80077a8 <tcp_input+0x29c>)
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80075f2:	4b6d      	ldr	r3, [pc, #436]	; (80077a8 <tcp_input+0x29c>)
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fd fd95 	bl	8005128 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	895b      	ldrh	r3, [r3, #10]
 8007604:	8a3a      	ldrh	r2, [r7, #16]
 8007606:	429a      	cmp	r2, r3
 8007608:	f200 8362 	bhi.w	8007cd0 <tcp_input+0x7c4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4a64      	ldr	r2, [pc, #400]	; (80077a4 <tcp_input+0x298>)
 8007614:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	8a3a      	ldrh	r2, [r7, #16]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f7fd fd82 	bl	8005128 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	891a      	ldrh	r2, [r3, #8]
 8007628:	8a3b      	ldrh	r3, [r7, #16]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	b29a      	uxth	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	895b      	ldrh	r3, [r3, #10]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <tcp_input+0x13a>
 800763a:	4b54      	ldr	r3, [pc, #336]	; (800778c <tcp_input+0x280>)
 800763c:	22df      	movs	r2, #223	; 0xdf
 800763e:	495c      	ldr	r1, [pc, #368]	; (80077b0 <tcp_input+0x2a4>)
 8007640:	4854      	ldr	r0, [pc, #336]	; (8007794 <tcp_input+0x288>)
 8007642:	f006 ffa5 	bl	800e590 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	891a      	ldrh	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	891b      	ldrh	r3, [r3, #8]
 8007650:	429a      	cmp	r2, r3
 8007652:	d005      	beq.n	8007660 <tcp_input+0x154>
 8007654:	4b4d      	ldr	r3, [pc, #308]	; (800778c <tcp_input+0x280>)
 8007656:	22e0      	movs	r2, #224	; 0xe0
 8007658:	4956      	ldr	r1, [pc, #344]	; (80077b4 <tcp_input+0x2a8>)
 800765a:	484e      	ldr	r0, [pc, #312]	; (8007794 <tcp_input+0x288>)
 800765c:	f006 ff98 	bl	800e590 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007660:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <tcp_input+0x28c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	4a4b      	ldr	r2, [pc, #300]	; (8007798 <tcp_input+0x28c>)
 800766a:	6814      	ldr	r4, [r2, #0]
 800766c:	4618      	mov	r0, r3
 800766e:	f7fc fb47 	bl	8003d00 <lwip_htons>
 8007672:	4603      	mov	r3, r0
 8007674:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007676:	4b48      	ldr	r3, [pc, #288]	; (8007798 <tcp_input+0x28c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	885b      	ldrh	r3, [r3, #2]
 800767c:	b29b      	uxth	r3, r3
 800767e:	4a46      	ldr	r2, [pc, #280]	; (8007798 <tcp_input+0x28c>)
 8007680:	6814      	ldr	r4, [r2, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fc fb3c 	bl	8003d00 <lwip_htons>
 8007688:	4603      	mov	r3, r0
 800768a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800768c:	4b42      	ldr	r3, [pc, #264]	; (8007798 <tcp_input+0x28c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4a41      	ldr	r2, [pc, #260]	; (8007798 <tcp_input+0x28c>)
 8007694:	6814      	ldr	r4, [r2, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7fc fb47 	bl	8003d2a <lwip_htonl>
 800769c:	4603      	mov	r3, r0
 800769e:	6063      	str	r3, [r4, #4]
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	4a45      	ldr	r2, [pc, #276]	; (80077b8 <tcp_input+0x2ac>)
 80076a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80076a6:	4b3c      	ldr	r3, [pc, #240]	; (8007798 <tcp_input+0x28c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	4a3a      	ldr	r2, [pc, #232]	; (8007798 <tcp_input+0x28c>)
 80076ae:	6814      	ldr	r4, [r2, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fc fb3a 	bl	8003d2a <lwip_htonl>
 80076b6:	4603      	mov	r3, r0
 80076b8:	60a3      	str	r3, [r4, #8]
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	4a3f      	ldr	r2, [pc, #252]	; (80077bc <tcp_input+0x2b0>)
 80076be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80076c0:	4b35      	ldr	r3, [pc, #212]	; (8007798 <tcp_input+0x28c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	89db      	ldrh	r3, [r3, #14]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	4a33      	ldr	r2, [pc, #204]	; (8007798 <tcp_input+0x28c>)
 80076ca:	6814      	ldr	r4, [r2, #0]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fc fb17 	bl	8003d00 <lwip_htons>
 80076d2:	4603      	mov	r3, r0
 80076d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80076d6:	4b30      	ldr	r3, [pc, #192]	; (8007798 <tcp_input+0x28c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	899b      	ldrh	r3, [r3, #12]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fc fb0e 	bl	8003d00 <lwip_htons>
 80076e4:	4603      	mov	r3, r0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	4b34      	ldr	r3, [pc, #208]	; (80077c0 <tcp_input+0x2b4>)
 80076f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	891a      	ldrh	r2, [r3, #8]
 80076f6:	4b33      	ldr	r3, [pc, #204]	; (80077c4 <tcp_input+0x2b8>)
 80076f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80076fa:	4b31      	ldr	r3, [pc, #196]	; (80077c0 <tcp_input+0x2b4>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00c      	beq.n	8007720 <tcp_input+0x214>
    tcplen++;
 8007706:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <tcp_input+0x2b8>)
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <tcp_input+0x2b8>)
 8007710:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	891a      	ldrh	r2, [r3, #8]
 8007716:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <tcp_input+0x2b8>)
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	429a      	cmp	r2, r3
 800771c:	f200 82da 	bhi.w	8007cd4 <tcp_input+0x7c8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007724:	4b28      	ldr	r3, [pc, #160]	; (80077c8 <tcp_input+0x2bc>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	e09d      	b.n	8007868 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	7d1b      	ldrb	r3, [r3, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d105      	bne.n	8007740 <tcp_input+0x234>
 8007734:	4b15      	ldr	r3, [pc, #84]	; (800778c <tcp_input+0x280>)
 8007736:	22fb      	movs	r2, #251	; 0xfb
 8007738:	4924      	ldr	r1, [pc, #144]	; (80077cc <tcp_input+0x2c0>)
 800773a:	4816      	ldr	r0, [pc, #88]	; (8007794 <tcp_input+0x288>)
 800773c:	f006 ff28 	bl	800e590 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	7d1b      	ldrb	r3, [r3, #20]
 8007744:	2b0a      	cmp	r3, #10
 8007746:	d105      	bne.n	8007754 <tcp_input+0x248>
 8007748:	4b10      	ldr	r3, [pc, #64]	; (800778c <tcp_input+0x280>)
 800774a:	22fc      	movs	r2, #252	; 0xfc
 800774c:	4920      	ldr	r1, [pc, #128]	; (80077d0 <tcp_input+0x2c4>)
 800774e:	4811      	ldr	r0, [pc, #68]	; (8007794 <tcp_input+0x288>)
 8007750:	f006 ff1e 	bl	800e590 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	7d1b      	ldrb	r3, [r3, #20]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d105      	bne.n	8007768 <tcp_input+0x25c>
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <tcp_input+0x280>)
 800775e:	22fd      	movs	r2, #253	; 0xfd
 8007760:	491c      	ldr	r1, [pc, #112]	; (80077d4 <tcp_input+0x2c8>)
 8007762:	480c      	ldr	r0, [pc, #48]	; (8007794 <tcp_input+0x288>)
 8007764:	f006 ff14 	bl	800e590 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	7a1b      	ldrb	r3, [r3, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d033      	beq.n	80077d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	7a1a      	ldrb	r2, [r3, #8]
 8007774:	4b09      	ldr	r3, [pc, #36]	; (800779c <tcp_input+0x290>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800777c:	3301      	adds	r3, #1
 800777e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007780:	429a      	cmp	r2, r3
 8007782:	d029      	beq.n	80077d8 <tcp_input+0x2cc>
      prev = pcb;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	61bb      	str	r3, [r7, #24]
      continue;
 8007788:	e06b      	b.n	8007862 <tcp_input+0x356>
 800778a:	bf00      	nop
 800778c:	08010be4 	.word	0x08010be4
 8007790:	08010c18 	.word	0x08010c18
 8007794:	08010c30 	.word	0x08010c30
 8007798:	20000064 	.word	0x20000064
 800779c:	200032d0 	.word	0x200032d0
 80077a0:	20000068 	.word	0x20000068
 80077a4:	2000006c 	.word	0x2000006c
 80077a8:	2000006a 	.word	0x2000006a
 80077ac:	08010c58 	.word	0x08010c58
 80077b0:	08010c68 	.word	0x08010c68
 80077b4:	08010c74 	.word	0x08010c74
 80077b8:	20000074 	.word	0x20000074
 80077bc:	20000078 	.word	0x20000078
 80077c0:	20000080 	.word	0x20000080
 80077c4:	2000007e 	.word	0x2000007e
 80077c8:	20024d04 	.word	0x20024d04
 80077cc:	08010c94 	.word	0x08010c94
 80077d0:	08010cbc 	.word	0x08010cbc
 80077d4:	08010ce8 	.word	0x08010ce8
    }

    if (pcb->remote_port == tcphdr->src &&
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	8b1a      	ldrh	r2, [r3, #24]
 80077dc:	4b94      	ldr	r3, [pc, #592]	; (8007a30 <tcp_input+0x524>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d13a      	bne.n	800785e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	8ada      	ldrh	r2, [r3, #22]
 80077ec:	4b90      	ldr	r3, [pc, #576]	; (8007a30 <tcp_input+0x524>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	885b      	ldrh	r3, [r3, #2]
 80077f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d132      	bne.n	800785e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	4b8d      	ldr	r3, [pc, #564]	; (8007a34 <tcp_input+0x528>)
 80077fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007800:	429a      	cmp	r2, r3
 8007802:	d12c      	bne.n	800785e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4b8a      	ldr	r3, [pc, #552]	; (8007a34 <tcp_input+0x528>)
 800780a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800780c:	429a      	cmp	r2, r3
 800780e:	d126      	bne.n	800785e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	429a      	cmp	r2, r3
 8007818:	d106      	bne.n	8007828 <tcp_input+0x31c>
 800781a:	4b87      	ldr	r3, [pc, #540]	; (8007a38 <tcp_input+0x52c>)
 800781c:	f240 120d 	movw	r2, #269	; 0x10d
 8007820:	4986      	ldr	r1, [pc, #536]	; (8007a3c <tcp_input+0x530>)
 8007822:	4887      	ldr	r0, [pc, #540]	; (8007a40 <tcp_input+0x534>)
 8007824:	f006 feb4 	bl	800e590 <iprintf>
      if (prev != NULL) {
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <tcp_input+0x338>
        prev->next = pcb->next;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007836:	4b83      	ldr	r3, [pc, #524]	; (8007a44 <tcp_input+0x538>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800783e:	4a81      	ldr	r2, [pc, #516]	; (8007a44 <tcp_input+0x538>)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	429a      	cmp	r2, r3
 800784c:	d111      	bne.n	8007872 <tcp_input+0x366>
 800784e:	4b7a      	ldr	r3, [pc, #488]	; (8007a38 <tcp_input+0x52c>)
 8007850:	f240 1215 	movw	r2, #277	; 0x115
 8007854:	497c      	ldr	r1, [pc, #496]	; (8007a48 <tcp_input+0x53c>)
 8007856:	487a      	ldr	r0, [pc, #488]	; (8007a40 <tcp_input+0x534>)
 8007858:	f006 fe9a 	bl	800e590 <iprintf>
      break;
 800785c:	e009      	b.n	8007872 <tcp_input+0x366>
    }
    prev = pcb;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f47f af5e 	bne.w	800772c <tcp_input+0x220>
 8007870:	e000      	b.n	8007874 <tcp_input+0x368>
      break;
 8007872:	bf00      	nop
  }

  if (pcb == NULL) {
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f040 8095 	bne.w	80079a6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800787c:	4b73      	ldr	r3, [pc, #460]	; (8007a4c <tcp_input+0x540>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	61fb      	str	r3, [r7, #28]
 8007882:	e03f      	b.n	8007904 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	7d1b      	ldrb	r3, [r3, #20]
 8007888:	2b0a      	cmp	r3, #10
 800788a:	d006      	beq.n	800789a <tcp_input+0x38e>
 800788c:	4b6a      	ldr	r3, [pc, #424]	; (8007a38 <tcp_input+0x52c>)
 800788e:	f240 121f 	movw	r2, #287	; 0x11f
 8007892:	496f      	ldr	r1, [pc, #444]	; (8007a50 <tcp_input+0x544>)
 8007894:	486a      	ldr	r0, [pc, #424]	; (8007a40 <tcp_input+0x534>)
 8007896:	f006 fe7b 	bl	800e590 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	7a1b      	ldrb	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	7a1a      	ldrb	r2, [r3, #8]
 80078a6:	4b63      	ldr	r3, [pc, #396]	; (8007a34 <tcp_input+0x528>)
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078ae:	3301      	adds	r3, #1
 80078b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d122      	bne.n	80078fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	8b1a      	ldrh	r2, [r3, #24]
 80078ba:	4b5d      	ldr	r3, [pc, #372]	; (8007a30 <tcp_input+0x524>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d11b      	bne.n	80078fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	8ada      	ldrh	r2, [r3, #22]
 80078ca:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <tcp_input+0x524>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	885b      	ldrh	r3, [r3, #2]
 80078d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d113      	bne.n	80078fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	4b56      	ldr	r3, [pc, #344]	; (8007a34 <tcp_input+0x528>)
 80078dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80078de:	429a      	cmp	r2, r3
 80078e0:	d10d      	bne.n	80078fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <tcp_input+0x528>)
 80078e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d107      	bne.n	80078fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80078ee:	69f8      	ldr	r0, [r7, #28]
 80078f0:	f000 fb56 	bl	8007fa0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fd fc9d 	bl	8005234 <pbuf_free>
        return;
 80078fa:	e1f1      	b.n	8007ce0 <tcp_input+0x7d4>
        continue;
 80078fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	61fb      	str	r3, [r7, #28]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1bc      	bne.n	8007884 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800790e:	4b51      	ldr	r3, [pc, #324]	; (8007a54 <tcp_input+0x548>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	e02a      	b.n	800796c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	7a1b      	ldrb	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	7a1a      	ldrb	r2, [r3, #8]
 8007922:	4b44      	ldr	r3, [pc, #272]	; (8007a34 <tcp_input+0x528>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800792a:	3301      	adds	r3, #1
 800792c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800792e:	429a      	cmp	r2, r3
 8007930:	d002      	beq.n	8007938 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	61bb      	str	r3, [r7, #24]
        continue;
 8007936:	e016      	b.n	8007966 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	8ada      	ldrh	r2, [r3, #22]
 800793c:	4b3c      	ldr	r3, [pc, #240]	; (8007a30 <tcp_input+0x524>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	885b      	ldrh	r3, [r3, #2]
 8007942:	b29b      	uxth	r3, r3
 8007944:	429a      	cmp	r2, r3
 8007946:	d10c      	bne.n	8007962 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <tcp_input+0x528>)
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	429a      	cmp	r2, r3
 8007952:	d00f      	beq.n	8007974 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <tcp_input+0x46a>
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1d1      	bne.n	8007916 <tcp_input+0x40a>
 8007972:	e000      	b.n	8007976 <tcp_input+0x46a>
            break;
 8007974:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d014      	beq.n	80079a6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800798a:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <tcp_input+0x548>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007992:	4a30      	ldr	r2, [pc, #192]	; (8007a54 <tcp_input+0x548>)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007998:	6978      	ldr	r0, [r7, #20]
 800799a:	f000 fa03 	bl	8007da4 <tcp_listen_input>
      }
      pbuf_free(p);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fd fc48 	bl	8005234 <pbuf_free>
      return;
 80079a4:	e19c      	b.n	8007ce0 <tcp_input+0x7d4>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8161 	beq.w	8007c70 <tcp_input+0x764>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80079ae:	4b2a      	ldr	r3, [pc, #168]	; (8007a58 <tcp_input+0x54c>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	891a      	ldrh	r2, [r3, #8]
 80079b8:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <tcp_input+0x54c>)
 80079ba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80079bc:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <tcp_input+0x54c>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80079c2:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <tcp_input+0x524>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a24      	ldr	r2, [pc, #144]	; (8007a58 <tcp_input+0x54c>)
 80079c8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <tcp_input+0x550>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80079d0:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <tcp_input+0x554>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80079d6:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <tcp_input+0x558>)
 80079d8:	2200      	movs	r2, #0
 80079da:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80079dc:	4b22      	ldr	r3, [pc, #136]	; (8007a68 <tcp_input+0x55c>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	7b5b      	ldrb	r3, [r3, #13]
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d038      	beq.n	8007a70 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80079fe:	69f8      	ldr	r0, [r7, #28]
 8007a00:	f7ff f856 	bl	8006ab0 <tcp_process_refused_data>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f113 0f0d 	cmn.w	r3, #13
 8007a0a:	d007      	beq.n	8007a1c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02d      	beq.n	8007a70 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <tcp_input+0x560>)
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d029      	beq.n	8007a70 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 8105 	bne.w	8007c30 <tcp_input+0x724>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007a26:	69f8      	ldr	r0, [r7, #28]
 8007a28:	f003 fe1c 	bl	800b664 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007a2c:	e100      	b.n	8007c30 <tcp_input+0x724>
 8007a2e:	bf00      	nop
 8007a30:	20000064 	.word	0x20000064
 8007a34:	200032d0 	.word	0x200032d0
 8007a38:	08010be4 	.word	0x08010be4
 8007a3c:	08010d10 	.word	0x08010d10
 8007a40:	08010c30 	.word	0x08010c30
 8007a44:	20024d04 	.word	0x20024d04
 8007a48:	08010d3c 	.word	0x08010d3c
 8007a4c:	20024d14 	.word	0x20024d14
 8007a50:	08010d68 	.word	0x08010d68
 8007a54:	20024d0c 	.word	0x20024d0c
 8007a58:	20000054 	.word	0x20000054
 8007a5c:	20000084 	.word	0x20000084
 8007a60:	20000081 	.word	0x20000081
 8007a64:	2000007c 	.word	0x2000007c
 8007a68:	20000080 	.word	0x20000080
 8007a6c:	2000007e 	.word	0x2000007e
      }
    }
    tcp_input_pcb = pcb;
 8007a70:	4a9d      	ldr	r2, [pc, #628]	; (8007ce8 <tcp_input+0x7dc>)
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007a76:	69f8      	ldr	r0, [r7, #28]
 8007a78:	f000 fb0c 	bl	8008094 <tcp_process>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007a80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a84:	f113 0f0d 	cmn.w	r3, #13
 8007a88:	f000 80d4 	beq.w	8007c34 <tcp_input+0x728>
      if (recv_flags & TF_RESET) {
 8007a8c:	4b97      	ldr	r3, [pc, #604]	; (8007cec <tcp_input+0x7e0>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d015      	beq.n	8007ac4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <tcp_input+0x5a8>
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	6912      	ldr	r2, [r2, #16]
 8007aac:	f06f 010d 	mvn.w	r1, #13
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	488e      	ldr	r0, [pc, #568]	; (8007cf0 <tcp_input+0x7e4>)
 8007ab8:	f7ff fbb0 	bl	800721c <tcp_pcb_remove>
        tcp_free(pcb);
 8007abc:	69f8      	ldr	r0, [r7, #28]
 8007abe:	f7fd fefb 	bl	80058b8 <tcp_free>
 8007ac2:	e0c2      	b.n	8007c4a <tcp_input+0x73e>
      } else {
        err = ERR_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007ac8:	4b8a      	ldr	r3, [pc, #552]	; (8007cf4 <tcp_input+0x7e8>)
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01d      	beq.n	8007b0c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007ad0:	4b88      	ldr	r3, [pc, #544]	; (8007cf4 <tcp_input+0x7e8>)
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <tcp_input+0x5ea>
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	6910      	ldr	r0, [r2, #16]
 8007aea:	89fa      	ldrh	r2, [r7, #14]
 8007aec:	69f9      	ldr	r1, [r7, #28]
 8007aee:	4798      	blx	r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	74fb      	strb	r3, [r7, #19]
 8007af4:	e001      	b.n	8007afa <tcp_input+0x5ee>
 8007af6:	2300      	movs	r3, #0
 8007af8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007afa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007afe:	f113 0f0d 	cmn.w	r3, #13
 8007b02:	f000 8099 	beq.w	8007c38 <tcp_input+0x72c>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007b06:	4b7b      	ldr	r3, [pc, #492]	; (8007cf4 <tcp_input+0x7e8>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007b0c:	69f8      	ldr	r0, [r7, #28]
 8007b0e:	f000 f909 	bl	8007d24 <tcp_input_delayed_close>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 8091 	bne.w	8007c3c <tcp_input+0x730>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007b1a:	4b77      	ldr	r3, [pc, #476]	; (8007cf8 <tcp_input+0x7ec>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d041      	beq.n	8007ba6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d006      	beq.n	8007b38 <tcp_input+0x62c>
 8007b2a:	4b74      	ldr	r3, [pc, #464]	; (8007cfc <tcp_input+0x7f0>)
 8007b2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007b30:	4973      	ldr	r1, [pc, #460]	; (8007d00 <tcp_input+0x7f4>)
 8007b32:	4874      	ldr	r0, [pc, #464]	; (8007d04 <tcp_input+0x7f8>)
 8007b34:	f006 fd2c 	bl	800e590 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	8b5b      	ldrh	r3, [r3, #26]
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007b44:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <tcp_input+0x7ec>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fb73 	bl	8005234 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007b4e:	69f8      	ldr	r0, [r7, #28]
 8007b50:	f7fe f99a 	bl	8005e88 <tcp_abort>
            goto aborted;
 8007b54:	e079      	b.n	8007c4a <tcp_input+0x73e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <tcp_input+0x66e>
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	6918      	ldr	r0, [r3, #16]
 8007b6a:	4b63      	ldr	r3, [pc, #396]	; (8007cf8 <tcp_input+0x7ec>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	47a0      	blx	r4
 8007b74:	4603      	mov	r3, r0
 8007b76:	74fb      	strb	r3, [r7, #19]
 8007b78:	e008      	b.n	8007b8c <tcp_input+0x680>
 8007b7a:	4b5f      	ldr	r3, [pc, #380]	; (8007cf8 <tcp_input+0x7ec>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	69f9      	ldr	r1, [r7, #28]
 8007b82:	2000      	movs	r0, #0
 8007b84:	f7ff f88a 	bl	8006c9c <tcp_recv_null>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007b8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b90:	f113 0f0d 	cmn.w	r3, #13
 8007b94:	d054      	beq.n	8007c40 <tcp_input+0x734>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007b96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007b9e:	4b56      	ldr	r3, [pc, #344]	; (8007cf8 <tcp_input+0x7ec>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007ba6:	4b51      	ldr	r3, [pc, #324]	; (8007cec <tcp_input+0x7e0>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d031      	beq.n	8007c16 <tcp_input+0x70a>
          if (pcb->refused_data != NULL) {
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bbe:	7b5a      	ldrb	r2, [r3, #13]
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bc4:	f042 0220 	orr.w	r2, r2, #32
 8007bc8:	b2d2      	uxtb	r2, r2
 8007bca:	735a      	strb	r2, [r3, #13]
 8007bcc:	e023      	b.n	8007c16 <tcp_input+0x70a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd2:	f640 0242 	movw	r2, #2114	; 0x842
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d005      	beq.n	8007be6 <tcp_input+0x6da>
              pcb->rcv_wnd++;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bde:	3301      	adds	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <tcp_input+0x6fc>
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	6918      	ldr	r0, [r3, #16]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	69f9      	ldr	r1, [r7, #28]
 8007c00:	47a0      	blx	r4
 8007c02:	4603      	mov	r3, r0
 8007c04:	74fb      	strb	r3, [r7, #19]
 8007c06:	e001      	b.n	8007c0c <tcp_input+0x700>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007c0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c10:	f113 0f0d 	cmn.w	r3, #13
 8007c14:	d016      	beq.n	8007c44 <tcp_input+0x738>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007c16:	4b34      	ldr	r3, [pc, #208]	; (8007ce8 <tcp_input+0x7dc>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007c1c:	69f8      	ldr	r0, [r7, #28]
 8007c1e:	f000 f881 	bl	8007d24 <tcp_input_delayed_close>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10f      	bne.n	8007c48 <tcp_input+0x73c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007c28:	69f8      	ldr	r0, [r7, #28]
 8007c2a:	f002 ff15 	bl	800aa58 <tcp_output>
 8007c2e:	e00c      	b.n	8007c4a <tcp_input+0x73e>
        goto aborted;
 8007c30:	bf00      	nop
 8007c32:	e00a      	b.n	8007c4a <tcp_input+0x73e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007c34:	bf00      	nop
 8007c36:	e008      	b.n	8007c4a <tcp_input+0x73e>
              goto aborted;
 8007c38:	bf00      	nop
 8007c3a:	e006      	b.n	8007c4a <tcp_input+0x73e>
          goto aborted;
 8007c3c:	bf00      	nop
 8007c3e:	e004      	b.n	8007c4a <tcp_input+0x73e>
            goto aborted;
 8007c40:	bf00      	nop
 8007c42:	e002      	b.n	8007c4a <tcp_input+0x73e>
              goto aborted;
 8007c44:	bf00      	nop
 8007c46:	e000      	b.n	8007c4a <tcp_input+0x73e>
          goto aborted;
 8007c48:	bf00      	nop
    tcp_input_pcb = NULL;
 8007c4a:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <tcp_input+0x7dc>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007c50:	4b29      	ldr	r3, [pc, #164]	; (8007cf8 <tcp_input+0x7ec>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007c56:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <tcp_input+0x7fc>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d03f      	beq.n	8007cde <tcp_input+0x7d2>
      pbuf_free(inseg.p);
 8007c5e:	4b2a      	ldr	r3, [pc, #168]	; (8007d08 <tcp_input+0x7fc>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fd fae6 	bl	8005234 <pbuf_free>
      inseg.p = NULL;
 8007c68:	4b27      	ldr	r3, [pc, #156]	; (8007d08 <tcp_input+0x7fc>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007c6e:	e036      	b.n	8007cde <tcp_input+0x7d2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007c70:	4b26      	ldr	r3, [pc, #152]	; (8007d0c <tcp_input+0x800>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	899b      	ldrh	r3, [r3, #12]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fc f841 	bl	8003d00 <lwip_htons>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d118      	bne.n	8007cbc <tcp_input+0x7b0>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c8a:	4b21      	ldr	r3, [pc, #132]	; (8007d10 <tcp_input+0x804>)
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <tcp_input+0x808>)
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	4b20      	ldr	r3, [pc, #128]	; (8007d18 <tcp_input+0x80c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c9a:	4b1c      	ldr	r3, [pc, #112]	; (8007d0c <tcp_input+0x800>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c9e:	885b      	ldrh	r3, [r3, #2]
 8007ca0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	; (8007d0c <tcp_input+0x800>)
 8007ca4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ca6:	8812      	ldrh	r2, [r2, #0]
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	9202      	str	r2, [sp, #8]
 8007cac:	9301      	str	r3, [sp, #4]
 8007cae:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <tcp_input+0x810>)
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <tcp_input+0x814>)
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f003 fc82 	bl	800b5c0 <tcp_rst>
    pbuf_free(p);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7fd fab9 	bl	8005234 <pbuf_free>
  return;
 8007cc2:	e00c      	b.n	8007cde <tcp_input+0x7d2>
    goto dropped;
 8007cc4:	bf00      	nop
 8007cc6:	e006      	b.n	8007cd6 <tcp_input+0x7ca>
    goto dropped;
 8007cc8:	bf00      	nop
 8007cca:	e004      	b.n	8007cd6 <tcp_input+0x7ca>
    goto dropped;
 8007ccc:	bf00      	nop
 8007cce:	e002      	b.n	8007cd6 <tcp_input+0x7ca>
      goto dropped;
 8007cd0:	bf00      	nop
 8007cd2:	e000      	b.n	8007cd6 <tcp_input+0x7ca>
      goto dropped;
 8007cd4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fd faac 	bl	8005234 <pbuf_free>
 8007cdc:	e000      	b.n	8007ce0 <tcp_input+0x7d4>
  return;
 8007cde:	bf00      	nop
}
 8007ce0:	3724      	adds	r7, #36	; 0x24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd90      	pop	{r4, r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20024d18 	.word	0x20024d18
 8007cec:	20000081 	.word	0x20000081
 8007cf0:	20024d04 	.word	0x20024d04
 8007cf4:	2000007c 	.word	0x2000007c
 8007cf8:	20000084 	.word	0x20000084
 8007cfc:	08010be4 	.word	0x08010be4
 8007d00:	08010d98 	.word	0x08010d98
 8007d04:	08010c30 	.word	0x08010c30
 8007d08:	20000054 	.word	0x20000054
 8007d0c:	20000064 	.word	0x20000064
 8007d10:	20000078 	.word	0x20000078
 8007d14:	2000007e 	.word	0x2000007e
 8007d18:	20000074 	.word	0x20000074
 8007d1c:	200032e0 	.word	0x200032e0
 8007d20:	200032e4 	.word	0x200032e4

08007d24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <tcp_input_delayed_close+0x1c>
 8007d32:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <tcp_input_delayed_close+0x6c>)
 8007d34:	f240 225a 	movw	r2, #602	; 0x25a
 8007d38:	4916      	ldr	r1, [pc, #88]	; (8007d94 <tcp_input_delayed_close+0x70>)
 8007d3a:	4817      	ldr	r0, [pc, #92]	; (8007d98 <tcp_input_delayed_close+0x74>)
 8007d3c:	f006 fc28 	bl	800e590 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <tcp_input_delayed_close+0x78>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01c      	beq.n	8007d86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	8b5b      	ldrh	r3, [r3, #26]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d008      	beq.n	8007d74 <tcp_input_delayed_close+0x50>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6912      	ldr	r2, [r2, #16]
 8007d6c:	f06f 010e 	mvn.w	r1, #14
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	480a      	ldr	r0, [pc, #40]	; (8007da0 <tcp_input_delayed_close+0x7c>)
 8007d78:	f7ff fa50 	bl	800721c <tcp_pcb_remove>
    tcp_free(pcb);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fd fd9b 	bl	80058b8 <tcp_free>
    return 1;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	08010be4 	.word	0x08010be4
 8007d94:	08010db4 	.word	0x08010db4
 8007d98:	08010c30 	.word	0x08010c30
 8007d9c:	20000081 	.word	0x20000081
 8007da0:	20024d04 	.word	0x20024d04

08007da4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007da4:	b590      	push	{r4, r7, lr}
 8007da6:	b08b      	sub	sp, #44	; 0x2c
 8007da8:	af04      	add	r7, sp, #16
 8007daa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007dac:	4b6f      	ldr	r3, [pc, #444]	; (8007f6c <tcp_listen_input+0x1c8>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f040 80d2 	bne.w	8007f5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d106      	bne.n	8007dce <tcp_listen_input+0x2a>
 8007dc0:	4b6b      	ldr	r3, [pc, #428]	; (8007f70 <tcp_listen_input+0x1cc>)
 8007dc2:	f240 2281 	movw	r2, #641	; 0x281
 8007dc6:	496b      	ldr	r1, [pc, #428]	; (8007f74 <tcp_listen_input+0x1d0>)
 8007dc8:	486b      	ldr	r0, [pc, #428]	; (8007f78 <tcp_listen_input+0x1d4>)
 8007dca:	f006 fbe1 	bl	800e590 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007dce:	4b67      	ldr	r3, [pc, #412]	; (8007f6c <tcp_listen_input+0x1c8>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d019      	beq.n	8007e0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dda:	4b68      	ldr	r3, [pc, #416]	; (8007f7c <tcp_listen_input+0x1d8>)
 8007ddc:	6819      	ldr	r1, [r3, #0]
 8007dde:	4b68      	ldr	r3, [pc, #416]	; (8007f80 <tcp_listen_input+0x1dc>)
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	4b67      	ldr	r3, [pc, #412]	; (8007f84 <tcp_listen_input+0x1e0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dea:	4b67      	ldr	r3, [pc, #412]	; (8007f88 <tcp_listen_input+0x1e4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dee:	885b      	ldrh	r3, [r3, #2]
 8007df0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007df2:	4a65      	ldr	r2, [pc, #404]	; (8007f88 <tcp_listen_input+0x1e4>)
 8007df4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007df6:	8812      	ldrh	r2, [r2, #0]
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	9202      	str	r2, [sp, #8]
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	4b63      	ldr	r3, [pc, #396]	; (8007f8c <tcp_listen_input+0x1e8>)
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <tcp_listen_input+0x1ec>)
 8007e04:	4602      	mov	r2, r0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f003 fbda 	bl	800b5c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007e0c:	e0a9      	b.n	8007f62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007e0e:	4b57      	ldr	r3, [pc, #348]	; (8007f6c <tcp_listen_input+0x1c8>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 80a3 	beq.w	8007f62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7d5b      	ldrb	r3, [r3, #21]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff f85f 	bl	8006ee4 <tcp_alloc>
 8007e26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d111      	bne.n	8007e52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <tcp_listen_input+0xa8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6910      	ldr	r0, [r2, #16]
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	2100      	movs	r1, #0
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	73bb      	strb	r3, [r7, #14]
      return;
 8007e4a:	e08b      	b.n	8007f64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007e4c:	23f0      	movs	r3, #240	; 0xf0
 8007e4e:	73bb      	strb	r3, [r7, #14]
      return;
 8007e50:	e088      	b.n	8007f64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007e52:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <tcp_listen_input+0x1f0>)
 8007e54:	695a      	ldr	r2, [r3, #20]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007e5a:	4b4e      	ldr	r3, [pc, #312]	; (8007f94 <tcp_listen_input+0x1f0>)
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8ada      	ldrh	r2, [r3, #22]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007e6a:	4b47      	ldr	r3, [pc, #284]	; (8007f88 <tcp_listen_input+0x1e4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	881b      	ldrh	r3, [r3, #0]
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007e7c:	4b41      	ldr	r3, [pc, #260]	; (8007f84 <tcp_listen_input+0x1e0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007e8e:	6978      	ldr	r0, [r7, #20]
 8007e90:	f7ff fa58 	bl	8007344 <tcp_next_iss>
 8007e94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007eae:	4b35      	ldr	r3, [pc, #212]	; (8007f84 <tcp_listen_input+0x1e0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1e5a      	subs	r2, r3, #1
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	7a5b      	ldrb	r3, [r3, #9]
 8007eca:	f003 030c 	and.w	r3, r3, #12
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7a1a      	ldrb	r2, [r3, #8]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007edc:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <tcp_listen_input+0x1f4>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	60da      	str	r2, [r3, #12]
 8007ee4:	4a2c      	ldr	r2, [pc, #176]	; (8007f98 <tcp_listen_input+0x1f4>)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	f003 fd2b 	bl	800b944 <tcp_timer_needed>
 8007eee:	4b2b      	ldr	r3, [pc, #172]	; (8007f9c <tcp_listen_input+0x1f8>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f001 fd8d 	bl	8009a14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007efa:	4b23      	ldr	r3, [pc, #140]	; (8007f88 <tcp_listen_input+0x1e4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	89db      	ldrh	r3, [r3, #14]
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f005 f8ef 	bl	800d100 <ip4_route>
 8007f22:	4601      	mov	r1, r0
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	3304      	adds	r3, #4
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7ff fa30 	bl	8007390 <tcp_eff_send_mss_netif>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007f38:	2112      	movs	r1, #18
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	f002 fc9e 	bl	800a87c <tcp_enqueue_flags>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6978      	ldr	r0, [r7, #20]
 8007f50:	f7fd fedc 	bl	8005d0c <tcp_abandon>
      return;
 8007f54:	e006      	b.n	8007f64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	f002 fd7e 	bl	800aa58 <tcp_output>
  return;
 8007f5c:	e001      	b.n	8007f62 <tcp_listen_input+0x1be>
    return;
 8007f5e:	bf00      	nop
 8007f60:	e000      	b.n	8007f64 <tcp_listen_input+0x1c0>
  return;
 8007f62:	bf00      	nop
}
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd90      	pop	{r4, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000080 	.word	0x20000080
 8007f70:	08010be4 	.word	0x08010be4
 8007f74:	08010ddc 	.word	0x08010ddc
 8007f78:	08010c30 	.word	0x08010c30
 8007f7c:	20000078 	.word	0x20000078
 8007f80:	2000007e 	.word	0x2000007e
 8007f84:	20000074 	.word	0x20000074
 8007f88:	20000064 	.word	0x20000064
 8007f8c:	200032e0 	.word	0x200032e0
 8007f90:	200032e4 	.word	0x200032e4
 8007f94:	200032d0 	.word	0x200032d0
 8007f98:	20024d04 	.word	0x20024d04
 8007f9c:	20024d00 	.word	0x20024d00

08007fa0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007fa8:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <tcp_timewait_input+0xc8>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d153      	bne.n	800805c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <tcp_timewait_input+0x28>
 8007fba:	4b2c      	ldr	r3, [pc, #176]	; (800806c <tcp_timewait_input+0xcc>)
 8007fbc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007fc0:	492b      	ldr	r1, [pc, #172]	; (8008070 <tcp_timewait_input+0xd0>)
 8007fc2:	482c      	ldr	r0, [pc, #176]	; (8008074 <tcp_timewait_input+0xd4>)
 8007fc4:	f006 fae4 	bl	800e590 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007fc8:	4b27      	ldr	r3, [pc, #156]	; (8008068 <tcp_timewait_input+0xc8>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d02a      	beq.n	800802a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007fd4:	4b28      	ldr	r3, [pc, #160]	; (8008078 <tcp_timewait_input+0xd8>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	db2d      	blt.n	800803e <tcp_timewait_input+0x9e>
 8007fe2:	4b25      	ldr	r3, [pc, #148]	; (8008078 <tcp_timewait_input+0xd8>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007fee:	440b      	add	r3, r1
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	dc23      	bgt.n	800803e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ff6:	4b21      	ldr	r3, [pc, #132]	; (800807c <tcp_timewait_input+0xdc>)
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	4b21      	ldr	r3, [pc, #132]	; (8008080 <tcp_timewait_input+0xe0>)
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	4b1d      	ldr	r3, [pc, #116]	; (8008078 <tcp_timewait_input+0xd8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008006:	4b1f      	ldr	r3, [pc, #124]	; (8008084 <tcp_timewait_input+0xe4>)
 8008008:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800800a:	885b      	ldrh	r3, [r3, #2]
 800800c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800800e:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <tcp_timewait_input+0xe4>)
 8008010:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008012:	8812      	ldrh	r2, [r2, #0]
 8008014:	b292      	uxth	r2, r2
 8008016:	9202      	str	r2, [sp, #8]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <tcp_timewait_input+0xe8>)
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4b1b      	ldr	r3, [pc, #108]	; (800808c <tcp_timewait_input+0xec>)
 8008020:	4602      	mov	r2, r0
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f003 facc 	bl	800b5c0 <tcp_rst>
      return;
 8008028:	e01b      	b.n	8008062 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <tcp_timewait_input+0xc8>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008036:	4b16      	ldr	r3, [pc, #88]	; (8008090 <tcp_timewait_input+0xf0>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800803e:	4b10      	ldr	r3, [pc, #64]	; (8008080 <tcp_timewait_input+0xe0>)
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00c      	beq.n	8008060 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8b5b      	ldrh	r3, [r3, #26]
 800804a:	f043 0302 	orr.w	r3, r3, #2
 800804e:	b29a      	uxth	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f002 fcff 	bl	800aa58 <tcp_output>
  }
  return;
 800805a:	e001      	b.n	8008060 <tcp_timewait_input+0xc0>
    return;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <tcp_timewait_input+0xc2>
  return;
 8008060:	bf00      	nop
}
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000080 	.word	0x20000080
 800806c:	08010be4 	.word	0x08010be4
 8008070:	08010dfc 	.word	0x08010dfc
 8008074:	08010c30 	.word	0x08010c30
 8008078:	20000074 	.word	0x20000074
 800807c:	20000078 	.word	0x20000078
 8008080:	2000007e 	.word	0x2000007e
 8008084:	20000064 	.word	0x20000064
 8008088:	200032e0 	.word	0x200032e0
 800808c:	200032e4 	.word	0x200032e4
 8008090:	20024d08 	.word	0x20024d08

08008094 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b08d      	sub	sp, #52	; 0x34
 8008098:	af04      	add	r7, sp, #16
 800809a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d106      	bne.n	80080b8 <tcp_process+0x24>
 80080aa:	4ba5      	ldr	r3, [pc, #660]	; (8008340 <tcp_process+0x2ac>)
 80080ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80080b0:	49a4      	ldr	r1, [pc, #656]	; (8008344 <tcp_process+0x2b0>)
 80080b2:	48a5      	ldr	r0, [pc, #660]	; (8008348 <tcp_process+0x2b4>)
 80080b4:	f006 fa6c 	bl	800e590 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80080b8:	4ba4      	ldr	r3, [pc, #656]	; (800834c <tcp_process+0x2b8>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d04e      	beq.n	8008162 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7d1b      	ldrb	r3, [r3, #20]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d108      	bne.n	80080de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080d0:	4b9f      	ldr	r3, [pc, #636]	; (8008350 <tcp_process+0x2bc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d123      	bne.n	8008120 <tcp_process+0x8c>
        acceptable = 1;
 80080d8:	2301      	movs	r3, #1
 80080da:	76fb      	strb	r3, [r7, #27]
 80080dc:	e020      	b.n	8008120 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080e2:	4b9c      	ldr	r3, [pc, #624]	; (8008354 <tcp_process+0x2c0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d102      	bne.n	80080f0 <tcp_process+0x5c>
        acceptable = 1;
 80080ea:	2301      	movs	r3, #1
 80080ec:	76fb      	strb	r3, [r7, #27]
 80080ee:	e017      	b.n	8008120 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80080f0:	4b98      	ldr	r3, [pc, #608]	; (8008354 <tcp_process+0x2c0>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	db10      	blt.n	8008120 <tcp_process+0x8c>
 80080fe:	4b95      	ldr	r3, [pc, #596]	; (8008354 <tcp_process+0x2c0>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800810a:	440b      	add	r3, r1
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc06      	bgt.n	8008120 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	8b5b      	ldrh	r3, [r3, #26]
 8008116:	f043 0302 	orr.w	r3, r3, #2
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008120:	7efb      	ldrb	r3, [r7, #27]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01b      	beq.n	800815e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7d1b      	ldrb	r3, [r3, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <tcp_process+0xa8>
 800812e:	4b84      	ldr	r3, [pc, #528]	; (8008340 <tcp_process+0x2ac>)
 8008130:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008134:	4988      	ldr	r1, [pc, #544]	; (8008358 <tcp_process+0x2c4>)
 8008136:	4884      	ldr	r0, [pc, #528]	; (8008348 <tcp_process+0x2b4>)
 8008138:	f006 fa2a 	bl	800e590 <iprintf>
      recv_flags |= TF_RESET;
 800813c:	4b87      	ldr	r3, [pc, #540]	; (800835c <tcp_process+0x2c8>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f043 0308 	orr.w	r3, r3, #8
 8008144:	b2da      	uxtb	r2, r3
 8008146:	4b85      	ldr	r3, [pc, #532]	; (800835c <tcp_process+0x2c8>)
 8008148:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	8b5b      	ldrh	r3, [r3, #26]
 800814e:	f023 0301 	bic.w	r3, r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008158:	f06f 030d 	mvn.w	r3, #13
 800815c:	e37a      	b.n	8008854 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e378      	b.n	8008854 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008162:	4b7a      	ldr	r3, [pc, #488]	; (800834c <tcp_process+0x2b8>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d010      	beq.n	8008190 <tcp_process+0xfc>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7d1b      	ldrb	r3, [r3, #20]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d00c      	beq.n	8008190 <tcp_process+0xfc>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7d1b      	ldrb	r3, [r3, #20]
 800817a:	2b03      	cmp	r3, #3
 800817c:	d008      	beq.n	8008190 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8b5b      	ldrh	r3, [r3, #26]
 8008182:	f043 0302 	orr.w	r3, r3, #2
 8008186:	b29a      	uxth	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e361      	b.n	8008854 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8b5b      	ldrh	r3, [r3, #26]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d103      	bne.n	80081a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800819c:	4b70      	ldr	r3, [pc, #448]	; (8008360 <tcp_process+0x2cc>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 fc2d 	bl	8009a14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	7d1b      	ldrb	r3, [r3, #20]
 80081be:	3b02      	subs	r3, #2
 80081c0:	2b07      	cmp	r3, #7
 80081c2:	f200 8337 	bhi.w	8008834 <tcp_process+0x7a0>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <tcp_process+0x138>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081ed 	.word	0x080081ed
 80081d0:	0800841d 	.word	0x0800841d
 80081d4:	08008595 	.word	0x08008595
 80081d8:	080085bf 	.word	0x080085bf
 80081dc:	080086e3 	.word	0x080086e3
 80081e0:	08008595 	.word	0x08008595
 80081e4:	0800876f 	.word	0x0800876f
 80081e8:	080087ff 	.word	0x080087ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80081ec:	4b57      	ldr	r3, [pc, #348]	; (800834c <tcp_process+0x2b8>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 80e4 	beq.w	80083c2 <tcp_process+0x32e>
 80081fa:	4b54      	ldr	r3, [pc, #336]	; (800834c <tcp_process+0x2b8>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 80dd 	beq.w	80083c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	4b50      	ldr	r3, [pc, #320]	; (8008350 <tcp_process+0x2bc>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	f040 80d5 	bne.w	80083c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008218:	4b4e      	ldr	r3, [pc, #312]	; (8008354 <tcp_process+0x2c0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800822a:	4b49      	ldr	r3, [pc, #292]	; (8008350 <tcp_process+0x2bc>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008232:	4b4c      	ldr	r3, [pc, #304]	; (8008364 <tcp_process+0x2d0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	89db      	ldrh	r3, [r3, #14]
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800824c:	4b41      	ldr	r3, [pc, #260]	; (8008354 <tcp_process+0x2c0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	1e5a      	subs	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2204      	movs	r2, #4
 800825a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3304      	adds	r3, #4
 8008264:	4618      	mov	r0, r3
 8008266:	f004 ff4b 	bl	800d100 <ip4_route>
 800826a:	4601      	mov	r1, r0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	461a      	mov	r2, r3
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff f88c 	bl	8007390 <tcp_eff_send_mss_netif>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008284:	009a      	lsls	r2, r3, #2
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008290:	428b      	cmp	r3, r1
 8008292:	bf38      	it	cc
 8008294:	460b      	movcc	r3, r1
 8008296:	429a      	cmp	r2, r3
 8008298:	d204      	bcs.n	80082a4 <tcp_process+0x210>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	e00d      	b.n	80082c0 <tcp_process+0x22c>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d904      	bls.n	80082bc <tcp_process+0x228>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	e001      	b.n	80082c0 <tcp_process+0x22c>
 80082bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <tcp_process+0x24a>
 80082d0:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <tcp_process+0x2ac>)
 80082d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80082d6:	4924      	ldr	r1, [pc, #144]	; (8008368 <tcp_process+0x2d4>)
 80082d8:	481b      	ldr	r0, [pc, #108]	; (8008348 <tcp_process+0x2b4>)
 80082da:	f006 f959 	bl	800e590 <iprintf>
        --pcb->snd_queuelen;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d111      	bne.n	800831e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <tcp_process+0x280>
 8008306:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <tcp_process+0x2ac>)
 8008308:	f44f 725d 	mov.w	r2, #884	; 0x374
 800830c:	4917      	ldr	r1, [pc, #92]	; (800836c <tcp_process+0x2d8>)
 800830e:	480e      	ldr	r0, [pc, #56]	; (8008348 <tcp_process+0x2b4>)
 8008310:	f006 f93e 	bl	800e590 <iprintf>
          pcb->unsent = rseg->next;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	66da      	str	r2, [r3, #108]	; 0x6c
 800831c:	e003      	b.n	8008326 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008326:	69f8      	ldr	r0, [r7, #28]
 8008328:	f7fe fc55 	bl	8006bd6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11d      	bne.n	8008370 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800833a:	861a      	strh	r2, [r3, #48]	; 0x30
 800833c:	e01f      	b.n	800837e <tcp_process+0x2ea>
 800833e:	bf00      	nop
 8008340:	08010be4 	.word	0x08010be4
 8008344:	08010e1c 	.word	0x08010e1c
 8008348:	08010c30 	.word	0x08010c30
 800834c:	20000080 	.word	0x20000080
 8008350:	20000078 	.word	0x20000078
 8008354:	20000074 	.word	0x20000074
 8008358:	08010e38 	.word	0x08010e38
 800835c:	20000081 	.word	0x20000081
 8008360:	20024d08 	.word	0x20024d08
 8008364:	20000064 	.word	0x20000064
 8008368:	08010e58 	.word	0x08010e58
 800836c:	08010e70 	.word	0x08010e70
        } else {
          pcb->rtime = 0;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <tcp_process+0x30a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6910      	ldr	r0, [r2, #16]
 8008392:	2200      	movs	r2, #0
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	76bb      	strb	r3, [r7, #26]
 800839c:	e001      	b.n	80083a2 <tcp_process+0x30e>
 800839e:	2300      	movs	r3, #0
 80083a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80083a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80083a6:	f113 0f0d 	cmn.w	r3, #13
 80083aa:	d102      	bne.n	80083b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80083ac:	f06f 030c 	mvn.w	r3, #12
 80083b0:	e250      	b.n	8008854 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8b5b      	ldrh	r3, [r3, #26]
 80083b6:	f043 0302 	orr.w	r3, r3, #2
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80083c0:	e23a      	b.n	8008838 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80083c2:	4b9d      	ldr	r3, [pc, #628]	; (8008638 <tcp_process+0x5a4>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8234 	beq.w	8008838 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083d0:	4b9a      	ldr	r3, [pc, #616]	; (800863c <tcp_process+0x5a8>)
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	4b9a      	ldr	r3, [pc, #616]	; (8008640 <tcp_process+0x5ac>)
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	4b9a      	ldr	r3, [pc, #616]	; (8008644 <tcp_process+0x5b0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083e0:	4b99      	ldr	r3, [pc, #612]	; (8008648 <tcp_process+0x5b4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083e4:	885b      	ldrh	r3, [r3, #2]
 80083e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083e8:	4a97      	ldr	r2, [pc, #604]	; (8008648 <tcp_process+0x5b4>)
 80083ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ec:	8812      	ldrh	r2, [r2, #0]
 80083ee:	b292      	uxth	r2, r2
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	4b95      	ldr	r3, [pc, #596]	; (800864c <tcp_process+0x5b8>)
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4b95      	ldr	r3, [pc, #596]	; (8008650 <tcp_process+0x5bc>)
 80083fa:	4602      	mov	r2, r0
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f003 f8df 	bl	800b5c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008408:	2b05      	cmp	r3, #5
 800840a:	f200 8215 	bhi.w	8008838 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f002 fea9 	bl	800b16c <tcp_rexmit_rto>
      break;
 800841a:	e20d      	b.n	8008838 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800841c:	4b86      	ldr	r3, [pc, #536]	; (8008638 <tcp_process+0x5a4>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b00      	cmp	r3, #0
 8008426:	f000 80a1 	beq.w	800856c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800842a:	4b84      	ldr	r3, [pc, #528]	; (800863c <tcp_process+0x5a8>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	3b01      	subs	r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	db7e      	blt.n	8008538 <tcp_process+0x4a4>
 800843a:	4b80      	ldr	r3, [pc, #512]	; (800863c <tcp_process+0x5a8>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc77      	bgt.n	8008538 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2204      	movs	r2, #4
 800844c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008456:	23fa      	movs	r3, #250	; 0xfa
 8008458:	76bb      	strb	r3, [r7, #26]
 800845a:	e01d      	b.n	8008498 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <tcp_process+0x3e0>
 8008466:	4b7b      	ldr	r3, [pc, #492]	; (8008654 <tcp_process+0x5c0>)
 8008468:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800846c:	497a      	ldr	r1, [pc, #488]	; (8008658 <tcp_process+0x5c4>)
 800846e:	487b      	ldr	r0, [pc, #492]	; (800865c <tcp_process+0x5c8>)
 8008470:	f006 f88e 	bl	800e590 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <tcp_process+0x400>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6910      	ldr	r0, [r2, #16]
 8008488:	2200      	movs	r2, #0
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4798      	blx	r3
 800848e:	4603      	mov	r3, r0
 8008490:	76bb      	strb	r3, [r7, #26]
 8008492:	e001      	b.n	8008498 <tcp_process+0x404>
 8008494:	23f0      	movs	r3, #240	; 0xf0
 8008496:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008498:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80084a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80084a4:	f113 0f0d 	cmn.w	r3, #13
 80084a8:	d002      	beq.n	80084b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7fd fcec 	bl	8005e88 <tcp_abort>
            }
            return ERR_ABRT;
 80084b0:	f06f 030c 	mvn.w	r3, #12
 80084b4:	e1ce      	b.n	8008854 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fae0 	bl	8008a7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80084bc:	4b68      	ldr	r3, [pc, #416]	; (8008660 <tcp_process+0x5cc>)
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <tcp_process+0x43c>
            recv_acked--;
 80084c4:	4b66      	ldr	r3, [pc, #408]	; (8008660 <tcp_process+0x5cc>)
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	4b64      	ldr	r3, [pc, #400]	; (8008660 <tcp_process+0x5cc>)
 80084ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084d4:	009a      	lsls	r2, r3, #2
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80084e0:	428b      	cmp	r3, r1
 80084e2:	bf38      	it	cc
 80084e4:	460b      	movcc	r3, r1
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d204      	bcs.n	80084f4 <tcp_process+0x460>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	e00d      	b.n	8008510 <tcp_process+0x47c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80084fe:	4293      	cmp	r3, r2
 8008500:	d904      	bls.n	800850c <tcp_process+0x478>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	b29b      	uxth	r3, r3
 800850a:	e001      	b.n	8008510 <tcp_process+0x47c>
 800850c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008516:	4b53      	ldr	r3, [pc, #332]	; (8008664 <tcp_process+0x5d0>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	d037      	beq.n	8008592 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	8b5b      	ldrh	r3, [r3, #26]
 8008526:	f043 0302 	orr.w	r3, r3, #2
 800852a:	b29a      	uxth	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2207      	movs	r2, #7
 8008534:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008536:	e02c      	b.n	8008592 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008538:	4b40      	ldr	r3, [pc, #256]	; (800863c <tcp_process+0x5a8>)
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	4b40      	ldr	r3, [pc, #256]	; (8008640 <tcp_process+0x5ac>)
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	4b40      	ldr	r3, [pc, #256]	; (8008644 <tcp_process+0x5b0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008548:	4b3f      	ldr	r3, [pc, #252]	; (8008648 <tcp_process+0x5b4>)
 800854a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800854c:	885b      	ldrh	r3, [r3, #2]
 800854e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008550:	4a3d      	ldr	r2, [pc, #244]	; (8008648 <tcp_process+0x5b4>)
 8008552:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008554:	8812      	ldrh	r2, [r2, #0]
 8008556:	b292      	uxth	r2, r2
 8008558:	9202      	str	r2, [sp, #8]
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	4b3b      	ldr	r3, [pc, #236]	; (800864c <tcp_process+0x5b8>)
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <tcp_process+0x5bc>)
 8008562:	4602      	mov	r2, r0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f003 f82b 	bl	800b5c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800856a:	e167      	b.n	800883c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800856c:	4b32      	ldr	r3, [pc, #200]	; (8008638 <tcp_process+0x5a4>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8161 	beq.w	800883c <tcp_process+0x7a8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	1e5a      	subs	r2, r3, #1
 8008580:	4b30      	ldr	r3, [pc, #192]	; (8008644 <tcp_process+0x5b0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	f040 8159 	bne.w	800883c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f002 fe10 	bl	800b1b0 <tcp_rexmit>
      break;
 8008590:	e154      	b.n	800883c <tcp_process+0x7a8>
 8008592:	e153      	b.n	800883c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fa71 	bl	8008a7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800859a:	4b32      	ldr	r3, [pc, #200]	; (8008664 <tcp_process+0x5d0>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 814c 	beq.w	8008840 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	8b5b      	ldrh	r3, [r3, #26]
 80085ac:	f043 0302 	orr.w	r3, r3, #2
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2207      	movs	r2, #7
 80085ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80085bc:	e140      	b.n	8008840 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa5c 	bl	8008a7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80085c4:	4b27      	ldr	r3, [pc, #156]	; (8008664 <tcp_process+0x5d0>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d071      	beq.n	80086b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <tcp_process+0x5a4>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d060      	beq.n	800869e <tcp_process+0x60a>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e0:	4b16      	ldr	r3, [pc, #88]	; (800863c <tcp_process+0x5a8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d15a      	bne.n	800869e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d156      	bne.n	800869e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8b5b      	ldrh	r3, [r3, #26]
 80085f4:	f043 0302 	orr.w	r3, r3, #2
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fe fdbc 	bl	800717c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008604:	4b18      	ldr	r3, [pc, #96]	; (8008668 <tcp_process+0x5d4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d105      	bne.n	800861a <tcp_process+0x586>
 800860e:	4b16      	ldr	r3, [pc, #88]	; (8008668 <tcp_process+0x5d4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	4a14      	ldr	r2, [pc, #80]	; (8008668 <tcp_process+0x5d4>)
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	e02e      	b.n	8008678 <tcp_process+0x5e4>
 800861a:	4b13      	ldr	r3, [pc, #76]	; (8008668 <tcp_process+0x5d4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	e027      	b.n	8008672 <tcp_process+0x5de>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d11f      	bne.n	800866c <tcp_process+0x5d8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	60da      	str	r2, [r3, #12]
 8008634:	e020      	b.n	8008678 <tcp_process+0x5e4>
 8008636:	bf00      	nop
 8008638:	20000080 	.word	0x20000080
 800863c:	20000078 	.word	0x20000078
 8008640:	2000007e 	.word	0x2000007e
 8008644:	20000074 	.word	0x20000074
 8008648:	20000064 	.word	0x20000064
 800864c:	200032e0 	.word	0x200032e0
 8008650:	200032e4 	.word	0x200032e4
 8008654:	08010be4 	.word	0x08010be4
 8008658:	08010e84 	.word	0x08010e84
 800865c:	08010c30 	.word	0x08010c30
 8008660:	2000007c 	.word	0x2000007c
 8008664:	20000081 	.word	0x20000081
 8008668:	20024d04 	.word	0x20024d04
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1d4      	bne.n	8008622 <tcp_process+0x58e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	4b77      	ldr	r3, [pc, #476]	; (800885c <tcp_process+0x7c8>)
 8008680:	2201      	movs	r2, #1
 8008682:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	220a      	movs	r2, #10
 8008688:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800868a:	4b75      	ldr	r3, [pc, #468]	; (8008860 <tcp_process+0x7cc>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60da      	str	r2, [r3, #12]
 8008692:	4a73      	ldr	r2, [pc, #460]	; (8008860 <tcp_process+0x7cc>)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	f003 f954 	bl	800b944 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800869c:	e0d2      	b.n	8008844 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	8b5b      	ldrh	r3, [r3, #26]
 80086a2:	f043 0302 	orr.w	r3, r3, #2
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2208      	movs	r2, #8
 80086b0:	751a      	strb	r2, [r3, #20]
      break;
 80086b2:	e0c7      	b.n	8008844 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086b4:	4b6b      	ldr	r3, [pc, #428]	; (8008864 <tcp_process+0x7d0>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80c1 	beq.w	8008844 <tcp_process+0x7b0>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086c6:	4b68      	ldr	r3, [pc, #416]	; (8008868 <tcp_process+0x7d4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	f040 80ba 	bne.w	8008844 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f040 80b5 	bne.w	8008844 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2206      	movs	r2, #6
 80086de:	751a      	strb	r2, [r3, #20]
      break;
 80086e0:	e0b0      	b.n	8008844 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9ca 	bl	8008a7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80086e8:	4b60      	ldr	r3, [pc, #384]	; (800886c <tcp_process+0x7d8>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80a9 	beq.w	8008848 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	8b5b      	ldrh	r3, [r3, #26]
 80086fa:	f043 0302 	orr.w	r3, r3, #2
 80086fe:	b29a      	uxth	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fe fd39 	bl	800717c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800870a:	4b59      	ldr	r3, [pc, #356]	; (8008870 <tcp_process+0x7dc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d105      	bne.n	8008720 <tcp_process+0x68c>
 8008714:	4b56      	ldr	r3, [pc, #344]	; (8008870 <tcp_process+0x7dc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	4a55      	ldr	r2, [pc, #340]	; (8008870 <tcp_process+0x7dc>)
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	e013      	b.n	8008748 <tcp_process+0x6b4>
 8008720:	4b53      	ldr	r3, [pc, #332]	; (8008870 <tcp_process+0x7dc>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	e00c      	b.n	8008742 <tcp_process+0x6ae>
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	429a      	cmp	r2, r3
 8008730:	d104      	bne.n	800873c <tcp_process+0x6a8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e005      	b.n	8008748 <tcp_process+0x6b4>
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	613b      	str	r3, [r7, #16]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1ef      	bne.n	8008728 <tcp_process+0x694>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
 800874e:	4b43      	ldr	r3, [pc, #268]	; (800885c <tcp_process+0x7c8>)
 8008750:	2201      	movs	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	220a      	movs	r2, #10
 8008758:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800875a:	4b41      	ldr	r3, [pc, #260]	; (8008860 <tcp_process+0x7cc>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	4a3f      	ldr	r2, [pc, #252]	; (8008860 <tcp_process+0x7cc>)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	f003 f8ec 	bl	800b944 <tcp_timer_needed>
      }
      break;
 800876c:	e06c      	b.n	8008848 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f984 	bl	8008a7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008774:	4b3b      	ldr	r3, [pc, #236]	; (8008864 <tcp_process+0x7d0>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 0310 	and.w	r3, r3, #16
 800877c:	2b00      	cmp	r3, #0
 800877e:	d065      	beq.n	800884c <tcp_process+0x7b8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008784:	4b38      	ldr	r3, [pc, #224]	; (8008868 <tcp_process+0x7d4>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	429a      	cmp	r2, r3
 800878a:	d15f      	bne.n	800884c <tcp_process+0x7b8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d15b      	bne.n	800884c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7fe fcf1 	bl	800717c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800879a:	4b35      	ldr	r3, [pc, #212]	; (8008870 <tcp_process+0x7dc>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d105      	bne.n	80087b0 <tcp_process+0x71c>
 80087a4:	4b32      	ldr	r3, [pc, #200]	; (8008870 <tcp_process+0x7dc>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	4a31      	ldr	r2, [pc, #196]	; (8008870 <tcp_process+0x7dc>)
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e013      	b.n	80087d8 <tcp_process+0x744>
 80087b0:	4b2f      	ldr	r3, [pc, #188]	; (8008870 <tcp_process+0x7dc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	e00c      	b.n	80087d2 <tcp_process+0x73e>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d104      	bne.n	80087cc <tcp_process+0x738>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	60da      	str	r2, [r3, #12]
 80087ca:	e005      	b.n	80087d8 <tcp_process+0x744>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1ef      	bne.n	80087b8 <tcp_process+0x724>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	4b1f      	ldr	r3, [pc, #124]	; (800885c <tcp_process+0x7c8>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	220a      	movs	r2, #10
 80087e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80087ea:	4b1d      	ldr	r3, [pc, #116]	; (8008860 <tcp_process+0x7cc>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	4a1b      	ldr	r2, [pc, #108]	; (8008860 <tcp_process+0x7cc>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	f003 f8a4 	bl	800b944 <tcp_timer_needed>
      }
      break;
 80087fc:	e026      	b.n	800884c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f93c 	bl	8008a7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008804:	4b17      	ldr	r3, [pc, #92]	; (8008864 <tcp_process+0x7d0>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01f      	beq.n	8008850 <tcp_process+0x7bc>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008814:	4b14      	ldr	r3, [pc, #80]	; (8008868 <tcp_process+0x7d4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	429a      	cmp	r2, r3
 800881a:	d119      	bne.n	8008850 <tcp_process+0x7bc>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008820:	2b00      	cmp	r3, #0
 8008822:	d115      	bne.n	8008850 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <tcp_process+0x7d8>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f043 0310 	orr.w	r3, r3, #16
 800882c:	b2da      	uxtb	r2, r3
 800882e:	4b0f      	ldr	r3, [pc, #60]	; (800886c <tcp_process+0x7d8>)
 8008830:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008832:	e00d      	b.n	8008850 <tcp_process+0x7bc>
    default:
      break;
 8008834:	bf00      	nop
 8008836:	e00c      	b.n	8008852 <tcp_process+0x7be>
      break;
 8008838:	bf00      	nop
 800883a:	e00a      	b.n	8008852 <tcp_process+0x7be>
      break;
 800883c:	bf00      	nop
 800883e:	e008      	b.n	8008852 <tcp_process+0x7be>
      break;
 8008840:	bf00      	nop
 8008842:	e006      	b.n	8008852 <tcp_process+0x7be>
      break;
 8008844:	bf00      	nop
 8008846:	e004      	b.n	8008852 <tcp_process+0x7be>
      break;
 8008848:	bf00      	nop
 800884a:	e002      	b.n	8008852 <tcp_process+0x7be>
      break;
 800884c:	bf00      	nop
 800884e:	e000      	b.n	8008852 <tcp_process+0x7be>
      break;
 8008850:	bf00      	nop
  }
  return ERR_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3724      	adds	r7, #36	; 0x24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd90      	pop	{r4, r7, pc}
 800885c:	20024d00 	.word	0x20024d00
 8008860:	20024d14 	.word	0x20024d14
 8008864:	20000080 	.word	0x20000080
 8008868:	20000078 	.word	0x20000078
 800886c:	20000081 	.word	0x20000081
 8008870:	20024d04 	.word	0x20024d04

08008874 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008874:	b590      	push	{r4, r7, lr}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <tcp_oos_insert_segment+0x1e>
 8008884:	4b3b      	ldr	r3, [pc, #236]	; (8008974 <tcp_oos_insert_segment+0x100>)
 8008886:	f240 421f 	movw	r2, #1055	; 0x41f
 800888a:	493b      	ldr	r1, [pc, #236]	; (8008978 <tcp_oos_insert_segment+0x104>)
 800888c:	483b      	ldr	r0, [pc, #236]	; (800897c <tcp_oos_insert_segment+0x108>)
 800888e:	f005 fe7f 	bl	800e590 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	899b      	ldrh	r3, [r3, #12]
 8008898:	b29b      	uxth	r3, r3
 800889a:	4618      	mov	r0, r3
 800889c:	f7fb fa30 	bl	8003d00 <lwip_htons>
 80088a0:	4603      	mov	r3, r0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d028      	beq.n	80088fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80088ac:	6838      	ldr	r0, [r7, #0]
 80088ae:	f7fe f97d 	bl	8006bac <tcp_segs_free>
    next = NULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	603b      	str	r3, [r7, #0]
 80088b6:	e056      	b.n	8008966 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	899b      	ldrh	r3, [r3, #12]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fb fa1d 	bl	8003d00 <lwip_htons>
 80088c6:	4603      	mov	r3, r0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00d      	beq.n	80088ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	899b      	ldrh	r3, [r3, #12]
 80088d8:	b29c      	uxth	r4, r3
 80088da:	2001      	movs	r0, #1
 80088dc:	f7fb fa10 	bl	8003d00 <lwip_htons>
 80088e0:	4603      	mov	r3, r0
 80088e2:	461a      	mov	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	4322      	orrs	r2, r4
 80088ea:	b292      	uxth	r2, r2
 80088ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f7fe f96c 	bl	8006bd6 <tcp_seg_free>
    while (next &&
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00e      	beq.n	8008922 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	891b      	ldrh	r3, [r3, #8]
 8008908:	461a      	mov	r2, r3
 800890a:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <tcp_oos_insert_segment+0x10c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	441a      	add	r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	8909      	ldrh	r1, [r1, #8]
 800891a:	440b      	add	r3, r1
 800891c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800891e:	2b00      	cmp	r3, #0
 8008920:	daca      	bge.n	80088b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01e      	beq.n	8008966 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	891b      	ldrh	r3, [r3, #8]
 800892c:	461a      	mov	r2, r3
 800892e:	4b14      	ldr	r3, [pc, #80]	; (8008980 <tcp_oos_insert_segment+0x10c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	441a      	add	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800893c:	2b00      	cmp	r3, #0
 800893e:	dd12      	ble.n	8008966 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	b29a      	uxth	r2, r3
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <tcp_oos_insert_segment+0x10c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	891b      	ldrh	r3, [r3, #8]
 800895e:	4619      	mov	r1, r3
 8008960:	4610      	mov	r0, r2
 8008962:	f7fc fae3 	bl	8004f2c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	601a      	str	r2, [r3, #0]
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	bd90      	pop	{r4, r7, pc}
 8008974:	08010be4 	.word	0x08010be4
 8008978:	08010ea4 	.word	0x08010ea4
 800897c:	08010c30 	.word	0x08010c30
 8008980:	20000074 	.word	0x20000074

08008984 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008992:	e03e      	b.n	8008a12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fc fcce 	bl	8005344 <pbuf_clen>
 80089a8:	4603      	mov	r3, r0
 80089aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089b2:	8a7a      	ldrh	r2, [r7, #18]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d906      	bls.n	80089c6 <tcp_free_acked_segments+0x42>
 80089b8:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <tcp_free_acked_segments+0xe0>)
 80089ba:	f240 4257 	movw	r2, #1111	; 0x457
 80089be:	492a      	ldr	r1, [pc, #168]	; (8008a68 <tcp_free_acked_segments+0xe4>)
 80089c0:	482a      	ldr	r0, [pc, #168]	; (8008a6c <tcp_free_acked_segments+0xe8>)
 80089c2:	f005 fde5 	bl	800e590 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80089cc:	8a7b      	ldrh	r3, [r7, #18]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	891a      	ldrh	r2, [r3, #8]
 80089dc:	4b24      	ldr	r3, [pc, #144]	; (8008a70 <tcp_free_acked_segments+0xec>)
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	4413      	add	r3, r2
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	4b22      	ldr	r3, [pc, #136]	; (8008a70 <tcp_free_acked_segments+0xec>)
 80089e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80089e8:	6978      	ldr	r0, [r7, #20]
 80089ea:	f7fe f8f4 	bl	8006bd6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00c      	beq.n	8008a12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d109      	bne.n	8008a12 <tcp_free_acked_segments+0x8e>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d106      	bne.n	8008a12 <tcp_free_acked_segments+0x8e>
 8008a04:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <tcp_free_acked_segments+0xe0>)
 8008a06:	f240 4261 	movw	r2, #1121	; 0x461
 8008a0a:	491a      	ldr	r1, [pc, #104]	; (8008a74 <tcp_free_acked_segments+0xf0>)
 8008a0c:	4817      	ldr	r0, [pc, #92]	; (8008a6c <tcp_free_acked_segments+0xe8>)
 8008a0e:	f005 fdbf 	bl	800e590 <iprintf>
  while (seg_list != NULL &&
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d020      	beq.n	8008a5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fb f983 	bl	8003d2a <lwip_htonl>
 8008a24:	4604      	mov	r4, r0
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	891b      	ldrh	r3, [r3, #8]
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	899b      	ldrh	r3, [r3, #12]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fb f963 	bl	8003d00 <lwip_htons>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <tcp_free_acked_segments+0xc6>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e000      	b.n	8008a4c <tcp_free_acked_segments+0xc8>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	442b      	add	r3, r5
 8008a4e:	18e2      	adds	r2, r4, r3
 8008a50:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <tcp_free_acked_segments+0xf4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dd9c      	ble.n	8008994 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bdb0      	pop	{r4, r5, r7, pc}
 8008a64:	08010be4 	.word	0x08010be4
 8008a68:	08010ecc 	.word	0x08010ecc
 8008a6c:	08010c30 	.word	0x08010c30
 8008a70:	2000007c 	.word	0x2000007c
 8008a74:	08010ef4 	.word	0x08010ef4
 8008a78:	20000078 	.word	0x20000078

08008a7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008a7c:	b5b0      	push	{r4, r5, r7, lr}
 8008a7e:	b094      	sub	sp, #80	; 0x50
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <tcp_receive+0x20>
 8008a8e:	4ba6      	ldr	r3, [pc, #664]	; (8008d28 <tcp_receive+0x2ac>)
 8008a90:	f240 427b 	movw	r2, #1147	; 0x47b
 8008a94:	49a5      	ldr	r1, [pc, #660]	; (8008d2c <tcp_receive+0x2b0>)
 8008a96:	48a6      	ldr	r0, [pc, #664]	; (8008d30 <tcp_receive+0x2b4>)
 8008a98:	f005 fd7a 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7d1b      	ldrb	r3, [r3, #20]
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d806      	bhi.n	8008ab2 <tcp_receive+0x36>
 8008aa4:	4ba0      	ldr	r3, [pc, #640]	; (8008d28 <tcp_receive+0x2ac>)
 8008aa6:	f240 427c 	movw	r2, #1148	; 0x47c
 8008aaa:	49a2      	ldr	r1, [pc, #648]	; (8008d34 <tcp_receive+0x2b8>)
 8008aac:	48a0      	ldr	r0, [pc, #640]	; (8008d30 <tcp_receive+0x2b4>)
 8008aae:	f005 fd6f 	bl	800e590 <iprintf>

  if (flags & TCP_ACK) {
 8008ab2:	4ba1      	ldr	r3, [pc, #644]	; (8008d38 <tcp_receive+0x2bc>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f003 0310 	and.w	r3, r3, #16
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 8263 	beq.w	8008f86 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008acc:	4413      	add	r3, r2
 8008ace:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ad4:	4b99      	ldr	r3, [pc, #612]	; (8008d3c <tcp_receive+0x2c0>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	db1b      	blt.n	8008b16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ae2:	4b96      	ldr	r3, [pc, #600]	; (8008d3c <tcp_receive+0x2c0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d106      	bne.n	8008af8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008aee:	4b94      	ldr	r3, [pc, #592]	; (8008d40 <tcp_receive+0x2c4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	db0e      	blt.n	8008b16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008afc:	4b90      	ldr	r3, [pc, #576]	; (8008d40 <tcp_receive+0x2c4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d125      	bne.n	8008b50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008b04:	4b8f      	ldr	r3, [pc, #572]	; (8008d44 <tcp_receive+0x2c8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	89db      	ldrh	r3, [r3, #14]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d91c      	bls.n	8008b50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008b16:	4b8b      	ldr	r3, [pc, #556]	; (8008d44 <tcp_receive+0x2c8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	89db      	ldrh	r3, [r3, #14]
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d205      	bcs.n	8008b40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008b40:	4b7e      	ldr	r3, [pc, #504]	; (8008d3c <tcp_receive+0x2c0>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008b48:	4b7d      	ldr	r3, [pc, #500]	; (8008d40 <tcp_receive+0x2c4>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008b50:	4b7b      	ldr	r3, [pc, #492]	; (8008d40 <tcp_receive+0x2c4>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	dc58      	bgt.n	8008c10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008b5e:	4b7a      	ldr	r3, [pc, #488]	; (8008d48 <tcp_receive+0x2cc>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d14b      	bne.n	8008bfe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008b70:	4413      	add	r3, r2
 8008b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d142      	bne.n	8008bfe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	db3d      	blt.n	8008bfe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b86:	4b6e      	ldr	r3, [pc, #440]	; (8008d40 <tcp_receive+0x2c4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d137      	bne.n	8008bfe <tcp_receive+0x182>
              found_dupack = 1;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b98:	2bff      	cmp	r3, #255	; 0xff
 8008b9a:	d007      	beq.n	8008bac <tcp_receive+0x130>
                ++pcb->dupacks;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d91b      	bls.n	8008bee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bc0:	4413      	add	r3, r2
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d30a      	bcc.n	8008be4 <tcp_receive+0x168>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bd8:	4413      	add	r3, r2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008be2:	e004      	b.n	8008bee <tcp_receive+0x172>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d902      	bls.n	8008bfe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f002 fb45 	bl	800b288 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 8160 	bne.w	8008ec6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c0e:	e15a      	b.n	8008ec6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008c10:	4b4b      	ldr	r3, [pc, #300]	; (8008d40 <tcp_receive+0x2c4>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f2c0 814d 	blt.w	8008ebc <tcp_receive+0x440>
 8008c22:	4b47      	ldr	r3, [pc, #284]	; (8008d40 <tcp_receive+0x2c4>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f300 8145 	bgt.w	8008ebc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	8b5b      	ldrh	r3, [r3, #26]
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d010      	beq.n	8008c60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8b5b      	ldrh	r3, [r3, #26]
 8008c42:	f023 0304 	bic.w	r3, r3, #4
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c6e:	10db      	asrs	r3, r3, #3
 8008c70:	b21b      	sxth	r3, r3
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	b21a      	sxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008c88:	4b2d      	ldr	r3, [pc, #180]	; (8008d40 <tcp_receive+0x2c4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008ca0:	4b27      	ldr	r3, [pc, #156]	; (8008d40 <tcp_receive+0x2c4>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7d1b      	ldrb	r3, [r3, #20]
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	f240 8096 	bls.w	8008dde <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d244      	bcs.n	8008d4c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8b5b      	ldrh	r3, [r3, #26]
 8008cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <tcp_receive+0x256>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e000      	b.n	8008cd4 <tcp_receive+0x258>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008cd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ce2:	fb12 f303 	smulbb	r3, r2, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cea:	4293      	cmp	r3, r2
 8008cec:	bf28      	it	cs
 8008cee:	4613      	movcs	r3, r2
 8008cf0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008cf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cfa:	4413      	add	r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d309      	bcc.n	8008d1c <tcp_receive+0x2a0>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008d0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d10:	4413      	add	r3, r2
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d1a:	e060      	b.n	8008dde <tcp_receive+0x362>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008d26:	e05a      	b.n	8008dde <tcp_receive+0x362>
 8008d28:	08010be4 	.word	0x08010be4
 8008d2c:	08010f14 	.word	0x08010f14
 8008d30:	08010c30 	.word	0x08010c30
 8008d34:	08010f30 	.word	0x08010f30
 8008d38:	20000080 	.word	0x20000080
 8008d3c:	20000074 	.word	0x20000074
 8008d40:	20000078 	.word	0x20000078
 8008d44:	20000064 	.word	0x20000064
 8008d48:	2000007e 	.word	0x2000007e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d54:	4413      	add	r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d309      	bcc.n	8008d76 <tcp_receive+0x2fa>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d6a:	4413      	add	r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008d74:	e004      	b.n	8008d80 <tcp_receive+0x304>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d326      	bcc.n	8008dde <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008db0:	4413      	add	r3, r2
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d30a      	bcc.n	8008dd4 <tcp_receive+0x358>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dc8:	4413      	add	r3, r2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008dd2:	e004      	b.n	8008dde <tcp_receive+0x362>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008de6:	4a98      	ldr	r2, [pc, #608]	; (8009048 <tcp_receive+0x5cc>)
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff fdcb 	bl	8008984 <tcp_free_acked_segments>
 8008dee:	4602      	mov	r2, r0
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	4a93      	ldr	r2, [pc, #588]	; (800904c <tcp_receive+0x5d0>)
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff fdc0 	bl	8008984 <tcp_free_acked_segments>
 8008e04:	4602      	mov	r2, r0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e18:	861a      	strh	r2, [r3, #48]	; 0x30
 8008e1a:	e002      	b.n	8008e22 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008e3e:	4b84      	ldr	r3, [pc, #528]	; (8009050 <tcp_receive+0x5d4>)
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	4413      	add	r3, r2
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8b5b      	ldrh	r3, [r3, #26]
 8008e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d035      	beq.n	8008ec4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d118      	bne.n	8008e92 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00c      	beq.n	8008e82 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fa ff58 	bl	8003d2a <lwip_htonl>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dc20      	bgt.n	8008ec4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	8b5b      	ldrh	r3, [r3, #26]
 8008e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e90:	e018      	b.n	8008ec4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fa ff43 	bl	8003d2a <lwip_htonl>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	1ae3      	subs	r3, r4, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc0b      	bgt.n	8008ec4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	8b5b      	ldrh	r3, [r3, #26]
 8008eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008eba:	e003      	b.n	8008ec4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f002 fbd1 	bl	800b664 <tcp_send_empty_ack>
 8008ec2:	e000      	b.n	8008ec6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ec4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d05b      	beq.n	8008f86 <tcp_receive+0x50a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed2:	4b60      	ldr	r3, [pc, #384]	; (8009054 <tcp_receive+0x5d8>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da54      	bge.n	8008f86 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008edc:	4b5e      	ldr	r3, [pc, #376]	; (8009058 <tcp_receive+0x5dc>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008ef0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008efa:	10db      	asrs	r3, r3, #3
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f14:	4413      	add	r3, r2
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	b21a      	sxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008f1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	da05      	bge.n	8008f32 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f2a:	425b      	negs	r3, r3
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008f32:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f3c:	109b      	asrs	r3, r3, #2
 8008f3e:	b21b      	sxth	r3, r3
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008f56:	4413      	add	r3, r2
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	b21a      	sxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f66:	10db      	asrs	r3, r3, #3
 8008f68:	b21b      	sxth	r3, r3
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4413      	add	r3, r2
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	b21a      	sxth	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008f86:	4b35      	ldr	r3, [pc, #212]	; (800905c <tcp_receive+0x5e0>)
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 84e1 	beq.w	8009952 <tcp_receive+0xed6>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7d1b      	ldrb	r3, [r3, #20]
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	f200 84dc 	bhi.w	8009952 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f9e:	4b30      	ldr	r3, [pc, #192]	; (8009060 <tcp_receive+0x5e4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f2c0 808e 	blt.w	80090c8 <tcp_receive+0x64c>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fb0:	4b2a      	ldr	r3, [pc, #168]	; (800905c <tcp_receive+0x5e0>)
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4b2a      	ldr	r3, [pc, #168]	; (8009060 <tcp_receive+0x5e4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	440b      	add	r3, r1
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f300 8081 	bgt.w	80090c8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008fc6:	4b27      	ldr	r3, [pc, #156]	; (8009064 <tcp_receive+0x5e8>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fd0:	4b23      	ldr	r3, [pc, #140]	; (8009060 <tcp_receive+0x5e4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008fd8:	4b22      	ldr	r3, [pc, #136]	; (8009064 <tcp_receive+0x5e8>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <tcp_receive+0x572>
 8008fe0:	4b21      	ldr	r3, [pc, #132]	; (8009068 <tcp_receive+0x5ec>)
 8008fe2:	f240 5294 	movw	r2, #1428	; 0x594
 8008fe6:	4921      	ldr	r1, [pc, #132]	; (800906c <tcp_receive+0x5f0>)
 8008fe8:	4821      	ldr	r0, [pc, #132]	; (8009070 <tcp_receive+0x5f4>)
 8008fea:	f005 fad1 	bl	800e590 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d906      	bls.n	8009006 <tcp_receive+0x58a>
 8008ff8:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <tcp_receive+0x5ec>)
 8008ffa:	f240 5295 	movw	r2, #1429	; 0x595
 8008ffe:	491d      	ldr	r1, [pc, #116]	; (8009074 <tcp_receive+0x5f8>)
 8009000:	481b      	ldr	r0, [pc, #108]	; (8009070 <tcp_receive+0x5f4>)
 8009002:	f005 fac5 	bl	800e590 <iprintf>
      off = (u16_t)off32;
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800900c:	4b15      	ldr	r3, [pc, #84]	; (8009064 <tcp_receive+0x5e8>)
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	891b      	ldrh	r3, [r3, #8]
 8009012:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009016:	429a      	cmp	r2, r3
 8009018:	d906      	bls.n	8009028 <tcp_receive+0x5ac>
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <tcp_receive+0x5ec>)
 800901c:	f240 5297 	movw	r2, #1431	; 0x597
 8009020:	4915      	ldr	r1, [pc, #84]	; (8009078 <tcp_receive+0x5fc>)
 8009022:	4813      	ldr	r0, [pc, #76]	; (8009070 <tcp_receive+0x5f4>)
 8009024:	f005 fab4 	bl	800e590 <iprintf>
      inseg.len -= off;
 8009028:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <tcp_receive+0x5e8>)
 800902a:	891a      	ldrh	r2, [r3, #8]
 800902c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	b29a      	uxth	r2, r3
 8009034:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <tcp_receive+0x5e8>)
 8009036:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <tcp_receive+0x5e8>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	891a      	ldrh	r2, [r3, #8]
 800903e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009046:	e029      	b.n	800909c <tcp_receive+0x620>
 8009048:	08010f4c 	.word	0x08010f4c
 800904c:	08010f54 	.word	0x08010f54
 8009050:	2000007c 	.word	0x2000007c
 8009054:	20000078 	.word	0x20000078
 8009058:	20024d08 	.word	0x20024d08
 800905c:	2000007e 	.word	0x2000007e
 8009060:	20000074 	.word	0x20000074
 8009064:	20000054 	.word	0x20000054
 8009068:	08010be4 	.word	0x08010be4
 800906c:	08010f5c 	.word	0x08010f5c
 8009070:	08010c30 	.word	0x08010c30
 8009074:	08010f6c 	.word	0x08010f6c
 8009078:	08010f7c 	.word	0x08010f7c
        off -= p->len;
 800907c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800907e:	895b      	ldrh	r3, [r3, #10]
 8009080:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800908a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800908c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800908e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009092:	2200      	movs	r2, #0
 8009094:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800909c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909e:	895b      	ldrh	r3, [r3, #10]
 80090a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d8e9      	bhi.n	800907c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80090a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80090ac:	4619      	mov	r1, r3
 80090ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80090b0:	f7fc f83a 	bl	8005128 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	4a91      	ldr	r2, [pc, #580]	; (8009300 <tcp_receive+0x884>)
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	4b91      	ldr	r3, [pc, #580]	; (8009304 <tcp_receive+0x888>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4a8f      	ldr	r2, [pc, #572]	; (8009300 <tcp_receive+0x884>)
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80090c6:	e00d      	b.n	80090e4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80090c8:	4b8d      	ldr	r3, [pc, #564]	; (8009300 <tcp_receive+0x884>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da06      	bge.n	80090e4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	8b5b      	ldrh	r3, [r3, #26]
 80090da:	f043 0302 	orr.w	r3, r3, #2
 80090de:	b29a      	uxth	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80090e4:	4b86      	ldr	r3, [pc, #536]	; (8009300 <tcp_receive+0x884>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f2c0 842a 	blt.w	8009948 <tcp_receive+0xecc>
 80090f4:	4b82      	ldr	r3, [pc, #520]	; (8009300 <tcp_receive+0x884>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009100:	440b      	add	r3, r1
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	3301      	adds	r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	f300 841e 	bgt.w	8009948 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009110:	4b7b      	ldr	r3, [pc, #492]	; (8009300 <tcp_receive+0x884>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	f040 829a 	bne.w	800964e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800911a:	4b7a      	ldr	r3, [pc, #488]	; (8009304 <tcp_receive+0x888>)
 800911c:	891c      	ldrh	r4, [r3, #8]
 800911e:	4b79      	ldr	r3, [pc, #484]	; (8009304 <tcp_receive+0x888>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	899b      	ldrh	r3, [r3, #12]
 8009124:	b29b      	uxth	r3, r3
 8009126:	4618      	mov	r0, r3
 8009128:	f7fa fdea 	bl	8003d00 <lwip_htons>
 800912c:	4603      	mov	r3, r0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <tcp_receive+0x6c0>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <tcp_receive+0x6c2>
 800913c:	2300      	movs	r3, #0
 800913e:	4423      	add	r3, r4
 8009140:	b29a      	uxth	r2, r3
 8009142:	4b71      	ldr	r3, [pc, #452]	; (8009308 <tcp_receive+0x88c>)
 8009144:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800914a:	4b6f      	ldr	r3, [pc, #444]	; (8009308 <tcp_receive+0x88c>)
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d275      	bcs.n	800923e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009152:	4b6c      	ldr	r3, [pc, #432]	; (8009304 <tcp_receive+0x888>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	899b      	ldrh	r3, [r3, #12]
 8009158:	b29b      	uxth	r3, r3
 800915a:	4618      	mov	r0, r3
 800915c:	f7fa fdd0 	bl	8003d00 <lwip_htons>
 8009160:	4603      	mov	r3, r0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d01f      	beq.n	80091ac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800916c:	4b65      	ldr	r3, [pc, #404]	; (8009304 <tcp_receive+0x888>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	899b      	ldrh	r3, [r3, #12]
 8009172:	b29b      	uxth	r3, r3
 8009174:	b21b      	sxth	r3, r3
 8009176:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800917a:	b21c      	sxth	r4, r3
 800917c:	4b61      	ldr	r3, [pc, #388]	; (8009304 <tcp_receive+0x888>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	899b      	ldrh	r3, [r3, #12]
 8009182:	b29b      	uxth	r3, r3
 8009184:	4618      	mov	r0, r3
 8009186:	f7fa fdbb 	bl	8003d00 <lwip_htons>
 800918a:	4603      	mov	r3, r0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	b29b      	uxth	r3, r3
 8009190:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009194:	b29b      	uxth	r3, r3
 8009196:	4618      	mov	r0, r3
 8009198:	f7fa fdb2 	bl	8003d00 <lwip_htons>
 800919c:	4603      	mov	r3, r0
 800919e:	b21b      	sxth	r3, r3
 80091a0:	4323      	orrs	r3, r4
 80091a2:	b21a      	sxth	r2, r3
 80091a4:	4b57      	ldr	r3, [pc, #348]	; (8009304 <tcp_receive+0x888>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	b292      	uxth	r2, r2
 80091aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091b0:	4b54      	ldr	r3, [pc, #336]	; (8009304 <tcp_receive+0x888>)
 80091b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80091b4:	4b53      	ldr	r3, [pc, #332]	; (8009304 <tcp_receive+0x888>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	899b      	ldrh	r3, [r3, #12]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fa fd9f 	bl	8003d00 <lwip_htons>
 80091c2:	4603      	mov	r3, r0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <tcp_receive+0x75e>
            inseg.len -= 1;
 80091ce:	4b4d      	ldr	r3, [pc, #308]	; (8009304 <tcp_receive+0x888>)
 80091d0:	891b      	ldrh	r3, [r3, #8]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	4b4b      	ldr	r3, [pc, #300]	; (8009304 <tcp_receive+0x888>)
 80091d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80091da:	4b4a      	ldr	r3, [pc, #296]	; (8009304 <tcp_receive+0x888>)
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4a49      	ldr	r2, [pc, #292]	; (8009304 <tcp_receive+0x888>)
 80091e0:	8912      	ldrh	r2, [r2, #8]
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fb fea1 	bl	8004f2c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80091ea:	4b46      	ldr	r3, [pc, #280]	; (8009304 <tcp_receive+0x888>)
 80091ec:	891c      	ldrh	r4, [r3, #8]
 80091ee:	4b45      	ldr	r3, [pc, #276]	; (8009304 <tcp_receive+0x888>)
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	899b      	ldrh	r3, [r3, #12]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fa fd82 	bl	8003d00 <lwip_htons>
 80091fc:	4603      	mov	r3, r0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <tcp_receive+0x790>
 8009208:	2301      	movs	r3, #1
 800920a:	e000      	b.n	800920e <tcp_receive+0x792>
 800920c:	2300      	movs	r3, #0
 800920e:	4423      	add	r3, r4
 8009210:	b29a      	uxth	r2, r3
 8009212:	4b3d      	ldr	r3, [pc, #244]	; (8009308 <tcp_receive+0x88c>)
 8009214:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009216:	4b3c      	ldr	r3, [pc, #240]	; (8009308 <tcp_receive+0x88c>)
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	4b38      	ldr	r3, [pc, #224]	; (8009300 <tcp_receive+0x884>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	441a      	add	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800922a:	440b      	add	r3, r1
 800922c:	429a      	cmp	r2, r3
 800922e:	d006      	beq.n	800923e <tcp_receive+0x7c2>
 8009230:	4b36      	ldr	r3, [pc, #216]	; (800930c <tcp_receive+0x890>)
 8009232:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009236:	4936      	ldr	r1, [pc, #216]	; (8009310 <tcp_receive+0x894>)
 8009238:	4836      	ldr	r0, [pc, #216]	; (8009314 <tcp_receive+0x898>)
 800923a:	f005 f9a9 	bl	800e590 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80e7 	beq.w	8009416 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009248:	4b2e      	ldr	r3, [pc, #184]	; (8009304 <tcp_receive+0x888>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	899b      	ldrh	r3, [r3, #12]
 800924e:	b29b      	uxth	r3, r3
 8009250:	4618      	mov	r0, r3
 8009252:	f7fa fd55 	bl	8003d00 <lwip_htons>
 8009256:	4603      	mov	r3, r0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d010      	beq.n	8009284 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009262:	e00a      	b.n	800927a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009268:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7fd fcae 	bl	8006bd6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <tcp_receive+0x7e8>
 8009282:	e0c8      	b.n	8009416 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009288:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800928a:	e052      	b.n	8009332 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800928c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	899b      	ldrh	r3, [r3, #12]
 8009292:	b29b      	uxth	r3, r3
 8009294:	4618      	mov	r0, r3
 8009296:	f7fa fd33 	bl	8003d00 <lwip_htons>
 800929a:	4603      	mov	r3, r0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d03d      	beq.n	8009322 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80092a6:	4b17      	ldr	r3, [pc, #92]	; (8009304 <tcp_receive+0x888>)
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	899b      	ldrh	r3, [r3, #12]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fa fd26 	bl	8003d00 <lwip_htons>
 80092b4:	4603      	mov	r3, r0
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d130      	bne.n	8009322 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80092c0:	4b10      	ldr	r3, [pc, #64]	; (8009304 <tcp_receive+0x888>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	899b      	ldrh	r3, [r3, #12]
 80092c6:	b29c      	uxth	r4, r3
 80092c8:	2001      	movs	r0, #1
 80092ca:	f7fa fd19 	bl	8003d00 <lwip_htons>
 80092ce:	4603      	mov	r3, r0
 80092d0:	461a      	mov	r2, r3
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <tcp_receive+0x888>)
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	4322      	orrs	r2, r4
 80092d8:	b292      	uxth	r2, r2
 80092da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80092dc:	4b09      	ldr	r3, [pc, #36]	; (8009304 <tcp_receive+0x888>)
 80092de:	891c      	ldrh	r4, [r3, #8]
 80092e0:	4b08      	ldr	r3, [pc, #32]	; (8009304 <tcp_receive+0x888>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	899b      	ldrh	r3, [r3, #12]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fa fd09 	bl	8003d00 <lwip_htons>
 80092ee:	4603      	mov	r3, r0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00e      	beq.n	8009318 <tcp_receive+0x89c>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e00d      	b.n	800931a <tcp_receive+0x89e>
 80092fe:	bf00      	nop
 8009300:	20000074 	.word	0x20000074
 8009304:	20000054 	.word	0x20000054
 8009308:	2000007e 	.word	0x2000007e
 800930c:	08010be4 	.word	0x08010be4
 8009310:	08010f8c 	.word	0x08010f8c
 8009314:	08010c30 	.word	0x08010c30
 8009318:	2300      	movs	r3, #0
 800931a:	4423      	add	r3, r4
 800931c:	b29a      	uxth	r2, r3
 800931e:	4b98      	ldr	r3, [pc, #608]	; (8009580 <tcp_receive+0xb04>)
 8009320:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009324:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800932c:	6938      	ldr	r0, [r7, #16]
 800932e:	f7fd fc52 	bl	8006bd6 <tcp_seg_free>
            while (next &&
 8009332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00e      	beq.n	8009356 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009338:	4b91      	ldr	r3, [pc, #580]	; (8009580 <tcp_receive+0xb04>)
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	4b91      	ldr	r3, [pc, #580]	; (8009584 <tcp_receive+0xb08>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	441a      	add	r2, r3
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800934c:	8909      	ldrh	r1, [r1, #8]
 800934e:	440b      	add	r3, r1
 8009350:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009352:	2b00      	cmp	r3, #0
 8009354:	da9a      	bge.n	800928c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d059      	beq.n	8009410 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800935c:	4b88      	ldr	r3, [pc, #544]	; (8009580 <tcp_receive+0xb04>)
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	4b88      	ldr	r3, [pc, #544]	; (8009584 <tcp_receive+0xb08>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	441a      	add	r2, r3
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd4d      	ble.n	8009410 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	b29a      	uxth	r2, r3
 800937c:	4b81      	ldr	r3, [pc, #516]	; (8009584 <tcp_receive+0xb08>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	b29a      	uxth	r2, r3
 8009386:	4b80      	ldr	r3, [pc, #512]	; (8009588 <tcp_receive+0xb0c>)
 8009388:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800938a:	4b7f      	ldr	r3, [pc, #508]	; (8009588 <tcp_receive+0xb0c>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	899b      	ldrh	r3, [r3, #12]
 8009390:	b29b      	uxth	r3, r3
 8009392:	4618      	mov	r0, r3
 8009394:	f7fa fcb4 	bl	8003d00 <lwip_htons>
 8009398:	4603      	mov	r3, r0
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <tcp_receive+0x934>
                inseg.len -= 1;
 80093a4:	4b78      	ldr	r3, [pc, #480]	; (8009588 <tcp_receive+0xb0c>)
 80093a6:	891b      	ldrh	r3, [r3, #8]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	4b76      	ldr	r3, [pc, #472]	; (8009588 <tcp_receive+0xb0c>)
 80093ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80093b0:	4b75      	ldr	r3, [pc, #468]	; (8009588 <tcp_receive+0xb0c>)
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	4a74      	ldr	r2, [pc, #464]	; (8009588 <tcp_receive+0xb0c>)
 80093b6:	8912      	ldrh	r2, [r2, #8]
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fb fdb6 	bl	8004f2c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80093c0:	4b71      	ldr	r3, [pc, #452]	; (8009588 <tcp_receive+0xb0c>)
 80093c2:	891c      	ldrh	r4, [r3, #8]
 80093c4:	4b70      	ldr	r3, [pc, #448]	; (8009588 <tcp_receive+0xb0c>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	899b      	ldrh	r3, [r3, #12]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fa fc97 	bl	8003d00 <lwip_htons>
 80093d2:	4603      	mov	r3, r0
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <tcp_receive+0x966>
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <tcp_receive+0x968>
 80093e2:	2300      	movs	r3, #0
 80093e4:	4423      	add	r3, r4
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	4b65      	ldr	r3, [pc, #404]	; (8009580 <tcp_receive+0xb04>)
 80093ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80093ec:	4b64      	ldr	r3, [pc, #400]	; (8009580 <tcp_receive+0xb04>)
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b64      	ldr	r3, [pc, #400]	; (8009584 <tcp_receive+0xb08>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	441a      	add	r2, r3
 80093f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d006      	beq.n	8009410 <tcp_receive+0x994>
 8009402:	4b62      	ldr	r3, [pc, #392]	; (800958c <tcp_receive+0xb10>)
 8009404:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009408:	4961      	ldr	r1, [pc, #388]	; (8009590 <tcp_receive+0xb14>)
 800940a:	4862      	ldr	r0, [pc, #392]	; (8009594 <tcp_receive+0xb18>)
 800940c:	f005 f8c0 	bl	800e590 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009414:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009416:	4b5a      	ldr	r3, [pc, #360]	; (8009580 <tcp_receive+0xb04>)
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	4b59      	ldr	r3, [pc, #356]	; (8009584 <tcp_receive+0xb08>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	441a      	add	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800942a:	4b55      	ldr	r3, [pc, #340]	; (8009580 <tcp_receive+0xb04>)
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d206      	bcs.n	8009440 <tcp_receive+0x9c4>
 8009432:	4b56      	ldr	r3, [pc, #344]	; (800958c <tcp_receive+0xb10>)
 8009434:	f240 6207 	movw	r2, #1543	; 0x607
 8009438:	4957      	ldr	r1, [pc, #348]	; (8009598 <tcp_receive+0xb1c>)
 800943a:	4856      	ldr	r0, [pc, #344]	; (8009594 <tcp_receive+0xb18>)
 800943c:	f005 f8a8 	bl	800e590 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009444:	4b4e      	ldr	r3, [pc, #312]	; (8009580 <tcp_receive+0xb04>)
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fc fe99 	bl	8006188 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009456:	4b4c      	ldr	r3, [pc, #304]	; (8009588 <tcp_receive+0xb0c>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	891b      	ldrh	r3, [r3, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d006      	beq.n	800946e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009460:	4b49      	ldr	r3, [pc, #292]	; (8009588 <tcp_receive+0xb0c>)
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	4a4d      	ldr	r2, [pc, #308]	; (800959c <tcp_receive+0xb20>)
 8009466:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009468:	4b47      	ldr	r3, [pc, #284]	; (8009588 <tcp_receive+0xb0c>)
 800946a:	2200      	movs	r2, #0
 800946c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800946e:	4b46      	ldr	r3, [pc, #280]	; (8009588 <tcp_receive+0xb0c>)
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	899b      	ldrh	r3, [r3, #12]
 8009474:	b29b      	uxth	r3, r3
 8009476:	4618      	mov	r0, r3
 8009478:	f7fa fc42 	bl	8003d00 <lwip_htons>
 800947c:	4603      	mov	r3, r0
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 80b8 	beq.w	80095fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800948a:	4b45      	ldr	r3, [pc, #276]	; (80095a0 <tcp_receive+0xb24>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	f043 0320 	orr.w	r3, r3, #32
 8009492:	b2da      	uxtb	r2, r3
 8009494:	4b42      	ldr	r3, [pc, #264]	; (80095a0 <tcp_receive+0xb24>)
 8009496:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009498:	e0af      	b.n	80095fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4a36      	ldr	r2, [pc, #216]	; (8009584 <tcp_receive+0xb08>)
 80094aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	891b      	ldrh	r3, [r3, #8]
 80094b0:	461c      	mov	r4, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	899b      	ldrh	r3, [r3, #12]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fa fc20 	bl	8003d00 <lwip_htons>
 80094c0:	4603      	mov	r3, r0
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	f003 0303 	and.w	r3, r3, #3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <tcp_receive+0xa54>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e000      	b.n	80094d2 <tcp_receive+0xa56>
 80094d0:	2300      	movs	r3, #0
 80094d2:	191a      	adds	r2, r3, r4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	441a      	add	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e2:	461c      	mov	r4, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	891b      	ldrh	r3, [r3, #8]
 80094e8:	461d      	mov	r5, r3
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	899b      	ldrh	r3, [r3, #12]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fa fc04 	bl	8003d00 <lwip_htons>
 80094f8:	4603      	mov	r3, r0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <tcp_receive+0xa8c>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <tcp_receive+0xa8e>
 8009508:	2300      	movs	r3, #0
 800950a:	442b      	add	r3, r5
 800950c:	429c      	cmp	r4, r3
 800950e:	d206      	bcs.n	800951e <tcp_receive+0xaa2>
 8009510:	4b1e      	ldr	r3, [pc, #120]	; (800958c <tcp_receive+0xb10>)
 8009512:	f240 622b 	movw	r2, #1579	; 0x62b
 8009516:	4923      	ldr	r1, [pc, #140]	; (80095a4 <tcp_receive+0xb28>)
 8009518:	481e      	ldr	r0, [pc, #120]	; (8009594 <tcp_receive+0xb18>)
 800951a:	f005 f839 	bl	800e590 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	891b      	ldrh	r3, [r3, #8]
 8009522:	461c      	mov	r4, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	899b      	ldrh	r3, [r3, #12]
 800952a:	b29b      	uxth	r3, r3
 800952c:	4618      	mov	r0, r3
 800952e:	f7fa fbe7 	bl	8003d00 <lwip_htons>
 8009532:	4603      	mov	r3, r0
 8009534:	b2db      	uxtb	r3, r3
 8009536:	f003 0303 	and.w	r3, r3, #3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <tcp_receive+0xac6>
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <tcp_receive+0xac8>
 8009542:	2300      	movs	r3, #0
 8009544:	1919      	adds	r1, r3, r4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800954a:	b28b      	uxth	r3, r1
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7fc fe17 	bl	8006188 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	891b      	ldrh	r3, [r3, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d028      	beq.n	80095b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009564:	4b0d      	ldr	r3, [pc, #52]	; (800959c <tcp_receive+0xb20>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01d      	beq.n	80095a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <tcp_receive+0xb20>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4619      	mov	r1, r3
 8009576:	4610      	mov	r0, r2
 8009578:	f7fb ff1e 	bl	80053b8 <pbuf_cat>
 800957c:	e018      	b.n	80095b0 <tcp_receive+0xb34>
 800957e:	bf00      	nop
 8009580:	2000007e 	.word	0x2000007e
 8009584:	20000074 	.word	0x20000074
 8009588:	20000054 	.word	0x20000054
 800958c:	08010be4 	.word	0x08010be4
 8009590:	08010fc4 	.word	0x08010fc4
 8009594:	08010c30 	.word	0x08010c30
 8009598:	08011000 	.word	0x08011000
 800959c:	20000084 	.word	0x20000084
 80095a0:	20000081 	.word	0x20000081
 80095a4:	08011020 	.word	0x08011020
            } else {
              recv_data = cseg->p;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	4a70      	ldr	r2, [pc, #448]	; (8009770 <tcp_receive+0xcf4>)
 80095ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2200      	movs	r2, #0
 80095b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	899b      	ldrh	r3, [r3, #12]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fa fb9e 	bl	8003d00 <lwip_htons>
 80095c4:	4603      	mov	r3, r0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00d      	beq.n	80095ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80095d0:	4b68      	ldr	r3, [pc, #416]	; (8009774 <tcp_receive+0xcf8>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f043 0320 	orr.w	r3, r3, #32
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	4b66      	ldr	r3, [pc, #408]	; (8009774 <tcp_receive+0xcf8>)
 80095dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	7d1b      	ldrb	r3, [r3, #20]
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d102      	bne.n	80095ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2207      	movs	r2, #7
 80095ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80095f4:	68b8      	ldr	r0, [r7, #8]
 80095f6:	f7fd faee 	bl	8006bd6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d008      	beq.n	8009614 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	685a      	ldr	r2, [r3, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800960e:	429a      	cmp	r2, r3
 8009610:	f43f af43 	beq.w	800949a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	8b5b      	ldrh	r3, [r3, #26]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00e      	beq.n	800963e <tcp_receive+0xbc2>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	8b5b      	ldrh	r3, [r3, #26]
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	835a      	strh	r2, [r3, #26]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	8b5b      	ldrh	r3, [r3, #26]
 8009632:	f043 0302 	orr.w	r3, r3, #2
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800963c:	e188      	b.n	8009950 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	8b5b      	ldrh	r3, [r3, #26]
 8009642:	f043 0301 	orr.w	r3, r3, #1
 8009646:	b29a      	uxth	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800964c:	e180      	b.n	8009950 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009656:	4848      	ldr	r0, [pc, #288]	; (8009778 <tcp_receive+0xcfc>)
 8009658:	f7fd faf4 	bl	8006c44 <tcp_seg_copy>
 800965c:	4602      	mov	r2, r0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	675a      	str	r2, [r3, #116]	; 0x74
 8009662:	e16d      	b.n	8009940 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009664:	2300      	movs	r3, #0
 8009666:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966c:	63bb      	str	r3, [r7, #56]	; 0x38
 800966e:	e157      	b.n	8009920 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	4b41      	ldr	r3, [pc, #260]	; (800977c <tcp_receive+0xd00>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d11d      	bne.n	80096ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800967e:	4b3e      	ldr	r3, [pc, #248]	; (8009778 <tcp_receive+0xcfc>)
 8009680:	891a      	ldrh	r2, [r3, #8]
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	891b      	ldrh	r3, [r3, #8]
 8009686:	429a      	cmp	r2, r3
 8009688:	f240 814f 	bls.w	800992a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800968c:	483a      	ldr	r0, [pc, #232]	; (8009778 <tcp_receive+0xcfc>)
 800968e:	f7fd fad9 	bl	8006c44 <tcp_seg_copy>
 8009692:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8149 	beq.w	800992e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800969c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	e002      	b.n	80096b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80096b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f7ff f8de 	bl	8008874 <tcp_oos_insert_segment>
                }
                break;
 80096b8:	e139      	b.n	800992e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80096ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d117      	bne.n	80096f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80096c0:	4b2e      	ldr	r3, [pc, #184]	; (800977c <tcp_receive+0xd00>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	da57      	bge.n	8009780 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80096d0:	4829      	ldr	r0, [pc, #164]	; (8009778 <tcp_receive+0xcfc>)
 80096d2:	f7fd fab7 	bl	8006c44 <tcp_seg_copy>
 80096d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f000 8129 	beq.w	8009932 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80096e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096e8:	69b8      	ldr	r0, [r7, #24]
 80096ea:	f7ff f8c3 	bl	8008874 <tcp_oos_insert_segment>
                  }
                  break;
 80096ee:	e120      	b.n	8009932 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096f0:	4b22      	ldr	r3, [pc, #136]	; (800977c <tcp_receive+0xd00>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	3b01      	subs	r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	db3e      	blt.n	8009780 <tcp_receive+0xd04>
 8009702:	4b1e      	ldr	r3, [pc, #120]	; (800977c <tcp_receive+0xd00>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	1ad3      	subs	r3, r2, r3
 800970e:	3301      	adds	r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	dc35      	bgt.n	8009780 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009714:	4818      	ldr	r0, [pc, #96]	; (8009778 <tcp_receive+0xcfc>)
 8009716:	f7fd fa95 	bl	8006c44 <tcp_seg_copy>
 800971a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 8109 	beq.w	8009936 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972c:	8912      	ldrh	r2, [r2, #8]
 800972e:	441a      	add	r2, r3
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <tcp_receive+0xd00>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	dd12      	ble.n	8009760 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800973a:	4b10      	ldr	r3, [pc, #64]	; (800977c <tcp_receive+0xd00>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	b29a      	uxth	r2, r3
 8009740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	b29b      	uxth	r3, r3
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	b29a      	uxth	r2, r3
 800974c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009756:	891b      	ldrh	r3, [r3, #8]
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f7fb fbe6 	bl	8004f2c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009768:	69f8      	ldr	r0, [r7, #28]
 800976a:	f7ff f883 	bl	8008874 <tcp_oos_insert_segment>
                  }
                  break;
 800976e:	e0e2      	b.n	8009936 <tcp_receive+0xeba>
 8009770:	20000084 	.word	0x20000084
 8009774:	20000081 	.word	0x20000081
 8009778:	20000054 	.word	0x20000054
 800977c:	20000074 	.word	0x20000074
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f040 80c6 	bne.w	800991a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800978e:	4b80      	ldr	r3, [pc, #512]	; (8009990 <tcp_receive+0xf14>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800979a:	2b00      	cmp	r3, #0
 800979c:	f340 80bd 	ble.w	800991a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	899b      	ldrh	r3, [r3, #12]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fa faa9 	bl	8003d00 <lwip_htons>
 80097ae:	4603      	mov	r3, r0
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f040 80bf 	bne.w	800993a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80097bc:	4875      	ldr	r0, [pc, #468]	; (8009994 <tcp_receive+0xf18>)
 80097be:	f7fd fa41 	bl	8006c44 <tcp_seg_copy>
 80097c2:	4602      	mov	r2, r0
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 80b6 	beq.w	800993e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097da:	8912      	ldrh	r2, [r2, #8]
 80097dc:	441a      	add	r2, r3
 80097de:	4b6c      	ldr	r3, [pc, #432]	; (8009990 <tcp_receive+0xf14>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd12      	ble.n	800980e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80097e8:	4b69      	ldr	r3, [pc, #420]	; (8009990 <tcp_receive+0xf14>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009804:	891b      	ldrh	r3, [r3, #8]
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7fb fb8f 	bl	8004f2c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800980e:	4b62      	ldr	r3, [pc, #392]	; (8009998 <tcp_receive+0xf1c>)
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	4b5e      	ldr	r3, [pc, #376]	; (8009990 <tcp_receive+0xf14>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	441a      	add	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009822:	440b      	add	r3, r1
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	f340 8089 	ble.w	800993e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800982c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	899b      	ldrh	r3, [r3, #12]
 8009834:	b29b      	uxth	r3, r3
 8009836:	4618      	mov	r0, r3
 8009838:	f7fa fa62 	bl	8003d00 <lwip_htons>
 800983c:	4603      	mov	r3, r0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d022      	beq.n	800988e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	899b      	ldrh	r3, [r3, #12]
 8009850:	b29b      	uxth	r3, r3
 8009852:	b21b      	sxth	r3, r3
 8009854:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009858:	b21c      	sxth	r4, r3
 800985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	899b      	ldrh	r3, [r3, #12]
 8009862:	b29b      	uxth	r3, r3
 8009864:	4618      	mov	r0, r3
 8009866:	f7fa fa4b 	bl	8003d00 <lwip_htons>
 800986a:	4603      	mov	r3, r0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	b29b      	uxth	r3, r3
 8009870:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009874:	b29b      	uxth	r3, r3
 8009876:	4618      	mov	r0, r3
 8009878:	f7fa fa42 	bl	8003d00 <lwip_htons>
 800987c:	4603      	mov	r3, r0
 800987e:	b21b      	sxth	r3, r3
 8009880:	4323      	orrs	r3, r4
 8009882:	b21a      	sxth	r2, r3
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	b292      	uxth	r2, r2
 800988c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	b29a      	uxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009898:	4413      	add	r3, r2
 800989a:	b299      	uxth	r1, r3
 800989c:	4b3c      	ldr	r3, [pc, #240]	; (8009990 <tcp_receive+0xf14>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	1a8a      	subs	r2, r1, r2
 80098a8:	b292      	uxth	r2, r2
 80098aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	891b      	ldrh	r3, [r3, #8]
 80098b8:	4619      	mov	r1, r3
 80098ba:	4610      	mov	r0, r2
 80098bc:	f7fb fb36 	bl	8004f2c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	891c      	ldrh	r4, [r3, #8]
 80098c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	899b      	ldrh	r3, [r3, #12]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fa fa15 	bl	8003d00 <lwip_htons>
 80098d6:	4603      	mov	r3, r0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <tcp_receive+0xe6a>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <tcp_receive+0xe6c>
 80098e6:	2300      	movs	r3, #0
 80098e8:	4423      	add	r3, r4
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	4b2a      	ldr	r3, [pc, #168]	; (8009998 <tcp_receive+0xf1c>)
 80098ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80098f0:	4b29      	ldr	r3, [pc, #164]	; (8009998 <tcp_receive+0xf1c>)
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b26      	ldr	r3, [pc, #152]	; (8009990 <tcp_receive+0xf14>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	441a      	add	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009904:	440b      	add	r3, r1
 8009906:	429a      	cmp	r2, r3
 8009908:	d019      	beq.n	800993e <tcp_receive+0xec2>
 800990a:	4b24      	ldr	r3, [pc, #144]	; (800999c <tcp_receive+0xf20>)
 800990c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009910:	4923      	ldr	r1, [pc, #140]	; (80099a0 <tcp_receive+0xf24>)
 8009912:	4824      	ldr	r0, [pc, #144]	; (80099a4 <tcp_receive+0xf28>)
 8009914:	f004 fe3c 	bl	800e590 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009918:	e011      	b.n	800993e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	2b00      	cmp	r3, #0
 8009924:	f47f aea4 	bne.w	8009670 <tcp_receive+0xbf4>
 8009928:	e00a      	b.n	8009940 <tcp_receive+0xec4>
                break;
 800992a:	bf00      	nop
 800992c:	e008      	b.n	8009940 <tcp_receive+0xec4>
                break;
 800992e:	bf00      	nop
 8009930:	e006      	b.n	8009940 <tcp_receive+0xec4>
                  break;
 8009932:	bf00      	nop
 8009934:	e004      	b.n	8009940 <tcp_receive+0xec4>
                  break;
 8009936:	bf00      	nop
 8009938:	e002      	b.n	8009940 <tcp_receive+0xec4>
                  break;
 800993a:	bf00      	nop
 800993c:	e000      	b.n	8009940 <tcp_receive+0xec4>
                break;
 800993e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 fe8f 	bl	800b664 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009946:	e003      	b.n	8009950 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fe8b 	bl	800b664 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800994e:	e01a      	b.n	8009986 <tcp_receive+0xf0a>
 8009950:	e019      	b.n	8009986 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009952:	4b0f      	ldr	r3, [pc, #60]	; (8009990 <tcp_receive+0xf14>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	db0a      	blt.n	8009976 <tcp_receive+0xefa>
 8009960:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <tcp_receive+0xf14>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800996c:	440b      	add	r3, r1
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	3301      	adds	r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	dd07      	ble.n	8009986 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	8b5b      	ldrh	r3, [r3, #26]
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	b29a      	uxth	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009984:	e7ff      	b.n	8009986 <tcp_receive+0xf0a>
 8009986:	bf00      	nop
 8009988:	3750      	adds	r7, #80	; 0x50
 800998a:	46bd      	mov	sp, r7
 800998c:	bdb0      	pop	{r4, r5, r7, pc}
 800998e:	bf00      	nop
 8009990:	20000074 	.word	0x20000074
 8009994:	20000054 	.word	0x20000054
 8009998:	2000007e 	.word	0x2000007e
 800999c:	08010be4 	.word	0x08010be4
 80099a0:	08010f8c 	.word	0x08010f8c
 80099a4:	08010c30 	.word	0x08010c30

080099a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80099ae:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <tcp_get_next_optbyte+0x5c>)
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	b291      	uxth	r1, r2
 80099b6:	4a13      	ldr	r2, [pc, #76]	; (8009a04 <tcp_get_next_optbyte+0x5c>)
 80099b8:	8011      	strh	r1, [r2, #0]
 80099ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80099bc:	4b12      	ldr	r3, [pc, #72]	; (8009a08 <tcp_get_next_optbyte+0x60>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <tcp_get_next_optbyte+0x26>
 80099c4:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <tcp_get_next_optbyte+0x64>)
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	88fa      	ldrh	r2, [r7, #6]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d208      	bcs.n	80099e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80099ce:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <tcp_get_next_optbyte+0x68>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3314      	adds	r3, #20
 80099d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	4413      	add	r3, r2
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	e00b      	b.n	80099f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <tcp_get_next_optbyte+0x64>)
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80099ee:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <tcp_get_next_optbyte+0x60>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	797b      	ldrb	r3, [r7, #5]
 80099f4:	4413      	add	r3, r2
 80099f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	20000070 	.word	0x20000070
 8009a08:	2000006c 	.word	0x2000006c
 8009a0c:	2000006a 	.word	0x2000006a
 8009a10:	20000064 	.word	0x20000064

08009a14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <tcp_parseopt+0x1c>
 8009a22:	4b32      	ldr	r3, [pc, #200]	; (8009aec <tcp_parseopt+0xd8>)
 8009a24:	f240 727d 	movw	r2, #1917	; 0x77d
 8009a28:	4931      	ldr	r1, [pc, #196]	; (8009af0 <tcp_parseopt+0xdc>)
 8009a2a:	4832      	ldr	r0, [pc, #200]	; (8009af4 <tcp_parseopt+0xe0>)
 8009a2c:	f004 fdb0 	bl	800e590 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009a30:	4b31      	ldr	r3, [pc, #196]	; (8009af8 <tcp_parseopt+0xe4>)
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d055      	beq.n	8009ae4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009a38:	4b30      	ldr	r3, [pc, #192]	; (8009afc <tcp_parseopt+0xe8>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	e045      	b.n	8009acc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009a40:	f7ff ffb2 	bl	80099a8 <tcp_get_next_optbyte>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d006      	beq.n	8009a5c <tcp_parseopt+0x48>
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	dc2b      	bgt.n	8009aaa <tcp_parseopt+0x96>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d041      	beq.n	8009ada <tcp_parseopt+0xc6>
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d127      	bne.n	8009aaa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009a5a:	e037      	b.n	8009acc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009a5c:	f7ff ffa4 	bl	80099a8 <tcp_get_next_optbyte>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d13b      	bne.n	8009ade <tcp_parseopt+0xca>
 8009a66:	4b25      	ldr	r3, [pc, #148]	; (8009afc <tcp_parseopt+0xe8>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	4a22      	ldr	r2, [pc, #136]	; (8009af8 <tcp_parseopt+0xe4>)
 8009a6e:	8812      	ldrh	r2, [r2, #0]
 8009a70:	4293      	cmp	r3, r2
 8009a72:	da34      	bge.n	8009ade <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009a74:	f7ff ff98 	bl	80099a8 <tcp_get_next_optbyte>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	021b      	lsls	r3, r3, #8
 8009a7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009a80:	f7ff ff92 	bl	80099a8 <tcp_get_next_optbyte>
 8009a84:	4603      	mov	r3, r0
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	89bb      	ldrh	r3, [r7, #12]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009a8e:	89bb      	ldrh	r3, [r7, #12]
 8009a90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009a94:	d804      	bhi.n	8009aa0 <tcp_parseopt+0x8c>
 8009a96:	89bb      	ldrh	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <tcp_parseopt+0x8c>
 8009a9c:	89ba      	ldrh	r2, [r7, #12]
 8009a9e:	e001      	b.n	8009aa4 <tcp_parseopt+0x90>
 8009aa0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009aa8:	e010      	b.n	8009acc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009aaa:	f7ff ff7d 	bl	80099a8 <tcp_get_next_optbyte>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d914      	bls.n	8009ae2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <tcp_parseopt+0xe8>)
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	3b02      	subs	r3, #2
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <tcp_parseopt+0xe8>)
 8009aca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009acc:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <tcp_parseopt+0xe8>)
 8009ace:	881a      	ldrh	r2, [r3, #0]
 8009ad0:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <tcp_parseopt+0xe4>)
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d3b3      	bcc.n	8009a40 <tcp_parseopt+0x2c>
 8009ad8:	e004      	b.n	8009ae4 <tcp_parseopt+0xd0>
          return;
 8009ada:	bf00      	nop
 8009adc:	e002      	b.n	8009ae4 <tcp_parseopt+0xd0>
            return;
 8009ade:	bf00      	nop
 8009ae0:	e000      	b.n	8009ae4 <tcp_parseopt+0xd0>
            return;
 8009ae2:	bf00      	nop
      }
    }
  }
}
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	08010be4 	.word	0x08010be4
 8009af0:	08011048 	.word	0x08011048
 8009af4:	08010c30 	.word	0x08010c30
 8009af8:	20000068 	.word	0x20000068
 8009afc:	20000070 	.word	0x20000070

08009b00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <tcp_trigger_input_pcb_close+0x1c>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	f043 0310 	orr.w	r3, r3, #16
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <tcp_trigger_input_pcb_close+0x1c>)
 8009b10:	701a      	strb	r2, [r3, #0]
}
 8009b12:	bf00      	nop
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	20000081 	.word	0x20000081

08009b20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <tcp_route+0x28>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	7a1b      	ldrb	r3, [r3, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d006      	beq.n	8009b48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	7a1b      	ldrb	r3, [r3, #8]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fb f81a 	bl	8004b78 <netif_get_by_index>
 8009b44:	4603      	mov	r3, r0
 8009b46:	e003      	b.n	8009b50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f003 fad9 	bl	800d100 <ip4_route>
 8009b4e:	4603      	mov	r3, r0
  }
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	4613      	mov	r3, r2
 8009b66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <tcp_create_segment+0x22>
 8009b6e:	4b44      	ldr	r3, [pc, #272]	; (8009c80 <tcp_create_segment+0x128>)
 8009b70:	22a3      	movs	r2, #163	; 0xa3
 8009b72:	4944      	ldr	r1, [pc, #272]	; (8009c84 <tcp_create_segment+0x12c>)
 8009b74:	4844      	ldr	r0, [pc, #272]	; (8009c88 <tcp_create_segment+0x130>)
 8009b76:	f004 fd0b 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <tcp_create_segment+0x34>
 8009b80:	4b3f      	ldr	r3, [pc, #252]	; (8009c80 <tcp_create_segment+0x128>)
 8009b82:	22a4      	movs	r2, #164	; 0xa4
 8009b84:	4941      	ldr	r1, [pc, #260]	; (8009c8c <tcp_create_segment+0x134>)
 8009b86:	4840      	ldr	r0, [pc, #256]	; (8009c88 <tcp_create_segment+0x130>)
 8009b88:	f004 fd02 	bl	800e590 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009b8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009b9a:	2003      	movs	r0, #3
 8009b9c:	f7fa fcee 	bl	800457c <memp_malloc>
 8009ba0:	6138      	str	r0, [r7, #16]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f7fb fb43 	bl	8005234 <pbuf_free>
    return NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e061      	b.n	8009c76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009bb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	891a      	ldrh	r2, [r3, #8]
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d205      	bcs.n	8009bde <tcp_create_segment+0x86>
 8009bd2:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <tcp_create_segment+0x128>)
 8009bd4:	22b0      	movs	r2, #176	; 0xb0
 8009bd6:	492e      	ldr	r1, [pc, #184]	; (8009c90 <tcp_create_segment+0x138>)
 8009bd8:	482b      	ldr	r0, [pc, #172]	; (8009c88 <tcp_create_segment+0x130>)
 8009bda:	f004 fcd9 	bl	800e590 <iprintf>
  seg->len = p->tot_len - optlen;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	891a      	ldrh	r2, [r3, #8]
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009bee:	2114      	movs	r1, #20
 8009bf0:	68b8      	ldr	r0, [r7, #8]
 8009bf2:	f7fb fa89 	bl	8005108 <pbuf_add_header>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009bfc:	6938      	ldr	r0, [r7, #16]
 8009bfe:	f7fc ffea 	bl	8006bd6 <tcp_seg_free>
    return NULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	e037      	b.n	8009c76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	8ada      	ldrh	r2, [r3, #22]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	68dc      	ldr	r4, [r3, #12]
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fa f871 	bl	8003d00 <lwip_htons>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8b1a      	ldrh	r2, [r3, #24]
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	68dc      	ldr	r4, [r3, #12]
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f7fa f868 	bl	8003d00 <lwip_htons>
 8009c30:	4603      	mov	r3, r0
 8009c32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	68dc      	ldr	r4, [r3, #12]
 8009c38:	6838      	ldr	r0, [r7, #0]
 8009c3a:	f7fa f876 	bl	8003d2a <lwip_htonl>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	089b      	lsrs	r3, r3, #2
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	3305      	adds	r3, #5
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	031b      	lsls	r3, r3, #12
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4313      	orrs	r3, r2
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	68dc      	ldr	r4, [r3, #12]
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f7fa f84e 	bl	8003d00 <lwip_htons>
 8009c64:	4603      	mov	r3, r0
 8009c66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	749a      	strb	r2, [r3, #18]
 8009c70:	2200      	movs	r2, #0
 8009c72:	74da      	strb	r2, [r3, #19]
  return seg;
 8009c74:	693b      	ldr	r3, [r7, #16]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	371c      	adds	r7, #28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd90      	pop	{r4, r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	08011064 	.word	0x08011064
 8009c84:	08011098 	.word	0x08011098
 8009c88:	080110b8 	.word	0x080110b8
 8009c8c:	080110e0 	.word	0x080110e0
 8009c90:	08011104 	.word	0x08011104

08009c94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	607b      	str	r3, [r7, #4]
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	81bb      	strh	r3, [r7, #12]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009ca8:	89bb      	ldrh	r3, [r7, #12]
 8009caa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d105      	bne.n	8009cbe <tcp_pbuf_prealloc+0x2a>
 8009cb2:	4b30      	ldr	r3, [pc, #192]	; (8009d74 <tcp_pbuf_prealloc+0xe0>)
 8009cb4:	22e8      	movs	r2, #232	; 0xe8
 8009cb6:	4930      	ldr	r1, [pc, #192]	; (8009d78 <tcp_pbuf_prealloc+0xe4>)
 8009cb8:	4830      	ldr	r0, [pc, #192]	; (8009d7c <tcp_pbuf_prealloc+0xe8>)
 8009cba:	f004 fc69 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <tcp_pbuf_prealloc+0x3c>
 8009cc4:	4b2b      	ldr	r3, [pc, #172]	; (8009d74 <tcp_pbuf_prealloc+0xe0>)
 8009cc6:	22e9      	movs	r2, #233	; 0xe9
 8009cc8:	492d      	ldr	r1, [pc, #180]	; (8009d80 <tcp_pbuf_prealloc+0xec>)
 8009cca:	482c      	ldr	r0, [pc, #176]	; (8009d7c <tcp_pbuf_prealloc+0xe8>)
 8009ccc:	f004 fc60 	bl	800e590 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009cd0:	89ba      	ldrh	r2, [r7, #12]
 8009cd2:	897b      	ldrh	r3, [r7, #10]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d221      	bcs.n	8009d1c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d111      	bne.n	8009d08 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	8b5b      	ldrh	r3, [r3, #26]
 8009ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d115      	bne.n	8009d1c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009cf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009d08:	89bb      	ldrh	r3, [r7, #12]
 8009d0a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009d0e:	f023 0203 	bic.w	r2, r3, #3
 8009d12:	897b      	ldrh	r3, [r7, #10]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	bf28      	it	cs
 8009d18:	4613      	movcs	r3, r2
 8009d1a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009d1c:	8af9      	ldrh	r1, [r7, #22]
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fa ffa3 	bl	8004c70 <pbuf_alloc>
 8009d2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e019      	b.n	8009d6a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d006      	beq.n	8009d4c <tcp_pbuf_prealloc+0xb8>
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <tcp_pbuf_prealloc+0xe0>)
 8009d40:	f240 120b 	movw	r2, #267	; 0x10b
 8009d44:	490f      	ldr	r1, [pc, #60]	; (8009d84 <tcp_pbuf_prealloc+0xf0>)
 8009d46:	480d      	ldr	r0, [pc, #52]	; (8009d7c <tcp_pbuf_prealloc+0xe8>)
 8009d48:	f004 fc22 	bl	800e590 <iprintf>
  *oversize = p->len - length;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	895a      	ldrh	r2, [r3, #10]
 8009d50:	89bb      	ldrh	r3, [r7, #12]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	89ba      	ldrh	r2, [r7, #12]
 8009d5e:	811a      	strh	r2, [r3, #8]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	891a      	ldrh	r2, [r3, #8]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	815a      	strh	r2, [r3, #10]
  return p;
 8009d68:	693b      	ldr	r3, [r7, #16]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	08011064 	.word	0x08011064
 8009d78:	0801111c 	.word	0x0801111c
 8009d7c:	080110b8 	.word	0x080110b8
 8009d80:	08011140 	.word	0x08011140
 8009d84:	08011160 	.word	0x08011160

08009d88 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <tcp_write_checks+0x20>
 8009d9a:	4b34      	ldr	r3, [pc, #208]	; (8009e6c <tcp_write_checks+0xe4>)
 8009d9c:	f240 1233 	movw	r2, #307	; 0x133
 8009da0:	4933      	ldr	r1, [pc, #204]	; (8009e70 <tcp_write_checks+0xe8>)
 8009da2:	4834      	ldr	r0, [pc, #208]	; (8009e74 <tcp_write_checks+0xec>)
 8009da4:	f004 fbf4 	bl	800e590 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7d1b      	ldrb	r3, [r3, #20]
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	d00e      	beq.n	8009dce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009db4:	2b07      	cmp	r3, #7
 8009db6:	d00a      	beq.n	8009dce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d006      	beq.n	8009dce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d002      	beq.n	8009dce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009dc8:	f06f 030a 	mvn.w	r3, #10
 8009dcc:	e049      	b.n	8009e62 <tcp_write_checks+0xda>
  } else if (len == 0) {
 8009dce:	887b      	ldrh	r3, [r7, #2]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <tcp_write_checks+0x50>
    return ERR_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e044      	b.n	8009e62 <tcp_write_checks+0xda>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dde:	887a      	ldrh	r2, [r7, #2]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d909      	bls.n	8009df8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8b5b      	ldrh	r3, [r3, #26]
 8009de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295
 8009df6:	e034      	b.n	8009e62 <tcp_write_checks+0xda>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dfe:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8009e02:	d309      	bcc.n	8009e18 <tcp_write_checks+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8b5b      	ldrh	r3, [r3, #26]
 8009e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8009e12:	f04f 33ff 	mov.w	r3, #4294967295
 8009e16:	e024      	b.n	8009e62 <tcp_write_checks+0xda>
  }
  if (pcb->snd_queuelen != 0) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00f      	beq.n	8009e42 <tcp_write_checks+0xba>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d11a      	bne.n	8009e60 <tcp_write_checks+0xd8>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d116      	bne.n	8009e60 <tcp_write_checks+0xd8>
 8009e32:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <tcp_write_checks+0xe4>)
 8009e34:	f240 1255 	movw	r2, #341	; 0x155
 8009e38:	490f      	ldr	r1, [pc, #60]	; (8009e78 <tcp_write_checks+0xf0>)
 8009e3a:	480e      	ldr	r0, [pc, #56]	; (8009e74 <tcp_write_checks+0xec>)
 8009e3c:	f004 fba8 	bl	800e590 <iprintf>
 8009e40:	e00e      	b.n	8009e60 <tcp_write_checks+0xd8>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d103      	bne.n	8009e52 <tcp_write_checks+0xca>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d006      	beq.n	8009e60 <tcp_write_checks+0xd8>
 8009e52:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <tcp_write_checks+0xe4>)
 8009e54:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8009e58:	4908      	ldr	r1, [pc, #32]	; (8009e7c <tcp_write_checks+0xf4>)
 8009e5a:	4806      	ldr	r0, [pc, #24]	; (8009e74 <tcp_write_checks+0xec>)
 8009e5c:	f004 fb98 	bl	800e590 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	08011064 	.word	0x08011064
 8009e70:	08011174 	.word	0x08011174
 8009e74:	080110b8 	.word	0x080110b8
 8009e78:	08011194 	.word	0x08011194
 8009e7c:	080111d0 	.word	0x080111d0

08009e80 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009e80:	b590      	push	{r4, r7, lr}
 8009e82:	b09b      	sub	sp, #108	; 0x6c
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	460b      	mov	r3, r1
 8009e90:	80fb      	strh	r3, [r7, #6]
 8009e92:	4613      	mov	r3, r2
 8009e94:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d109      	bne.n	8009edc <tcp_write+0x5c>
 8009ec8:	4ba4      	ldr	r3, [pc, #656]	; (800a15c <tcp_write+0x2dc>)
 8009eca:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8009ece:	49a4      	ldr	r1, [pc, #656]	; (800a160 <tcp_write+0x2e0>)
 8009ed0:	48a4      	ldr	r0, [pc, #656]	; (800a164 <tcp_write+0x2e4>)
 8009ed2:	f004 fb5d 	bl	800e590 <iprintf>
 8009ed6:	f06f 030f 	mvn.w	r3, #15
 8009eda:	e32c      	b.n	800a536 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ee2:	085b      	lsrs	r3, r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009eea:	4293      	cmp	r3, r2
 8009eec:	bf28      	it	cs
 8009eee:	4613      	movcs	r3, r2
 8009ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d102      	bne.n	8009efe <tcp_write+0x7e>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009efc:	e000      	b.n	8009f00 <tcp_write+0x80>
 8009efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f00:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d109      	bne.n	8009f1c <tcp_write+0x9c>
 8009f08:	4b94      	ldr	r3, [pc, #592]	; (800a15c <tcp_write+0x2dc>)
 8009f0a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8009f0e:	4996      	ldr	r1, [pc, #600]	; (800a168 <tcp_write+0x2e8>)
 8009f10:	4894      	ldr	r0, [pc, #592]	; (800a164 <tcp_write+0x2e4>)
 8009f12:	f004 fb3d 	bl	800e590 <iprintf>
 8009f16:	f06f 030f 	mvn.w	r3, #15
 8009f1a:	e30c      	b.n	800a536 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009f1c:	88fb      	ldrh	r3, [r7, #6]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f7ff ff31 	bl	8009d88 <tcp_write_checks>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8009f2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <tcp_write+0xba>
    return err;
 8009f34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009f38:	e2fd      	b.n	800a536 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009f44:	2300      	movs	r3, #0
 8009f46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 80f6 	beq.w	800a140 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f58:	653b      	str	r3, [r7, #80]	; 0x50
 8009f5a:	e002      	b.n	8009f62 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8009f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f8      	bne.n	8009f5c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f6c:	7a9b      	ldrb	r3, [r3, #10]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009f78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f7c:	891b      	ldrh	r3, [r3, #8]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	8c3b      	ldrh	r3, [r7, #32]
 8009f82:	440b      	add	r3, r1
 8009f84:	429a      	cmp	r2, r3
 8009f86:	da06      	bge.n	8009f96 <tcp_write+0x116>
 8009f88:	4b74      	ldr	r3, [pc, #464]	; (800a15c <tcp_write+0x2dc>)
 8009f8a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009f8e:	4977      	ldr	r1, [pc, #476]	; (800a16c <tcp_write+0x2ec>)
 8009f90:	4874      	ldr	r0, [pc, #464]	; (800a164 <tcp_write+0x2e4>)
 8009f92:	f004 fafd 	bl	800e590 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f98:	891a      	ldrh	r2, [r3, #8]
 8009f9a:	8c3b      	ldrh	r3, [r7, #32]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fac:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009fae:	8a7b      	ldrh	r3, [r7, #18]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d026      	beq.n	800a002 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009fb4:	8a7b      	ldrh	r3, [r7, #18]
 8009fb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d206      	bcs.n	8009fca <tcp_write+0x14a>
 8009fbc:	4b67      	ldr	r3, [pc, #412]	; (800a15c <tcp_write+0x2dc>)
 8009fbe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8009fc2:	496b      	ldr	r1, [pc, #428]	; (800a170 <tcp_write+0x2f0>)
 8009fc4:	4867      	ldr	r0, [pc, #412]	; (800a164 <tcp_write+0x2e4>)
 8009fc6:	f004 fae3 	bl	800e590 <iprintf>
      seg = last_unsent;
 8009fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009fce:	8a7b      	ldrh	r3, [r7, #18]
 8009fd0:	88fa      	ldrh	r2, [r7, #6]
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	bf28      	it	cs
 8009fd6:	4613      	movcs	r3, r2
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	bf28      	it	cs
 8009fe0:	4613      	movcs	r3, r2
 8009fe2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009fe4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009fe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009fea:	4413      	add	r3, r2
 8009fec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8009ff0:	8a7a      	ldrh	r2, [r7, #18]
 8009ff2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009ffa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a002:	8a7b      	ldrh	r3, [r7, #18]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <tcp_write+0x1a0>
 800a008:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d006      	beq.n	800a020 <tcp_write+0x1a0>
 800a012:	4b52      	ldr	r3, [pc, #328]	; (800a15c <tcp_write+0x2dc>)
 800a014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a018:	4956      	ldr	r1, [pc, #344]	; (800a174 <tcp_write+0x2f4>)
 800a01a:	4852      	ldr	r0, [pc, #328]	; (800a164 <tcp_write+0x2e4>)
 800a01c:	f004 fab8 	bl	800e590 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a020:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a024:	88fb      	ldrh	r3, [r7, #6]
 800a026:	429a      	cmp	r2, r3
 800a028:	f080 8168 	bcs.w	800a2fc <tcp_write+0x47c>
 800a02c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 8164 	beq.w	800a2fc <tcp_write+0x47c>
 800a034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a036:	891b      	ldrh	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 815f 	beq.w	800a2fc <tcp_write+0x47c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a03e:	88fa      	ldrh	r2, [r7, #6]
 800a040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a044:	1ad2      	subs	r2, r2, r3
 800a046:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a048:	4293      	cmp	r3, r2
 800a04a:	bfa8      	it	ge
 800a04c:	4613      	movge	r3, r2
 800a04e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a052:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a054:	797b      	ldrb	r3, [r7, #5]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d027      	beq.n	800a0ae <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a05e:	f107 0012 	add.w	r0, r7, #18
 800a062:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a064:	8bf9      	ldrh	r1, [r7, #30]
 800a066:	2301      	movs	r3, #1
 800a068:	9302      	str	r3, [sp, #8]
 800a06a:	797b      	ldrb	r3, [r7, #5]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	4603      	mov	r3, r0
 800a074:	2000      	movs	r0, #0
 800a076:	f7ff fe0d 	bl	8009c94 <tcp_pbuf_prealloc>
 800a07a:	6578      	str	r0, [r7, #84]	; 0x54
 800a07c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 8227 	beq.w	800a4d2 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a086:	6858      	ldr	r0, [r3, #4]
 800a088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	4413      	add	r3, r2
 800a090:	8bfa      	ldrh	r2, [r7, #30]
 800a092:	4619      	mov	r1, r3
 800a094:	f004 fa4c 	bl	800e530 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a098:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a09a:	f7fb f953 	bl	8005344 <pbuf_clen>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a0ac:	e041      	b.n	800a132 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a0ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b4:	e002      	b.n	800a0bc <tcp_write+0x23c>
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f8      	bne.n	800a0b6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c6:	7b1b      	ldrb	r3, [r3, #12]
 800a0c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d115      	bne.n	800a0fc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0d6:	8952      	ldrh	r2, [r2, #10]
 800a0d8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d10d      	bne.n	800a0fc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a0e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d006      	beq.n	800a0f6 <tcp_write+0x276>
 800a0e8:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <tcp_write+0x2dc>)
 800a0ea:	f240 2231 	movw	r2, #561	; 0x231
 800a0ee:	4922      	ldr	r1, [pc, #136]	; (800a178 <tcp_write+0x2f8>)
 800a0f0:	481c      	ldr	r0, [pc, #112]	; (800a164 <tcp_write+0x2e4>)
 800a0f2:	f004 fa4d 	bl	800e590 <iprintf>
          extendlen = seglen;
 800a0f6:	8bfb      	ldrh	r3, [r7, #30]
 800a0f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a0fa:	e01a      	b.n	800a132 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a0fc:	8bfb      	ldrh	r3, [r7, #30]
 800a0fe:	2201      	movs	r2, #1
 800a100:	4619      	mov	r1, r3
 800a102:	2000      	movs	r0, #0
 800a104:	f7fa fdb4 	bl	8004c70 <pbuf_alloc>
 800a108:	6578      	str	r0, [r7, #84]	; 0x54
 800a10a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 81e2 	beq.w	800a4d6 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a112:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	441a      	add	r2, r3
 800a11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a11c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a11e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a120:	f7fb f910 	bl	8005344 <pbuf_clen>
 800a124:	4603      	mov	r3, r0
 800a126:	461a      	mov	r2, r3
 800a128:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a12c:	4413      	add	r3, r2
 800a12e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a132:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a136:	8bfb      	ldrh	r3, [r7, #30]
 800a138:	4413      	add	r3, r2
 800a13a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a13e:	e0dd      	b.n	800a2fc <tcp_write+0x47c>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 80d8 	beq.w	800a2fc <tcp_write+0x47c>
 800a14c:	4b03      	ldr	r3, [pc, #12]	; (800a15c <tcp_write+0x2dc>)
 800a14e:	f240 224a 	movw	r2, #586	; 0x24a
 800a152:	490a      	ldr	r1, [pc, #40]	; (800a17c <tcp_write+0x2fc>)
 800a154:	4803      	ldr	r0, [pc, #12]	; (800a164 <tcp_write+0x2e4>)
 800a156:	f004 fa1b 	bl	800e590 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a15a:	e0cf      	b.n	800a2fc <tcp_write+0x47c>
 800a15c:	08011064 	.word	0x08011064
 800a160:	08011204 	.word	0x08011204
 800a164:	080110b8 	.word	0x080110b8
 800a168:	0801121c 	.word	0x0801121c
 800a16c:	08011250 	.word	0x08011250
 800a170:	08011268 	.word	0x08011268
 800a174:	08011288 	.word	0x08011288
 800a178:	080112a8 	.word	0x080112a8
 800a17c:	080112d4 	.word	0x080112d4
    struct pbuf *p;
    u16_t left = len - pos;
 800a180:	88fa      	ldrh	r2, [r7, #6]
 800a182:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a18a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a18e:	b29b      	uxth	r3, r3
 800a190:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a196:	8b7a      	ldrh	r2, [r7, #26]
 800a198:	8bbb      	ldrh	r3, [r7, #28]
 800a19a:	4293      	cmp	r3, r2
 800a19c:	bf28      	it	cs
 800a19e:	4613      	movcs	r3, r2
 800a1a0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a1a2:	797b      	ldrb	r3, [r7, #5]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d036      	beq.n	800a21a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a1ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	8b3b      	ldrh	r3, [r7, #24]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	b299      	uxth	r1, r3
 800a1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bf0c      	ite	eq
 800a1be:	2301      	moveq	r3, #1
 800a1c0:	2300      	movne	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f107 0012 	add.w	r0, r7, #18
 800a1c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	797b      	ldrb	r3, [r7, #5]
 800a1ce:	9301      	str	r3, [sp, #4]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2036      	movs	r0, #54	; 0x36
 800a1d8:	f7ff fd5c 	bl	8009c94 <tcp_pbuf_prealloc>
 800a1dc:	6338      	str	r0, [r7, #48]	; 0x30
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 817a 	beq.w	800a4da <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	895b      	ldrh	r3, [r3, #10]
 800a1ea:	8b3a      	ldrh	r2, [r7, #24]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d906      	bls.n	800a1fe <tcp_write+0x37e>
 800a1f0:	4b8d      	ldr	r3, [pc, #564]	; (800a428 <tcp_write+0x5a8>)
 800a1f2:	f240 2266 	movw	r2, #614	; 0x266
 800a1f6:	498d      	ldr	r1, [pc, #564]	; (800a42c <tcp_write+0x5ac>)
 800a1f8:	488d      	ldr	r0, [pc, #564]	; (800a430 <tcp_write+0x5b0>)
 800a1fa:	f004 f9c9 	bl	800e590 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a206:	18d0      	adds	r0, r2, r3
 800a208:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	4413      	add	r3, r2
 800a210:	8b3a      	ldrh	r2, [r7, #24]
 800a212:	4619      	mov	r1, r3
 800a214:	f004 f98c 	bl	800e530 <memcpy>
 800a218:	e02f      	b.n	800a27a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a21a:	8a7b      	ldrh	r3, [r7, #18]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <tcp_write+0x3ae>
 800a220:	4b81      	ldr	r3, [pc, #516]	; (800a428 <tcp_write+0x5a8>)
 800a222:	f240 2271 	movw	r2, #625	; 0x271
 800a226:	4983      	ldr	r1, [pc, #524]	; (800a434 <tcp_write+0x5b4>)
 800a228:	4881      	ldr	r0, [pc, #516]	; (800a430 <tcp_write+0x5b0>)
 800a22a:	f004 f9b1 	bl	800e590 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a22e:	8b3b      	ldrh	r3, [r7, #24]
 800a230:	2201      	movs	r2, #1
 800a232:	4619      	mov	r1, r3
 800a234:	2036      	movs	r0, #54	; 0x36
 800a236:	f7fa fd1b 	bl	8004c70 <pbuf_alloc>
 800a23a:	6178      	str	r0, [r7, #20]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f000 814d 	beq.w	800a4de <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a244:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	441a      	add	r2, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a250:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a254:	b29b      	uxth	r3, r3
 800a256:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a25a:	4619      	mov	r1, r3
 800a25c:	2036      	movs	r0, #54	; 0x36
 800a25e:	f7fa fd07 	bl	8004c70 <pbuf_alloc>
 800a262:	6338      	str	r0, [r7, #48]	; 0x30
 800a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a266:	2b00      	cmp	r3, #0
 800a268:	d103      	bne.n	800a272 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a26a:	6978      	ldr	r0, [r7, #20]
 800a26c:	f7fa ffe2 	bl	8005234 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a270:	e138      	b.n	800a4e4 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a272:	6979      	ldr	r1, [r7, #20]
 800a274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a276:	f7fb f89f 	bl	80053b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a27a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a27c:	f7fb f862 	bl	8005344 <pbuf_clen>
 800a280:	4603      	mov	r3, r0
 800a282:	461a      	mov	r2, r3
 800a284:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a288:	4413      	add	r3, r2
 800a28a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a28e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a292:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 800a296:	d903      	bls.n	800a2a0 <tcp_write+0x420>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a29a:	f7fa ffcb 	bl	8005234 <pbuf_free>
      goto memerr;
 800a29e:	e121      	b.n	800a4e4 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2a8:	441a      	add	r2, r3
 800a2aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fc4e 	bl	8009b58 <tcp_create_segment>
 800a2bc:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f000 810e 	beq.w	800a4e2 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d102      	bne.n	800a2d2 <tcp_write+0x452>
      queue = seg;
 800a2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ce:	647b      	str	r3, [r7, #68]	; 0x44
 800a2d0:	e00c      	b.n	800a2ec <tcp_write+0x46c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a2d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d106      	bne.n	800a2e6 <tcp_write+0x466>
 800a2d8:	4b53      	ldr	r3, [pc, #332]	; (800a428 <tcp_write+0x5a8>)
 800a2da:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a2de:	4956      	ldr	r1, [pc, #344]	; (800a438 <tcp_write+0x5b8>)
 800a2e0:	4853      	ldr	r0, [pc, #332]	; (800a430 <tcp_write+0x5b0>)
 800a2e2:	f004 f955 	bl	800e590 <iprintf>
      prev_seg->next = seg;
 800a2e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2ea:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ee:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a2f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a2f4:	8b3b      	ldrh	r3, [r7, #24]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a2fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	429a      	cmp	r2, r3
 800a304:	f4ff af3c 	bcc.w	800a180 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a308:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d02c      	beq.n	800a368 <tcp_write+0x4e8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a314:	e01e      	b.n	800a354 <tcp_write+0x4d4>
      p->tot_len += oversize_used;
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	891a      	ldrh	r2, [r3, #8]
 800a31a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a31c:	4413      	add	r3, r2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d110      	bne.n	800a34e <tcp_write+0x4ce>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a332:	8952      	ldrh	r2, [r2, #10]
 800a334:	4413      	add	r3, r2
 800a336:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a338:	68b9      	ldr	r1, [r7, #8]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f004 f8f8 	bl	800e530 <memcpy>
        p->len += oversize_used;
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	895a      	ldrh	r2, [r3, #10]
 800a344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a346:	4413      	add	r3, r2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1dd      	bne.n	800a316 <tcp_write+0x496>
      }
    }
    last_unsent->len += oversize_used;
 800a35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a35c:	891a      	ldrh	r2, [r3, #8]
 800a35e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a360:	4413      	add	r3, r2
 800a362:	b29a      	uxth	r2, r3
 800a364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a366:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a368:	8a7a      	ldrh	r2, [r7, #18]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a372:	2b00      	cmp	r3, #0
 800a374:	d018      	beq.n	800a3a8 <tcp_write+0x528>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d106      	bne.n	800a38a <tcp_write+0x50a>
 800a37c:	4b2a      	ldr	r3, [pc, #168]	; (800a428 <tcp_write+0x5a8>)
 800a37e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a382:	492e      	ldr	r1, [pc, #184]	; (800a43c <tcp_write+0x5bc>)
 800a384:	482a      	ldr	r0, [pc, #168]	; (800a430 <tcp_write+0x5b0>)
 800a386:	f004 f903 	bl	800e590 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a390:	4618      	mov	r0, r3
 800a392:	f7fb f811 	bl	80053b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a398:	891a      	ldrh	r2, [r3, #8]
 800a39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a39c:	891b      	ldrh	r3, [r3, #8]
 800a39e:	4413      	add	r3, r2
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a4:	811a      	strh	r2, [r3, #8]
 800a3a6:	e037      	b.n	800a418 <tcp_write+0x598>
  } else if (extendlen > 0) {
 800a3a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d034      	beq.n	800a418 <tcp_write+0x598>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <tcp_write+0x53c>
 800a3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <tcp_write+0x54a>
 800a3bc:	4b1a      	ldr	r3, [pc, #104]	; (800a428 <tcp_write+0x5a8>)
 800a3be:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a3c2:	491f      	ldr	r1, [pc, #124]	; (800a440 <tcp_write+0x5c0>)
 800a3c4:	481a      	ldr	r0, [pc, #104]	; (800a430 <tcp_write+0x5b0>)
 800a3c6:	f004 f8e3 	bl	800e590 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d0:	e009      	b.n	800a3e6 <tcp_write+0x566>
      p->tot_len += extendlen;
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	891a      	ldrh	r2, [r3, #8]
 800a3d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3d8:	4413      	add	r3, r2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f1      	bne.n	800a3d2 <tcp_write+0x552>
    }
    p->tot_len += extendlen;
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	891a      	ldrh	r2, [r3, #8]
 800a3f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a3f4:	4413      	add	r3, r2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	895a      	ldrh	r2, [r3, #10]
 800a400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a402:	4413      	add	r3, r2
 800a404:	b29a      	uxth	r2, r3
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a40c:	891a      	ldrh	r2, [r3, #8]
 800a40e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a410:	4413      	add	r3, r2
 800a412:	b29a      	uxth	r2, r3
 800a414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a416:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d112      	bne.n	800a444 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a422:	66da      	str	r2, [r3, #108]	; 0x6c
 800a424:	e011      	b.n	800a44a <tcp_write+0x5ca>
 800a426:	bf00      	nop
 800a428:	08011064 	.word	0x08011064
 800a42c:	08011304 	.word	0x08011304
 800a430:	080110b8 	.word	0x080110b8
 800a434:	08011344 	.word	0x08011344
 800a438:	08011354 	.word	0x08011354
 800a43c:	08011368 	.word	0x08011368
 800a440:	080113a0 	.word	0x080113a0
  } else {
    last_unsent->next = queue;
 800a444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a448:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	441a      	add	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a46e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00e      	beq.n	800a49a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <tcp_write+0x61a>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <tcp_write+0x61a>
 800a48c:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <tcp_write+0x6c0>)
 800a48e:	f240 3212 	movw	r2, #786	; 0x312
 800a492:	492c      	ldr	r1, [pc, #176]	; (800a544 <tcp_write+0x6c4>)
 800a494:	482c      	ldr	r0, [pc, #176]	; (800a548 <tcp_write+0x6c8>)
 800a496:	f004 f87b 	bl	800e590 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d016      	beq.n	800a4ce <tcp_write+0x64e>
 800a4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d012      	beq.n	800a4ce <tcp_write+0x64e>
 800a4a8:	797b      	ldrb	r3, [r7, #5]
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10d      	bne.n	800a4ce <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	899b      	ldrh	r3, [r3, #12]
 800a4b8:	b29c      	uxth	r4, r3
 800a4ba:	2008      	movs	r0, #8
 800a4bc:	f7f9 fc20 	bl	8003d00 <lwip_htons>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	4322      	orrs	r2, r4
 800a4ca:	b292      	uxth	r2, r2
 800a4cc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e031      	b.n	800a536 <tcp_write+0x6b6>
          goto memerr;
 800a4d2:	bf00      	nop
 800a4d4:	e006      	b.n	800a4e4 <tcp_write+0x664>
            goto memerr;
 800a4d6:	bf00      	nop
 800a4d8:	e004      	b.n	800a4e4 <tcp_write+0x664>
        goto memerr;
 800a4da:	bf00      	nop
 800a4dc:	e002      	b.n	800a4e4 <tcp_write+0x664>
        goto memerr;
 800a4de:	bf00      	nop
 800a4e0:	e000      	b.n	800a4e4 <tcp_write+0x664>
      goto memerr;
 800a4e2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8b5b      	ldrh	r3, [r3, #26]
 800a4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <tcp_write+0x67e>
    pbuf_free(concat_p);
 800a4f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a4fa:	f7fa fe9b 	bl	8005234 <pbuf_free>
  }
  if (queue != NULL) {
 800a4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <tcp_write+0x68a>
    tcp_segs_free(queue);
 800a504:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a506:	f7fc fb51 	bl	8006bac <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00e      	beq.n	800a532 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <tcp_write+0x6b2>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a520:	2b00      	cmp	r3, #0
 800a522:	d106      	bne.n	800a532 <tcp_write+0x6b2>
 800a524:	4b06      	ldr	r3, [pc, #24]	; (800a540 <tcp_write+0x6c0>)
 800a526:	f240 3227 	movw	r2, #807	; 0x327
 800a52a:	4906      	ldr	r1, [pc, #24]	; (800a544 <tcp_write+0x6c4>)
 800a52c:	4806      	ldr	r0, [pc, #24]	; (800a548 <tcp_write+0x6c8>)
 800a52e:	f004 f82f 	bl	800e590 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a536:	4618      	mov	r0, r3
 800a538:	375c      	adds	r7, #92	; 0x5c
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd90      	pop	{r4, r7, pc}
 800a53e:	bf00      	nop
 800a540:	08011064 	.word	0x08011064
 800a544:	080113d8 	.word	0x080113d8
 800a548:	080110b8 	.word	0x080110b8

0800a54c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a54c:	b590      	push	{r4, r7, lr}
 800a54e:	b08b      	sub	sp, #44	; 0x2c
 800a550:	af02      	add	r7, sp, #8
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a558:	2300      	movs	r3, #0
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	2300      	movs	r3, #0
 800a55e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a560:	2300      	movs	r3, #0
 800a562:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <tcp_split_unsent_seg+0x2c>
 800a56a:	4b95      	ldr	r3, [pc, #596]	; (800a7c0 <tcp_split_unsent_seg+0x274>)
 800a56c:	f240 324b 	movw	r2, #843	; 0x34b
 800a570:	4994      	ldr	r1, [pc, #592]	; (800a7c4 <tcp_split_unsent_seg+0x278>)
 800a572:	4895      	ldr	r0, [pc, #596]	; (800a7c8 <tcp_split_unsent_seg+0x27c>)
 800a574:	f004 f80c 	bl	800e590 <iprintf>

  useg = pcb->unsent;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d102      	bne.n	800a58a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a584:	f04f 33ff 	mov.w	r3, #4294967295
 800a588:	e116      	b.n	800a7b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a58a:	887b      	ldrh	r3, [r7, #2]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d109      	bne.n	800a5a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a590:	4b8b      	ldr	r3, [pc, #556]	; (800a7c0 <tcp_split_unsent_seg+0x274>)
 800a592:	f240 3253 	movw	r2, #851	; 0x353
 800a596:	498d      	ldr	r1, [pc, #564]	; (800a7cc <tcp_split_unsent_seg+0x280>)
 800a598:	488b      	ldr	r0, [pc, #556]	; (800a7c8 <tcp_split_unsent_seg+0x27c>)
 800a59a:	f003 fff9 	bl	800e590 <iprintf>
    return ERR_VAL;
 800a59e:	f06f 0305 	mvn.w	r3, #5
 800a5a2:	e109      	b.n	800a7b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	891b      	ldrh	r3, [r3, #8]
 800a5a8:	887a      	ldrh	r2, [r7, #2]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d301      	bcc.n	800a5b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	e102      	b.n	800a7b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a5b6:	887a      	ldrh	r2, [r7, #2]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d906      	bls.n	800a5ca <tcp_split_unsent_seg+0x7e>
 800a5bc:	4b80      	ldr	r3, [pc, #512]	; (800a7c0 <tcp_split_unsent_seg+0x274>)
 800a5be:	f240 325b 	movw	r2, #859	; 0x35b
 800a5c2:	4983      	ldr	r1, [pc, #524]	; (800a7d0 <tcp_split_unsent_seg+0x284>)
 800a5c4:	4880      	ldr	r0, [pc, #512]	; (800a7c8 <tcp_split_unsent_seg+0x27c>)
 800a5c6:	f003 ffe3 	bl	800e590 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	891b      	ldrh	r3, [r3, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <tcp_split_unsent_seg+0x94>
 800a5d2:	4b7b      	ldr	r3, [pc, #492]	; (800a7c0 <tcp_split_unsent_seg+0x274>)
 800a5d4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a5d8:	497e      	ldr	r1, [pc, #504]	; (800a7d4 <tcp_split_unsent_seg+0x288>)
 800a5da:	487b      	ldr	r0, [pc, #492]	; (800a7c8 <tcp_split_unsent_seg+0x27c>)
 800a5dc:	f003 ffd8 	bl	800e590 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	7a9b      	ldrb	r3, [r3, #10]
 800a5e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	f003 0304 	and.w	r3, r3, #4
 800a5f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	891a      	ldrh	r2, [r3, #8]
 800a5f6:	887b      	ldrh	r3, [r7, #2]
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	89bb      	ldrh	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	b29b      	uxth	r3, r3
 800a606:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a60a:	4619      	mov	r1, r3
 800a60c:	2036      	movs	r0, #54	; 0x36
 800a60e:	f7fa fb2f 	bl	8004c70 <pbuf_alloc>
 800a612:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80b7 	beq.w	800a78a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	891a      	ldrh	r2, [r3, #8]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	891b      	ldrh	r3, [r3, #8]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	b29a      	uxth	r2, r3
 800a62a:	887b      	ldrh	r3, [r7, #2]
 800a62c:	4413      	add	r3, r2
 800a62e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	6858      	ldr	r0, [r3, #4]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	18d1      	adds	r1, r2, r3
 800a63c:	897b      	ldrh	r3, [r7, #10]
 800a63e:	89ba      	ldrh	r2, [r7, #12]
 800a640:	f7fa fff2 	bl	8005628 <pbuf_copy_partial>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	89bb      	ldrh	r3, [r7, #12]
 800a64a:	4293      	cmp	r3, r2
 800a64c:	f040 809f 	bne.w	800a78e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	899b      	ldrh	r3, [r3, #12]
 800a656:	b29b      	uxth	r3, r3
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f9 fb51 	bl	8003d00 <lwip_htons>
 800a65e:	4603      	mov	r3, r0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a666:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a668:	2300      	movs	r3, #0
 800a66a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a66c:	7efb      	ldrb	r3, [r7, #27]
 800a66e:	f003 0308 	and.w	r3, r3, #8
 800a672:	2b00      	cmp	r3, #0
 800a674:	d007      	beq.n	800a686 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a676:	7efb      	ldrb	r3, [r7, #27]
 800a678:	f023 0308 	bic.w	r3, r3, #8
 800a67c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a67e:	7ebb      	ldrb	r3, [r7, #26]
 800a680:	f043 0308 	orr.w	r3, r3, #8
 800a684:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a686:	7efb      	ldrb	r3, [r7, #27]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d007      	beq.n	800a6a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a690:	7efb      	ldrb	r3, [r7, #27]
 800a692:	f023 0301 	bic.w	r3, r3, #1
 800a696:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a698:	7ebb      	ldrb	r3, [r7, #26]
 800a69a:	f043 0301 	orr.w	r3, r3, #1
 800a69e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f9 fb3f 	bl	8003d2a <lwip_htonl>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	887b      	ldrh	r3, [r7, #2]
 800a6b0:	18d1      	adds	r1, r2, r3
 800a6b2:	7eba      	ldrb	r2, [r7, #26]
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	6939      	ldr	r1, [r7, #16]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff fa4b 	bl	8009b58 <tcp_create_segment>
 800a6c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d063      	beq.n	800a792 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fa fe38 	bl	8005344 <pbuf_clen>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6de:	1a9b      	subs	r3, r3, r2
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	6858      	ldr	r0, [r3, #4]
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	891a      	ldrh	r2, [r3, #8]
 800a6f2:	89bb      	ldrh	r3, [r7, #12]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	f7fa fc17 	bl	8004f2c <pbuf_realloc>
  useg->len -= remainder;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	891a      	ldrh	r2, [r3, #8]
 800a702:	89bb      	ldrh	r3, [r7, #12]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	b29a      	uxth	r2, r3
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	899b      	ldrh	r3, [r3, #12]
 800a712:	b29c      	uxth	r4, r3
 800a714:	7efb      	ldrb	r3, [r7, #27]
 800a716:	b29b      	uxth	r3, r3
 800a718:	4618      	mov	r0, r3
 800a71a:	f7f9 faf1 	bl	8003d00 <lwip_htons>
 800a71e:	4603      	mov	r3, r0
 800a720:	461a      	mov	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	4322      	orrs	r2, r4
 800a728:	b292      	uxth	r2, r2
 800a72a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4618      	mov	r0, r3
 800a732:	f7fa fe07 	bl	8005344 <pbuf_clen>
 800a736:	4603      	mov	r3, r0
 800a738:	461a      	mov	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a740:	4413      	add	r3, r2
 800a742:	b29a      	uxth	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fa fdf8 	bl	8005344 <pbuf_clen>
 800a754:	4603      	mov	r3, r0
 800a756:	461a      	mov	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a75e:	4413      	add	r3, r2
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	69fa      	ldr	r2, [r7, #28]
 800a774:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d103      	bne.n	800a786 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	e016      	b.n	800a7b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a78a:	bf00      	nop
 800a78c:	e002      	b.n	800a794 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a78e:	bf00      	nop
 800a790:	e000      	b.n	800a794 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a792:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d006      	beq.n	800a7a8 <tcp_split_unsent_seg+0x25c>
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <tcp_split_unsent_seg+0x274>)
 800a79c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a7a0:	490d      	ldr	r1, [pc, #52]	; (800a7d8 <tcp_split_unsent_seg+0x28c>)
 800a7a2:	4809      	ldr	r0, [pc, #36]	; (800a7c8 <tcp_split_unsent_seg+0x27c>)
 800a7a4:	f003 fef4 	bl	800e590 <iprintf>
  if (p != NULL) {
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a7ae:	6938      	ldr	r0, [r7, #16]
 800a7b0:	f7fa fd40 	bl	8005234 <pbuf_free>
  }

  return ERR_MEM;
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3724      	adds	r7, #36	; 0x24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd90      	pop	{r4, r7, pc}
 800a7c0:	08011064 	.word	0x08011064
 800a7c4:	080113f8 	.word	0x080113f8
 800a7c8:	080110b8 	.word	0x080110b8
 800a7cc:	0801141c 	.word	0x0801141c
 800a7d0:	08011440 	.word	0x08011440
 800a7d4:	08011450 	.word	0x08011450
 800a7d8:	08011460 	.word	0x08011460

0800a7dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <tcp_send_fin+0x1c>
 800a7ea:	4b21      	ldr	r3, [pc, #132]	; (800a870 <tcp_send_fin+0x94>)
 800a7ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a7f0:	4920      	ldr	r1, [pc, #128]	; (800a874 <tcp_send_fin+0x98>)
 800a7f2:	4821      	ldr	r0, [pc, #132]	; (800a878 <tcp_send_fin+0x9c>)
 800a7f4:	f003 fecc 	bl	800e590 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d02e      	beq.n	800a85e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	e002      	b.n	800a80e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1f8      	bne.n	800a808 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	899b      	ldrh	r3, [r3, #12]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f9 fa6e 	bl	8003d00 <lwip_htons>
 800a824:	4603      	mov	r3, r0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0307 	and.w	r3, r3, #7
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d116      	bne.n	800a85e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	899b      	ldrh	r3, [r3, #12]
 800a836:	b29c      	uxth	r4, r3
 800a838:	2001      	movs	r0, #1
 800a83a:	f7f9 fa61 	bl	8003d00 <lwip_htons>
 800a83e:	4603      	mov	r3, r0
 800a840:	461a      	mov	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	4322      	orrs	r2, r4
 800a848:	b292      	uxth	r2, r2
 800a84a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	8b5b      	ldrh	r3, [r3, #26]
 800a850:	f043 0320 	orr.w	r3, r3, #32
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	e004      	b.n	800a868 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a85e:	2101      	movs	r1, #1
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f80b 	bl	800a87c <tcp_enqueue_flags>
 800a866:	4603      	mov	r3, r0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd90      	pop	{r4, r7, pc}
 800a870:	08011064 	.word	0x08011064
 800a874:	0801146c 	.word	0x0801146c
 800a878:	080110b8 	.word	0x080110b8

0800a87c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af02      	add	r7, sp, #8
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	f003 0303 	and.w	r3, r3, #3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d106      	bne.n	800a8a8 <tcp_enqueue_flags+0x2c>
 800a89a:	4b67      	ldr	r3, [pc, #412]	; (800aa38 <tcp_enqueue_flags+0x1bc>)
 800a89c:	f240 4211 	movw	r2, #1041	; 0x411
 800a8a0:	4966      	ldr	r1, [pc, #408]	; (800aa3c <tcp_enqueue_flags+0x1c0>)
 800a8a2:	4867      	ldr	r0, [pc, #412]	; (800aa40 <tcp_enqueue_flags+0x1c4>)
 800a8a4:	f003 fe74 	bl	800e590 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <tcp_enqueue_flags+0x40>
 800a8ae:	4b62      	ldr	r3, [pc, #392]	; (800aa38 <tcp_enqueue_flags+0x1bc>)
 800a8b0:	f240 4213 	movw	r2, #1043	; 0x413
 800a8b4:	4963      	ldr	r1, [pc, #396]	; (800aa44 <tcp_enqueue_flags+0x1c8>)
 800a8b6:	4862      	ldr	r0, [pc, #392]	; (800aa40 <tcp_enqueue_flags+0x1c4>)
 800a8b8:	f003 fe6a 	bl	800e590 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a8ca:	7ffb      	ldrb	r3, [r7, #31]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a8de:	4619      	mov	r1, r3
 800a8e0:	2036      	movs	r0, #54	; 0x36
 800a8e2:	f7fa f9c5 	bl	8004c70 <pbuf_alloc>
 800a8e6:	6138      	str	r0, [r7, #16]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d109      	bne.n	800a902 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8b5b      	ldrh	r3, [r3, #26]
 800a8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a900:	e095      	b.n	800aa2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	895a      	ldrh	r2, [r3, #10]
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d206      	bcs.n	800a91c <tcp_enqueue_flags+0xa0>
 800a90e:	4b4a      	ldr	r3, [pc, #296]	; (800aa38 <tcp_enqueue_flags+0x1bc>)
 800a910:	f240 4239 	movw	r2, #1081	; 0x439
 800a914:	494c      	ldr	r1, [pc, #304]	; (800aa48 <tcp_enqueue_flags+0x1cc>)
 800a916:	484a      	ldr	r0, [pc, #296]	; (800aa40 <tcp_enqueue_flags+0x1c4>)
 800a918:	f003 fe3a 	bl	800e590 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a920:	78fa      	ldrb	r2, [r7, #3]
 800a922:	7ffb      	ldrb	r3, [r7, #31]
 800a924:	9300      	str	r3, [sp, #0]
 800a926:	460b      	mov	r3, r1
 800a928:	6939      	ldr	r1, [r7, #16]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff f914 	bl	8009b58 <tcp_create_segment>
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d109      	bne.n	800a94c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8b5b      	ldrh	r3, [r3, #26]
 800a93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a940:	b29a      	uxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a946:	f04f 33ff 	mov.w	r3, #4294967295
 800a94a:	e070      	b.n	800aa2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d006      	beq.n	800a966 <tcp_enqueue_flags+0xea>
 800a958:	4b37      	ldr	r3, [pc, #220]	; (800aa38 <tcp_enqueue_flags+0x1bc>)
 800a95a:	f240 4242 	movw	r2, #1090	; 0x442
 800a95e:	493b      	ldr	r1, [pc, #236]	; (800aa4c <tcp_enqueue_flags+0x1d0>)
 800a960:	4837      	ldr	r0, [pc, #220]	; (800aa40 <tcp_enqueue_flags+0x1c4>)
 800a962:	f003 fe15 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	891b      	ldrh	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d006      	beq.n	800a97c <tcp_enqueue_flags+0x100>
 800a96e:	4b32      	ldr	r3, [pc, #200]	; (800aa38 <tcp_enqueue_flags+0x1bc>)
 800a970:	f240 4243 	movw	r2, #1091	; 0x443
 800a974:	4936      	ldr	r1, [pc, #216]	; (800aa50 <tcp_enqueue_flags+0x1d4>)
 800a976:	4832      	ldr	r0, [pc, #200]	; (800aa40 <tcp_enqueue_flags+0x1c4>)
 800a978:	f003 fe0a 	bl	800e590 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d103      	bne.n	800a98c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	66da      	str	r2, [r3, #108]	; 0x6c
 800a98a:	e00d      	b.n	800a9a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	e002      	b.n	800a99a <tcp_enqueue_flags+0x11e>
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	61bb      	str	r3, [r7, #24]
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f8      	bne.n	800a994 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a9b0:	78fb      	ldrb	r3, [r7, #3]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <tcp_enqueue_flags+0x148>
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d004      	beq.n	800a9ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d006      	beq.n	800a9e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8b5b      	ldrh	r3, [r3, #26]
 800a9dc:	f043 0320 	orr.w	r3, r3, #32
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fa fcaa 	bl	8005344 <pbuf_clen>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a9fa:	4413      	add	r3, r2
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <tcp_enqueue_flags+0x1b0>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <tcp_enqueue_flags+0x1b0>
 800aa1e:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <tcp_enqueue_flags+0x1bc>)
 800aa20:	f240 4265 	movw	r2, #1125	; 0x465
 800aa24:	490b      	ldr	r1, [pc, #44]	; (800aa54 <tcp_enqueue_flags+0x1d8>)
 800aa26:	4806      	ldr	r0, [pc, #24]	; (800aa40 <tcp_enqueue_flags+0x1c4>)
 800aa28:	f003 fdb2 	bl	800e590 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	08011064 	.word	0x08011064
 800aa3c:	08011488 	.word	0x08011488
 800aa40:	080110b8 	.word	0x080110b8
 800aa44:	080114e0 	.word	0x080114e0
 800aa48:	08011500 	.word	0x08011500
 800aa4c:	0801153c 	.word	0x0801153c
 800aa50:	08011554 	.word	0x08011554
 800aa54:	08011580 	.word	0x08011580

0800aa58 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800aa58:	b5b0      	push	{r4, r5, r7, lr}
 800aa5a:	b08a      	sub	sp, #40	; 0x28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d106      	bne.n	800aa74 <tcp_output+0x1c>
 800aa66:	4b9e      	ldr	r3, [pc, #632]	; (800ace0 <tcp_output+0x288>)
 800aa68:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800aa6c:	499d      	ldr	r1, [pc, #628]	; (800ace4 <tcp_output+0x28c>)
 800aa6e:	489e      	ldr	r0, [pc, #632]	; (800ace8 <tcp_output+0x290>)
 800aa70:	f003 fd8e 	bl	800e590 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7d1b      	ldrb	r3, [r3, #20]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d106      	bne.n	800aa8a <tcp_output+0x32>
 800aa7c:	4b98      	ldr	r3, [pc, #608]	; (800ace0 <tcp_output+0x288>)
 800aa7e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800aa82:	499a      	ldr	r1, [pc, #616]	; (800acec <tcp_output+0x294>)
 800aa84:	4898      	ldr	r0, [pc, #608]	; (800ace8 <tcp_output+0x290>)
 800aa86:	f003 fd83 	bl	800e590 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800aa8a:	4b99      	ldr	r3, [pc, #612]	; (800acf0 <tcp_output+0x298>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d101      	bne.n	800aa98 <tcp_output+0x40>
    return ERR_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	e1ce      	b.n	800ae36 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	bf28      	it	cs
 800aaa8:	4613      	movcs	r3, r2
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10b      	bne.n	800aad2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8b5b      	ldrh	r3, [r3, #26]
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 81aa 	beq.w	800ae1c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fdcb 	bl	800b664 <tcp_send_empty_ack>
 800aace:	4603      	mov	r3, r0
 800aad0:	e1b1      	b.n	800ae36 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3304      	adds	r3, #4
 800aad8:	461a      	mov	r2, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff f820 	bl	8009b20 <tcp_route>
 800aae0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <tcp_output+0x96>
    return ERR_RTE;
 800aae8:	f06f 0303 	mvn.w	r3, #3
 800aaec:	e1a3      	b.n	800ae36 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <tcp_output+0xa4>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d111      	bne.n	800ab20 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <tcp_output+0xb0>
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	3304      	adds	r3, #4
 800ab06:	e000      	b.n	800ab0a <tcp_output+0xb2>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <tcp_output+0xc0>
      return ERR_RTE;
 800ab12:	f06f 0303 	mvn.w	r3, #3
 800ab16:	e18e      	b.n	800ae36 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f9 f8ff 	bl	8003d2a <lwip_htonl>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab36:	8912      	ldrh	r2, [r2, #8]
 800ab38:	4413      	add	r3, r2
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d227      	bcs.n	800ab90 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab46:	461a      	mov	r2, r3
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d114      	bne.n	800ab78 <tcp_output+0x120>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d110      	bne.n	800ab78 <tcp_output+0x120>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10b      	bne.n	800ab78 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8b5b      	ldrh	r3, [r3, #26]
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 814d 	beq.w	800ae20 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fd6c 	bl	800b664 <tcp_send_empty_ack>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	e152      	b.n	800ae36 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 811c 	beq.w	800adde <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aba6:	e002      	b.n	800abae <tcp_output+0x156>
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	623b      	str	r3, [r7, #32]
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1f8      	bne.n	800aba8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800abb6:	e112      	b.n	800adde <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800abb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	899b      	ldrh	r3, [r3, #12]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7f9 f89d 	bl	8003d00 <lwip_htons>
 800abc6:	4603      	mov	r3, r0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 0304 	and.w	r3, r3, #4
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d006      	beq.n	800abe0 <tcp_output+0x188>
 800abd2:	4b43      	ldr	r3, [pc, #268]	; (800ace0 <tcp_output+0x288>)
 800abd4:	f240 5236 	movw	r2, #1334	; 0x536
 800abd8:	4946      	ldr	r1, [pc, #280]	; (800acf4 <tcp_output+0x29c>)
 800abda:	4843      	ldr	r0, [pc, #268]	; (800ace8 <tcp_output+0x290>)
 800abdc:	f003 fcd8 	bl	800e590 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d020      	beq.n	800ac2a <tcp_output+0x1d2>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	8b5b      	ldrh	r3, [r3, #26]
 800abec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11a      	bne.n	800ac2a <tcp_output+0x1d2>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <tcp_output+0x1bc>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d111      	bne.n	800ac2a <tcp_output+0x1d2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0a:	891a      	ldrh	r2, [r3, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d20a      	bcs.n	800ac2a <tcp_output+0x1d2>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <tcp_output+0x1d2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac24:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 800ac28:	d301      	bcc.n	800ac2e <tcp_output+0x1d6>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e000      	b.n	800ac30 <tcp_output+0x1d8>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d106      	bne.n	800ac42 <tcp_output+0x1ea>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	8b5b      	ldrh	r3, [r3, #26]
 800ac38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 80e3 	beq.w	800ae08 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7d1b      	ldrb	r3, [r3, #20]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d00d      	beq.n	800ac66 <tcp_output+0x20e>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	899b      	ldrh	r3, [r3, #12]
 800ac50:	b29c      	uxth	r4, r3
 800ac52:	2010      	movs	r0, #16
 800ac54:	f7f9 f854 	bl	8003d00 <lwip_htons>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	4322      	orrs	r2, r4
 800ac62:	b292      	uxth	r2, r2
 800ac64:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac6c:	f000 f908 	bl	800ae80 <tcp_output_segment>
 800ac70:	4603      	mov	r3, r0
 800ac72:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ac74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d009      	beq.n	800ac90 <tcp_output+0x238>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	8b5b      	ldrh	r3, [r3, #26]
 800ac80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	835a      	strh	r2, [r3, #26]
      return err;
 800ac8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac8e:	e0d2      	b.n	800ae36 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	7d1b      	ldrb	r3, [r3, #20]
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d006      	beq.n	800acae <tcp_output+0x256>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	8b5b      	ldrh	r3, [r3, #26]
 800aca4:	f023 0303 	bic.w	r3, r3, #3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7f9 f838 	bl	8003d2a <lwip_htonl>
 800acba:	4604      	mov	r4, r0
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	891b      	ldrh	r3, [r3, #8]
 800acc0:	461d      	mov	r5, r3
 800acc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	899b      	ldrh	r3, [r3, #12]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	4618      	mov	r0, r3
 800accc:	f7f9 f818 	bl	8003d00 <lwip_htons>
 800acd0:	4603      	mov	r3, r0
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 0303 	and.w	r3, r3, #3
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00d      	beq.n	800acf8 <tcp_output+0x2a0>
 800acdc:	2301      	movs	r3, #1
 800acde:	e00c      	b.n	800acfa <tcp_output+0x2a2>
 800ace0:	08011064 	.word	0x08011064
 800ace4:	080115a8 	.word	0x080115a8
 800ace8:	080110b8 	.word	0x080110b8
 800acec:	080115c0 	.word	0x080115c0
 800acf0:	20024d18 	.word	0x20024d18
 800acf4:	080115e8 	.word	0x080115e8
 800acf8:	2300      	movs	r3, #0
 800acfa:	442b      	add	r3, r5
 800acfc:	4423      	add	r3, r4
 800acfe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da02      	bge.n	800ad12 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	891b      	ldrh	r3, [r3, #8]
 800ad16:	461c      	mov	r4, r3
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	899b      	ldrh	r3, [r3, #12]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7f8 ffed 	bl	8003d00 <lwip_htons>
 800ad26:	4603      	mov	r3, r0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <tcp_output+0x2de>
 800ad32:	2301      	movs	r3, #1
 800ad34:	e000      	b.n	800ad38 <tcp_output+0x2e0>
 800ad36:	2300      	movs	r3, #0
 800ad38:	4423      	add	r3, r4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d049      	beq.n	800add2 <tcp_output+0x37a>
      seg->next = NULL;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	2200      	movs	r2, #0
 800ad42:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <tcp_output+0x300>
        pcb->unacked = seg;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad50:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	623b      	str	r3, [r7, #32]
 800ad56:	e03f      	b.n	800add8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7f8 ffe3 	bl	8003d2a <lwip_htonl>
 800ad64:	4604      	mov	r4, r0
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7f8 ffdc 	bl	8003d2a <lwip_htonl>
 800ad72:	4603      	mov	r3, r0
 800ad74:	1ae3      	subs	r3, r4, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	da24      	bge.n	800adc4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3370      	adds	r3, #112	; 0x70
 800ad7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ad80:	e002      	b.n	800ad88 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d011      	beq.n	800adb4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7f8 ffc6 	bl	8003d2a <lwip_htonl>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7f8 ffbf 	bl	8003d2a <lwip_htonl>
 800adac:	4603      	mov	r3, r0
 800adae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dbe6      	blt.n	800ad82 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e009      	b.n	800add8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	623b      	str	r3, [r7, #32]
 800add0:	e002      	b.n	800add8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800add2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800add4:	f7fb feff 	bl	8006bd6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d012      	beq.n	800ae0a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	4618      	mov	r0, r3
 800adec:	f7f8 ff9d 	bl	8003d2a <lwip_htonl>
 800adf0:	4602      	mov	r2, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfa:	8912      	ldrh	r2, [r2, #8]
 800adfc:	4413      	add	r3, r2
  while (seg != NULL &&
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	f4bf aed9 	bcs.w	800abb8 <tcp_output+0x160>
 800ae06:	e000      	b.n	800ae0a <tcp_output+0x3b2>
      break;
 800ae08:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d108      	bne.n	800ae24 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ae1a:	e004      	b.n	800ae26 <tcp_output+0x3ce>
    goto output_done;
 800ae1c:	bf00      	nop
 800ae1e:	e002      	b.n	800ae26 <tcp_output+0x3ce>
    goto output_done;
 800ae20:	bf00      	nop
 800ae22:	e000      	b.n	800ae26 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ae24:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	8b5b      	ldrh	r3, [r3, #26]
 800ae2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3728      	adds	r7, #40	; 0x28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae3e:	bf00      	nop

0800ae40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <tcp_output_segment_busy+0x1c>
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <tcp_output_segment_busy+0x34>)
 800ae50:	f240 529a 	movw	r2, #1434	; 0x59a
 800ae54:	4908      	ldr	r1, [pc, #32]	; (800ae78 <tcp_output_segment_busy+0x38>)
 800ae56:	4809      	ldr	r0, [pc, #36]	; (800ae7c <tcp_output_segment_busy+0x3c>)
 800ae58:	f003 fb9a 	bl	800e590 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	89db      	ldrh	r3, [r3, #14]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d001      	beq.n	800ae6a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	08011064 	.word	0x08011064
 800ae78:	08011600 	.word	0x08011600
 800ae7c:	080110b8 	.word	0x080110b8

0800ae80 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ae80:	b5b0      	push	{r4, r5, r7, lr}
 800ae82:	b08c      	sub	sp, #48	; 0x30
 800ae84:	af04      	add	r7, sp, #16
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d106      	bne.n	800aea0 <tcp_output_segment+0x20>
 800ae92:	4b63      	ldr	r3, [pc, #396]	; (800b020 <tcp_output_segment+0x1a0>)
 800ae94:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ae98:	4962      	ldr	r1, [pc, #392]	; (800b024 <tcp_output_segment+0x1a4>)
 800ae9a:	4863      	ldr	r0, [pc, #396]	; (800b028 <tcp_output_segment+0x1a8>)
 800ae9c:	f003 fb78 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d106      	bne.n	800aeb4 <tcp_output_segment+0x34>
 800aea6:	4b5e      	ldr	r3, [pc, #376]	; (800b020 <tcp_output_segment+0x1a0>)
 800aea8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800aeac:	495f      	ldr	r1, [pc, #380]	; (800b02c <tcp_output_segment+0x1ac>)
 800aeae:	485e      	ldr	r0, [pc, #376]	; (800b028 <tcp_output_segment+0x1a8>)
 800aeb0:	f003 fb6e 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d106      	bne.n	800aec8 <tcp_output_segment+0x48>
 800aeba:	4b59      	ldr	r3, [pc, #356]	; (800b020 <tcp_output_segment+0x1a0>)
 800aebc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800aec0:	495b      	ldr	r1, [pc, #364]	; (800b030 <tcp_output_segment+0x1b0>)
 800aec2:	4859      	ldr	r0, [pc, #356]	; (800b028 <tcp_output_segment+0x1a8>)
 800aec4:	f003 fb64 	bl	800e590 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7ff ffb9 	bl	800ae40 <tcp_output_segment_busy>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	e09f      	b.n	800b018 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	68dc      	ldr	r4, [r3, #12]
 800aee0:	4610      	mov	r0, r2
 800aee2:	f7f8 ff22 	bl	8003d2a <lwip_htonl>
 800aee6:	4603      	mov	r3, r0
 800aee8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	68dc      	ldr	r4, [r3, #12]
 800aef2:	4610      	mov	r0, r2
 800aef4:	f7f8 ff04 	bl	8003d00 <lwip_htons>
 800aef8:	4603      	mov	r3, r0
 800aefa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800af04:	441a      	add	r2, r3
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	3314      	adds	r3, #20
 800af10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	7a9b      	ldrb	r3, [r3, #10]
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d015      	beq.n	800af4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	3304      	adds	r3, #4
 800af22:	461a      	mov	r2, r3
 800af24:	6879      	ldr	r1, [r7, #4]
 800af26:	f44f 7006 	mov.w	r0, #536	; 0x218
 800af2a:	f7fc fa31 	bl	8007390 <tcp_eff_send_mss_netif>
 800af2e:	4603      	mov	r3, r0
 800af30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800af32:	8b7b      	ldrh	r3, [r7, #26]
 800af34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f8 fef6 	bl	8003d2a <lwip_htonl>
 800af3e:	4602      	mov	r2, r0
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	601a      	str	r2, [r3, #0]
    opts += 1;
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	3304      	adds	r3, #4
 800af48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800af50:	2b00      	cmp	r3, #0
 800af52:	da02      	bge.n	800af5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2200      	movs	r2, #0
 800af58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10c      	bne.n	800af7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800af62:	4b34      	ldr	r3, [pc, #208]	; (800b034 <tcp_output_segment+0x1b4>)
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	4618      	mov	r0, r3
 800af72:	f7f8 feda 	bl	8003d2a <lwip_htonl>
 800af76:	4602      	mov	r2, r0
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	8959      	ldrh	r1, [r3, #10]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	8b3a      	ldrh	r2, [r7, #24]
 800af96:	1a8a      	subs	r2, r1, r2
 800af98:	b292      	uxth	r2, r2
 800af9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	8919      	ldrh	r1, [r3, #8]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	8b3a      	ldrh	r2, [r7, #24]
 800afa8:	1a8a      	subs	r2, r1, r2
 800afaa:	b292      	uxth	r2, r2
 800afac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	68d2      	ldr	r2, [r2, #12]
 800afb6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	741a      	strb	r2, [r3, #16]
 800afc0:	2200      	movs	r2, #0
 800afc2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f103 0214 	add.w	r2, r3, #20
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	7a9b      	ldrb	r3, [r3, #10]
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	f003 0304 	and.w	r3, r3, #4
 800afd6:	4413      	add	r3, r2
 800afd8:	69fa      	ldr	r2, [r7, #28]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d006      	beq.n	800afec <tcp_output_segment+0x16c>
 800afde:	4b10      	ldr	r3, [pc, #64]	; (800b020 <tcp_output_segment+0x1a0>)
 800afe0:	f240 621c 	movw	r2, #1564	; 0x61c
 800afe4:	4914      	ldr	r1, [pc, #80]	; (800b038 <tcp_output_segment+0x1b8>)
 800afe6:	4810      	ldr	r0, [pc, #64]	; (800b028 <tcp_output_segment+0x1a8>)
 800afe8:	f003 fad2 	bl	800e590 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6858      	ldr	r0, [r3, #4]
 800aff0:	68b9      	ldr	r1, [r7, #8]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	1d1c      	adds	r4, r3, #4
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	7add      	ldrb	r5, [r3, #11]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	7a9b      	ldrb	r3, [r3, #10]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	9202      	str	r2, [sp, #8]
 800b002:	2206      	movs	r2, #6
 800b004:	9201      	str	r2, [sp, #4]
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	462b      	mov	r3, r5
 800b00a:	4622      	mov	r2, r4
 800b00c:	f002 fa36 	bl	800d47c <ip4_output_if>
 800b010:	4603      	mov	r3, r0
 800b012:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bdb0      	pop	{r4, r5, r7, pc}
 800b020:	08011064 	.word	0x08011064
 800b024:	08011628 	.word	0x08011628
 800b028:	080110b8 	.word	0x080110b8
 800b02c:	08011648 	.word	0x08011648
 800b030:	08011668 	.word	0x08011668
 800b034:	20024d08 	.word	0x20024d08
 800b038:	0801168c 	.word	0x0801168c

0800b03c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b03c:	b5b0      	push	{r4, r5, r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <tcp_rexmit_rto_prepare+0x1c>
 800b04a:	4b31      	ldr	r3, [pc, #196]	; (800b110 <tcp_rexmit_rto_prepare+0xd4>)
 800b04c:	f240 6263 	movw	r2, #1635	; 0x663
 800b050:	4930      	ldr	r1, [pc, #192]	; (800b114 <tcp_rexmit_rto_prepare+0xd8>)
 800b052:	4831      	ldr	r0, [pc, #196]	; (800b118 <tcp_rexmit_rto_prepare+0xdc>)
 800b054:	f003 fa9c 	bl	800e590 <iprintf>

  if (pcb->unacked == NULL) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d102      	bne.n	800b066 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b060:	f06f 0305 	mvn.w	r3, #5
 800b064:	e050      	b.n	800b108 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	e00b      	b.n	800b086 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff fee6 	bl	800ae40 <tcp_output_segment_busy>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b07a:	f06f 0305 	mvn.w	r3, #5
 800b07e:	e043      	b.n	800b108 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1ef      	bne.n	800b06e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7ff fed6 	bl	800ae40 <tcp_output_segment_busy>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b09a:	f06f 0305 	mvn.w	r3, #5
 800b09e:	e033      	b.n	800b108 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	8b5b      	ldrh	r3, [r3, #26]
 800b0ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f8 fe2d 	bl	8003d2a <lwip_htonl>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	891b      	ldrh	r3, [r3, #8]
 800b0d6:	461d      	mov	r5, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	899b      	ldrh	r3, [r3, #12]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f8 fe0d 	bl	8003d00 <lwip_htons>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <tcp_rexmit_rto_prepare+0xba>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e000      	b.n	800b0f8 <tcp_rexmit_rto_prepare+0xbc>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	442b      	add	r3, r5
 800b0fa:	18e2      	adds	r2, r4, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bdb0      	pop	{r4, r5, r7, pc}
 800b110:	08011064 	.word	0x08011064
 800b114:	080116a0 	.word	0x080116a0
 800b118:	080110b8 	.word	0x080110b8

0800b11c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <tcp_rexmit_rto_commit+0x1c>
 800b12a:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <tcp_rexmit_rto_commit+0x44>)
 800b12c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b130:	490c      	ldr	r1, [pc, #48]	; (800b164 <tcp_rexmit_rto_commit+0x48>)
 800b132:	480d      	ldr	r0, [pc, #52]	; (800b168 <tcp_rexmit_rto_commit+0x4c>)
 800b134:	f003 fa2c 	bl	800e590 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b13e:	2bff      	cmp	r3, #255	; 0xff
 800b140:	d007      	beq.n	800b152 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b148:	3301      	adds	r3, #1
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff fc80 	bl	800aa58 <tcp_output>
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	08011064 	.word	0x08011064
 800b164:	080116c4 	.word	0x080116c4
 800b168:	080110b8 	.word	0x080110b8

0800b16c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <tcp_rexmit_rto+0x1c>
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <tcp_rexmit_rto+0x38>)
 800b17c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b180:	4909      	ldr	r1, [pc, #36]	; (800b1a8 <tcp_rexmit_rto+0x3c>)
 800b182:	480a      	ldr	r0, [pc, #40]	; (800b1ac <tcp_rexmit_rto+0x40>)
 800b184:	f003 fa04 	bl	800e590 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff ff57 	bl	800b03c <tcp_rexmit_rto_prepare>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d102      	bne.n	800b19a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ffc1 	bl	800b11c <tcp_rexmit_rto_commit>
  }
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	08011064 	.word	0x08011064
 800b1a8:	080116e8 	.word	0x080116e8
 800b1ac:	080110b8 	.word	0x080110b8

0800b1b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b1b0:	b590      	push	{r4, r7, lr}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <tcp_rexmit+0x1c>
 800b1be:	4b2f      	ldr	r3, [pc, #188]	; (800b27c <tcp_rexmit+0xcc>)
 800b1c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b1c4:	492e      	ldr	r1, [pc, #184]	; (800b280 <tcp_rexmit+0xd0>)
 800b1c6:	482f      	ldr	r0, [pc, #188]	; (800b284 <tcp_rexmit+0xd4>)
 800b1c8:	f003 f9e2 	bl	800e590 <iprintf>

  if (pcb->unacked == NULL) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b1d4:	f06f 0305 	mvn.w	r3, #5
 800b1d8:	e04c      	b.n	800b274 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	f7ff fe2d 	bl	800ae40 <tcp_output_segment_busy>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b1ec:	f06f 0305 	mvn.w	r3, #5
 800b1f0:	e040      	b.n	800b274 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	336c      	adds	r3, #108	; 0x6c
 800b1fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b200:	e002      	b.n	800b208 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d011      	beq.n	800b234 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f8 fd86 	bl	8003d2a <lwip_htonl>
 800b21e:	4604      	mov	r4, r0
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	4618      	mov	r0, r3
 800b228:	f7f8 fd7f 	bl	8003d2a <lwip_htonl>
 800b22c:	4603      	mov	r3, r0
 800b22e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b230:	2b00      	cmp	r3, #0
 800b232:	dbe6      	blt.n	800b202 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d103      	bne.n	800b252 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b258:	2bff      	cmp	r3, #255	; 0xff
 800b25a:	d007      	beq.n	800b26c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b262:	3301      	adds	r3, #1
 800b264:	b2da      	uxtb	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd90      	pop	{r4, r7, pc}
 800b27c:	08011064 	.word	0x08011064
 800b280:	08011704 	.word	0x08011704
 800b284:	080110b8 	.word	0x080110b8

0800b288 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d106      	bne.n	800b2a4 <tcp_rexmit_fast+0x1c>
 800b296:	4b2a      	ldr	r3, [pc, #168]	; (800b340 <tcp_rexmit_fast+0xb8>)
 800b298:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b29c:	4929      	ldr	r1, [pc, #164]	; (800b344 <tcp_rexmit_fast+0xbc>)
 800b29e:	482a      	ldr	r0, [pc, #168]	; (800b348 <tcp_rexmit_fast+0xc0>)
 800b2a0:	f003 f976 	bl	800e590 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d044      	beq.n	800b336 <tcp_rexmit_fast+0xae>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8b5b      	ldrh	r3, [r3, #26]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d13e      	bne.n	800b336 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff ff79 	bl	800b1b0 <tcp_rexmit>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d138      	bne.n	800b336 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	bf28      	it	cs
 800b2d4:	4613      	movcs	r3, r2
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	0fda      	lsrs	r2, r3, #31
 800b2da:	4413      	add	r3, r2
 800b2dc:	105b      	asrs	r3, r3, #1
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d206      	bcs.n	800b306 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2fc:	005b      	lsls	r3, r3, #1
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b310:	4619      	mov	r1, r3
 800b312:	0049      	lsls	r1, r1, #1
 800b314:	440b      	add	r3, r1
 800b316:	b29b      	uxth	r3, r3
 800b318:	4413      	add	r3, r2
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	8b5b      	ldrh	r3, [r3, #26]
 800b326:	f043 0304 	orr.w	r3, r3, #4
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b336:	bf00      	nop
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	08011064 	.word	0x08011064
 800b344:	0801171c 	.word	0x0801171c
 800b348:	080110b8 	.word	0x080110b8

0800b34c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	460b      	mov	r3, r1
 800b358:	817b      	strh	r3, [r7, #10]
 800b35a:	4613      	mov	r3, r2
 800b35c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b35e:	897a      	ldrh	r2, [r7, #10]
 800b360:	893b      	ldrh	r3, [r7, #8]
 800b362:	4413      	add	r3, r2
 800b364:	b29b      	uxth	r3, r3
 800b366:	3314      	adds	r3, #20
 800b368:	b29b      	uxth	r3, r3
 800b36a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b36e:	4619      	mov	r1, r3
 800b370:	2022      	movs	r0, #34	; 0x22
 800b372:	f7f9 fc7d 	bl	8004c70 <pbuf_alloc>
 800b376:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d04d      	beq.n	800b41a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b37e:	897b      	ldrh	r3, [r7, #10]
 800b380:	3313      	adds	r3, #19
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	8952      	ldrh	r2, [r2, #10]
 800b386:	4293      	cmp	r3, r2
 800b388:	db06      	blt.n	800b398 <tcp_output_alloc_header_common+0x4c>
 800b38a:	4b26      	ldr	r3, [pc, #152]	; (800b424 <tcp_output_alloc_header_common+0xd8>)
 800b38c:	f240 7223 	movw	r2, #1827	; 0x723
 800b390:	4925      	ldr	r1, [pc, #148]	; (800b428 <tcp_output_alloc_header_common+0xdc>)
 800b392:	4826      	ldr	r0, [pc, #152]	; (800b42c <tcp_output_alloc_header_common+0xe0>)
 800b394:	f003 f8fc 	bl	800e590 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b39e:	8c3b      	ldrh	r3, [r7, #32]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f8 fcad 	bl	8003d00 <lwip_htons>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7f8 fca5 	bl	8003d00 <lwip_htons>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7f8 fcb0 	bl	8003d2a <lwip_htonl>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b3d0:	897b      	ldrh	r3, [r7, #10]
 800b3d2:	089b      	lsrs	r3, r3, #2
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3305      	adds	r3, #5
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	031b      	lsls	r3, r3, #12
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f8 fc89 	bl	8003d00 <lwip_htons>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b3f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7f8 fc81 	bl	8003d00 <lwip_htons>
 800b3fe:	4603      	mov	r3, r0
 800b400:	461a      	mov	r2, r3
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2200      	movs	r2, #0
 800b40a:	741a      	strb	r2, [r3, #16]
 800b40c:	2200      	movs	r2, #0
 800b40e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	2200      	movs	r2, #0
 800b414:	749a      	strb	r2, [r3, #18]
 800b416:	2200      	movs	r2, #0
 800b418:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b41a:	697b      	ldr	r3, [r7, #20]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	08011064 	.word	0x08011064
 800b428:	0801173c 	.word	0x0801173c
 800b42c:	080110b8 	.word	0x080110b8

0800b430 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b430:	b5b0      	push	{r4, r5, r7, lr}
 800b432:	b08a      	sub	sp, #40	; 0x28
 800b434:	af04      	add	r7, sp, #16
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	817b      	strh	r3, [r7, #10]
 800b43e:	4613      	mov	r3, r2
 800b440:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <tcp_output_alloc_header+0x26>
 800b448:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <tcp_output_alloc_header+0x70>)
 800b44a:	f240 7242 	movw	r2, #1858	; 0x742
 800b44e:	4915      	ldr	r1, [pc, #84]	; (800b4a4 <tcp_output_alloc_header+0x74>)
 800b450:	4815      	ldr	r0, [pc, #84]	; (800b4a8 <tcp_output_alloc_header+0x78>)
 800b452:	f003 f89d 	bl	800e590 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8adb      	ldrh	r3, [r3, #22]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	8b12      	ldrh	r2, [r2, #24]
 800b462:	68f9      	ldr	r1, [r7, #12]
 800b464:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b466:	893d      	ldrh	r5, [r7, #8]
 800b468:	897c      	ldrh	r4, [r7, #10]
 800b46a:	9103      	str	r1, [sp, #12]
 800b46c:	2110      	movs	r1, #16
 800b46e:	9102      	str	r1, [sp, #8]
 800b470:	9201      	str	r2, [sp, #4]
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	462a      	mov	r2, r5
 800b478:	4621      	mov	r1, r4
 800b47a:	f7ff ff67 	bl	800b34c <tcp_output_alloc_header_common>
 800b47e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d006      	beq.n	800b494 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b48e:	441a      	add	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b494:	697b      	ldr	r3, [r7, #20]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bdb0      	pop	{r4, r5, r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	08011064 	.word	0x08011064
 800b4a4:	0801176c 	.word	0x0801176c
 800b4a8:	080110b8 	.word	0x080110b8

0800b4ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	71fb      	strb	r3, [r7, #7]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d106      	bne.n	800b4da <tcp_output_fill_options+0x2e>
 800b4cc:	4b13      	ldr	r3, [pc, #76]	; (800b51c <tcp_output_fill_options+0x70>)
 800b4ce:	f240 7256 	movw	r2, #1878	; 0x756
 800b4d2:	4913      	ldr	r1, [pc, #76]	; (800b520 <tcp_output_fill_options+0x74>)
 800b4d4:	4813      	ldr	r0, [pc, #76]	; (800b524 <tcp_output_fill_options+0x78>)
 800b4d6:	f003 f85b 	bl	800e590 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	3314      	adds	r3, #20
 800b4e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	f103 0214 	add.w	r2, r3, #20
 800b4ec:	8bfb      	ldrh	r3, [r7, #30]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	f003 0304 	and.w	r3, r3, #4
 800b4fa:	440b      	add	r3, r1
 800b4fc:	4413      	add	r3, r2
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	429a      	cmp	r2, r3
 800b502:	d006      	beq.n	800b512 <tcp_output_fill_options+0x66>
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <tcp_output_fill_options+0x70>)
 800b506:	f240 7275 	movw	r2, #1909	; 0x775
 800b50a:	4907      	ldr	r1, [pc, #28]	; (800b528 <tcp_output_fill_options+0x7c>)
 800b50c:	4805      	ldr	r0, [pc, #20]	; (800b524 <tcp_output_fill_options+0x78>)
 800b50e:	f003 f83f 	bl	800e590 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b512:	bf00      	nop
 800b514:	3720      	adds	r7, #32
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	08011064 	.word	0x08011064
 800b520:	08011794 	.word	0x08011794
 800b524:	080110b8 	.word	0x080110b8
 800b528:	0801168c 	.word	0x0801168c

0800b52c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08a      	sub	sp, #40	; 0x28
 800b530:	af04      	add	r7, sp, #16
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <tcp_output_control_segment+0x22>
 800b540:	4b1c      	ldr	r3, [pc, #112]	; (800b5b4 <tcp_output_control_segment+0x88>)
 800b542:	f240 7287 	movw	r2, #1927	; 0x787
 800b546:	491c      	ldr	r1, [pc, #112]	; (800b5b8 <tcp_output_control_segment+0x8c>)
 800b548:	481c      	ldr	r0, [pc, #112]	; (800b5bc <tcp_output_control_segment+0x90>)
 800b54a:	f003 f821 	bl	800e590 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7fe fae4 	bl	8009b20 <tcp_route>
 800b558:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b560:	23fc      	movs	r3, #252	; 0xfc
 800b562:	75fb      	strb	r3, [r7, #23]
 800b564:	e01c      	b.n	800b5a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d006      	beq.n	800b57a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	7adb      	ldrb	r3, [r3, #11]
 800b570:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	7a9b      	ldrb	r3, [r3, #10]
 800b576:	757b      	strb	r3, [r7, #21]
 800b578:	e003      	b.n	800b582 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b57a:	23ff      	movs	r3, #255	; 0xff
 800b57c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b582:	7dba      	ldrb	r2, [r7, #22]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	9302      	str	r3, [sp, #8]
 800b588:	2306      	movs	r3, #6
 800b58a:	9301      	str	r3, [sp, #4]
 800b58c:	7d7b      	ldrb	r3, [r7, #21]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	6879      	ldr	r1, [r7, #4]
 800b596:	68b8      	ldr	r0, [r7, #8]
 800b598:	f001 ff70 	bl	800d47c <ip4_output_if>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b5a0:	68b8      	ldr	r0, [r7, #8]
 800b5a2:	f7f9 fe47 	bl	8005234 <pbuf_free>
  return err;
 800b5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	08011064 	.word	0x08011064
 800b5b8:	080117bc 	.word	0x080117bc
 800b5bc:	080110b8 	.word	0x080110b8

0800b5c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b5c0:	b590      	push	{r4, r7, lr}
 800b5c2:	b08b      	sub	sp, #44	; 0x2c
 800b5c4:	af04      	add	r7, sp, #16
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <tcp_rst+0x22>
 800b5d4:	4b1f      	ldr	r3, [pc, #124]	; (800b654 <tcp_rst+0x94>)
 800b5d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b5da:	491f      	ldr	r1, [pc, #124]	; (800b658 <tcp_rst+0x98>)
 800b5dc:	481f      	ldr	r0, [pc, #124]	; (800b65c <tcp_rst+0x9c>)
 800b5de:	f002 ffd7 	bl	800e590 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d106      	bne.n	800b5f6 <tcp_rst+0x36>
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <tcp_rst+0x94>)
 800b5ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b5ee:	491c      	ldr	r1, [pc, #112]	; (800b660 <tcp_rst+0xa0>)
 800b5f0:	481a      	ldr	r0, [pc, #104]	; (800b65c <tcp_rst+0x9c>)
 800b5f2:	f002 ffcd 	bl	800e590 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b5fa:	f244 2308 	movw	r3, #16904	; 0x4208
 800b5fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b600:	7dfb      	ldrb	r3, [r7, #23]
 800b602:	b29c      	uxth	r4, r3
 800b604:	68b8      	ldr	r0, [r7, #8]
 800b606:	f7f8 fb90 	bl	8003d2a <lwip_htonl>
 800b60a:	4602      	mov	r2, r0
 800b60c:	8abb      	ldrh	r3, [r7, #20]
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	2314      	movs	r3, #20
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	4613      	mov	r3, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	4621      	mov	r1, r4
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fe92 	bl	800b34c <tcp_output_alloc_header_common>
 800b628:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00c      	beq.n	800b64a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	2200      	movs	r2, #0
 800b634:	6939      	ldr	r1, [r7, #16]
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f7ff ff38 	bl	800b4ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	6939      	ldr	r1, [r7, #16]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7ff ff72 	bl	800b52c <tcp_output_control_segment>
 800b648:	e000      	b.n	800b64c <tcp_rst+0x8c>
    return;
 800b64a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd90      	pop	{r4, r7, pc}
 800b652:	bf00      	nop
 800b654:	08011064 	.word	0x08011064
 800b658:	080117e8 	.word	0x080117e8
 800b65c:	080110b8 	.word	0x080110b8
 800b660:	08011804 	.word	0x08011804

0800b664 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b664:	b590      	push	{r4, r7, lr}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <tcp_send_empty_ack+0x24>
 800b67a:	4b28      	ldr	r3, [pc, #160]	; (800b71c <tcp_send_empty_ack+0xb8>)
 800b67c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b680:	4927      	ldr	r1, [pc, #156]	; (800b720 <tcp_send_empty_ack+0xbc>)
 800b682:	4828      	ldr	r0, [pc, #160]	; (800b724 <tcp_send_empty_ack+0xc0>)
 800b684:	f002 ff84 	bl	800e590 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b694:	7d7b      	ldrb	r3, [r7, #21]
 800b696:	b29c      	uxth	r4, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7f8 fb44 	bl	8003d2a <lwip_htonl>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fec1 	bl	800b430 <tcp_output_alloc_header>
 800b6ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ba:	f043 0303 	orr.w	r3, r3, #3
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b6c4:	f06f 0301 	mvn.w	r3, #1
 800b6c8:	e023      	b.n	800b712 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b6ca:	7dbb      	ldrb	r3, [r7, #22]
 800b6cc:	7dfa      	ldrb	r2, [r7, #23]
 800b6ce:	6939      	ldr	r1, [r7, #16]
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff feeb 	bl	800b4ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	6939      	ldr	r1, [r7, #16]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7ff ff24 	bl	800b52c <tcp_output_control_segment>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8b5b      	ldrh	r3, [r3, #26]
 800b6f4:	f043 0303 	orr.w	r3, r3, #3
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	835a      	strh	r2, [r3, #26]
 800b6fe:	e006      	b.n	800b70e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	8b5b      	ldrh	r3, [r3, #26]
 800b704:	f023 0303 	bic.w	r3, r3, #3
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b712:	4618      	mov	r0, r3
 800b714:	371c      	adds	r7, #28
 800b716:	46bd      	mov	sp, r7
 800b718:	bd90      	pop	{r4, r7, pc}
 800b71a:	bf00      	nop
 800b71c:	08011064 	.word	0x08011064
 800b720:	08011820 	.word	0x08011820
 800b724:	080110b8 	.word	0x080110b8

0800b728 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b728:	b590      	push	{r4, r7, lr}
 800b72a:	b087      	sub	sp, #28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b730:	2300      	movs	r3, #0
 800b732:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d106      	bne.n	800b748 <tcp_keepalive+0x20>
 800b73a:	4b18      	ldr	r3, [pc, #96]	; (800b79c <tcp_keepalive+0x74>)
 800b73c:	f640 0224 	movw	r2, #2084	; 0x824
 800b740:	4917      	ldr	r1, [pc, #92]	; (800b7a0 <tcp_keepalive+0x78>)
 800b742:	4818      	ldr	r0, [pc, #96]	; (800b7a4 <tcp_keepalive+0x7c>)
 800b744:	f002 ff24 	bl	800e590 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	b29c      	uxth	r4, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b750:	3b01      	subs	r3, #1
 800b752:	4618      	mov	r0, r3
 800b754:	f7f8 fae9 	bl	8003d2a <lwip_htonl>
 800b758:	4603      	mov	r3, r0
 800b75a:	2200      	movs	r2, #0
 800b75c:	4621      	mov	r1, r4
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff fe66 	bl	800b430 <tcp_output_alloc_header>
 800b764:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b76c:	f04f 33ff 	mov.w	r3, #4294967295
 800b770:	e010      	b.n	800b794 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	2200      	movs	r2, #0
 800b776:	6939      	ldr	r1, [r7, #16]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f7ff fe97 	bl	800b4ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3304      	adds	r3, #4
 800b784:	6939      	ldr	r1, [r7, #16]
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff fed0 	bl	800b52c <tcp_output_control_segment>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b794:	4618      	mov	r0, r3
 800b796:	371c      	adds	r7, #28
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd90      	pop	{r4, r7, pc}
 800b79c:	08011064 	.word	0x08011064
 800b7a0:	08011840 	.word	0x08011840
 800b7a4:	080110b8 	.word	0x080110b8

0800b7a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b08b      	sub	sp, #44	; 0x2c
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <tcp_zero_window_probe+0x22>
 800b7bc:	4b4c      	ldr	r3, [pc, #304]	; (800b8f0 <tcp_zero_window_probe+0x148>)
 800b7be:	f640 024f 	movw	r2, #2127	; 0x84f
 800b7c2:	494c      	ldr	r1, [pc, #304]	; (800b8f4 <tcp_zero_window_probe+0x14c>)
 800b7c4:	484c      	ldr	r0, [pc, #304]	; (800b8f8 <tcp_zero_window_probe+0x150>)
 800b7c6:	f002 fee3 	bl	800e590 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e086      	b.n	800b8e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b7e0:	2bff      	cmp	r3, #255	; 0xff
 800b7e2:	d007      	beq.n	800b7f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	899b      	ldrh	r3, [r3, #12]
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7f8 fa7f 	bl	8003d00 <lwip_htons>
 800b802:	4603      	mov	r3, r0
 800b804:	b2db      	uxtb	r3, r3
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d005      	beq.n	800b81a <tcp_zero_window_probe+0x72>
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	891b      	ldrh	r3, [r3, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <tcp_zero_window_probe+0x72>
 800b816:	2301      	movs	r3, #1
 800b818:	e000      	b.n	800b81c <tcp_zero_window_probe+0x74>
 800b81a:	2300      	movs	r3, #0
 800b81c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b81e:	7ffb      	ldrb	r3, [r7, #31]
 800b820:	2b00      	cmp	r3, #0
 800b822:	bf0c      	ite	eq
 800b824:	2301      	moveq	r3, #1
 800b826:	2300      	movne	r3, #0
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b830:	b299      	uxth	r1, r3
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	8bba      	ldrh	r2, [r7, #28]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff fdf8 	bl	800b430 <tcp_output_alloc_header>
 800b840:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d102      	bne.n	800b84e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b848:	f04f 33ff 	mov.w	r3, #4294967295
 800b84c:	e04c      	b.n	800b8e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b854:	7ffb      	ldrb	r3, [r7, #31]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d011      	beq.n	800b87e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	899b      	ldrh	r3, [r3, #12]
 800b85e:	b29b      	uxth	r3, r3
 800b860:	b21b      	sxth	r3, r3
 800b862:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b866:	b21c      	sxth	r4, r3
 800b868:	2011      	movs	r0, #17
 800b86a:	f7f8 fa49 	bl	8003d00 <lwip_htons>
 800b86e:	4603      	mov	r3, r0
 800b870:	b21b      	sxth	r3, r3
 800b872:	4323      	orrs	r3, r4
 800b874:	b21b      	sxth	r3, r3
 800b876:	b29a      	uxth	r2, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	819a      	strh	r2, [r3, #12]
 800b87c:	e010      	b.n	800b8a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	3314      	adds	r3, #20
 800b884:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b886:	6a3b      	ldr	r3, [r7, #32]
 800b888:	6858      	ldr	r0, [r3, #4]
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	891a      	ldrh	r2, [r3, #8]
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	891b      	ldrh	r3, [r3, #8]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	b29b      	uxth	r3, r3
 800b898:	2201      	movs	r2, #1
 800b89a:	6939      	ldr	r1, [r7, #16]
 800b89c:	f7f9 fec4 	bl	8005628 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7f8 fa3f 	bl	8003d2a <lwip_htonl>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	da02      	bge.n	800b8c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	69b9      	ldr	r1, [r7, #24]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff fded 	bl	800b4ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fe26 	bl	800b52c <tcp_output_control_segment>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b8e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	372c      	adds	r7, #44	; 0x2c
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd90      	pop	{r4, r7, pc}
 800b8f0:	08011064 	.word	0x08011064
 800b8f4:	0801185c 	.word	0x0801185c
 800b8f8:	080110b8 	.word	0x080110b8

0800b8fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b904:	f7fa f810 	bl	8005928 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b908:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <tcpip_tcp_timer+0x38>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <tcpip_tcp_timer+0x1c>
 800b910:	4b09      	ldr	r3, [pc, #36]	; (800b938 <tcpip_tcp_timer+0x3c>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d005      	beq.n	800b924 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b918:	2200      	movs	r2, #0
 800b91a:	4908      	ldr	r1, [pc, #32]	; (800b93c <tcpip_tcp_timer+0x40>)
 800b91c:	20fa      	movs	r0, #250	; 0xfa
 800b91e:	f000 f8f3 	bl	800bb08 <sys_timeout>
 800b922:	e003      	b.n	800b92c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b924:	4b06      	ldr	r3, [pc, #24]	; (800b940 <tcpip_tcp_timer+0x44>)
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
  }
}
 800b92a:	bf00      	nop
 800b92c:	bf00      	nop
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20024d04 	.word	0x20024d04
 800b938:	20024d14 	.word	0x20024d14
 800b93c:	0800b8fd 	.word	0x0800b8fd
 800b940:	20000090 	.word	0x20000090

0800b944 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b948:	4b0a      	ldr	r3, [pc, #40]	; (800b974 <tcp_timer_needed+0x30>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10f      	bne.n	800b970 <tcp_timer_needed+0x2c>
 800b950:	4b09      	ldr	r3, [pc, #36]	; (800b978 <tcp_timer_needed+0x34>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <tcp_timer_needed+0x1c>
 800b958:	4b08      	ldr	r3, [pc, #32]	; (800b97c <tcp_timer_needed+0x38>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d007      	beq.n	800b970 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b960:	4b04      	ldr	r3, [pc, #16]	; (800b974 <tcp_timer_needed+0x30>)
 800b962:	2201      	movs	r2, #1
 800b964:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b966:	2200      	movs	r2, #0
 800b968:	4905      	ldr	r1, [pc, #20]	; (800b980 <tcp_timer_needed+0x3c>)
 800b96a:	20fa      	movs	r0, #250	; 0xfa
 800b96c:	f000 f8cc 	bl	800bb08 <sys_timeout>
  }
}
 800b970:	bf00      	nop
 800b972:	bd80      	pop	{r7, pc}
 800b974:	20000090 	.word	0x20000090
 800b978:	20024d04 	.word	0x20024d04
 800b97c:	20024d14 	.word	0x20024d14
 800b980:	0800b8fd 	.word	0x0800b8fd

0800b984 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b990:	2006      	movs	r0, #6
 800b992:	f7f8 fdf3 	bl	800457c <memp_malloc>
 800b996:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d109      	bne.n	800b9b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d151      	bne.n	800ba48 <sys_timeout_abs+0xc4>
 800b9a4:	4b2a      	ldr	r3, [pc, #168]	; (800ba50 <sys_timeout_abs+0xcc>)
 800b9a6:	22be      	movs	r2, #190	; 0xbe
 800b9a8:	492a      	ldr	r1, [pc, #168]	; (800ba54 <sys_timeout_abs+0xd0>)
 800b9aa:	482b      	ldr	r0, [pc, #172]	; (800ba58 <sys_timeout_abs+0xd4>)
 800b9ac:	f002 fdf0 	bl	800e590 <iprintf>
    return;
 800b9b0:	e04a      	b.n	800ba48 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b9ca:	4b24      	ldr	r3, [pc, #144]	; (800ba5c <sys_timeout_abs+0xd8>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d103      	bne.n	800b9da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b9d2:	4a22      	ldr	r2, [pc, #136]	; (800ba5c <sys_timeout_abs+0xd8>)
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6013      	str	r3, [r2, #0]
    return;
 800b9d8:	e037      	b.n	800ba4a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	4b1f      	ldr	r3, [pc, #124]	; (800ba5c <sys_timeout_abs+0xd8>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	0fdb      	lsrs	r3, r3, #31
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d007      	beq.n	800ba02 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b9f2:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <sys_timeout_abs+0xd8>)
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b9fa:	4a18      	ldr	r2, [pc, #96]	; (800ba5c <sys_timeout_abs+0xd8>)
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	e023      	b.n	800ba4a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ba02:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <sys_timeout_abs+0xd8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e01a      	b.n	800ba40 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <sys_timeout_abs+0xa6>
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	0fdb      	lsrs	r3, r3, #31
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d007      	beq.n	800ba3a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	601a      	str	r2, [r3, #0]
        break;
 800ba38:	e007      	b.n	800ba4a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e1      	bne.n	800ba0a <sys_timeout_abs+0x86>
 800ba46:	e000      	b.n	800ba4a <sys_timeout_abs+0xc6>
    return;
 800ba48:	bf00      	nop
      }
    }
  }
}
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	08011880 	.word	0x08011880
 800ba54:	080118b4 	.word	0x080118b4
 800ba58:	080118f4 	.word	0x080118f4
 800ba5c:	20000088 	.word	0x20000088

0800ba60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	4798      	blx	r3

  now = sys_now();
 800ba72:	f7f8 f8b7 	bl	8003be4 <sys_now>
 800ba76:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	; (800babc <lwip_cyclic_timer+0x5c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4413      	add	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	0fdb      	lsrs	r3, r3, #31
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d009      	beq.n	800baaa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4907      	ldr	r1, [pc, #28]	; (800bac0 <lwip_cyclic_timer+0x60>)
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff ff6e 	bl	800b984 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800baa8:	e004      	b.n	800bab4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4904      	ldr	r1, [pc, #16]	; (800bac0 <lwip_cyclic_timer+0x60>)
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff ff68 	bl	800b984 <sys_timeout_abs>
}
 800bab4:	bf00      	nop
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	2000008c 	.word	0x2000008c
 800bac0:	0800ba61 	.word	0x0800ba61

0800bac4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800baca:	2301      	movs	r3, #1
 800bacc:	607b      	str	r3, [r7, #4]
 800bace:	e00e      	b.n	800baee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bad0:	4a0b      	ldr	r2, [pc, #44]	; (800bb00 <sys_timeouts_init+0x3c>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	4a08      	ldr	r2, [pc, #32]	; (800bb00 <sys_timeouts_init+0x3c>)
 800bade:	4413      	add	r3, r2
 800bae0:	461a      	mov	r2, r3
 800bae2:	4908      	ldr	r1, [pc, #32]	; (800bb04 <sys_timeouts_init+0x40>)
 800bae4:	f000 f810 	bl	800bb08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	3301      	adds	r3, #1
 800baec:	607b      	str	r3, [r7, #4]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d9ed      	bls.n	800bad0 <sys_timeouts_init+0xc>
  }
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	08012458 	.word	0x08012458
 800bb04:	0800ba61 	.word	0x0800ba61

0800bb08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb1a:	d306      	bcc.n	800bb2a <sys_timeout+0x22>
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <sys_timeout+0x40>)
 800bb1e:	f240 1229 	movw	r2, #297	; 0x129
 800bb22:	490a      	ldr	r1, [pc, #40]	; (800bb4c <sys_timeout+0x44>)
 800bb24:	480a      	ldr	r0, [pc, #40]	; (800bb50 <sys_timeout+0x48>)
 800bb26:	f002 fd33 	bl	800e590 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bb2a:	f7f8 f85b 	bl	8003be4 <sys_now>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4413      	add	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	6978      	ldr	r0, [r7, #20]
 800bb3c:	f7ff ff22 	bl	800b984 <sys_timeout_abs>
#endif
}
 800bb40:	bf00      	nop
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	08011880 	.word	0x08011880
 800bb4c:	0801191c 	.word	0x0801191c
 800bb50:	080118f4 	.word	0x080118f4

0800bb54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bb5a:	f7f8 f843 	bl	8003be4 <sys_now>
 800bb5e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bb60:	4b1a      	ldr	r3, [pc, #104]	; (800bbcc <sys_check_timeouts+0x78>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <sys_check_timeouts+0x1a>
 800bb6a:	f7f9 f82b 	bl	8004bc4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bb6e:	4b18      	ldr	r3, [pc, #96]	; (800bbd0 <sys_check_timeouts+0x7c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d022      	beq.n	800bbc0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	0fdb      	lsrs	r3, r3, #31
 800bb84:	f003 0301 	and.w	r3, r3, #1
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d11a      	bne.n	800bbc4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a0f      	ldr	r2, [pc, #60]	; (800bbd0 <sys_check_timeouts+0x7c>)
 800bb94:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	4a0b      	ldr	r2, [pc, #44]	; (800bbd4 <sys_check_timeouts+0x80>)
 800bba8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	2006      	movs	r0, #6
 800bbae:	f7f8 fd31 	bl	8004614 <memp_free>
    if (handler != NULL) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d0d3      	beq.n	800bb60 <sys_check_timeouts+0xc>
      handler(arg);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6838      	ldr	r0, [r7, #0]
 800bbbc:	4798      	blx	r3
  do {
 800bbbe:	e7cf      	b.n	800bb60 <sys_check_timeouts+0xc>
      return;
 800bbc0:	bf00      	nop
 800bbc2:	e000      	b.n	800bbc6 <sys_check_timeouts+0x72>
      return;
 800bbc4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20024cfc 	.word	0x20024cfc
 800bbd0:	20000088 	.word	0x20000088
 800bbd4:	2000008c 	.word	0x2000008c

0800bbd8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bbdc:	f002 fcf0 	bl	800e5c0 <rand>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	4b01      	ldr	r3, [pc, #4]	; (800bbf8 <udp_init+0x20>)
 800bbf2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bbf4:	bf00      	nop
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	10000010 	.word	0x10000010

0800bbfc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	4613      	mov	r3, r2
 800bc08:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d105      	bne.n	800bc1c <udp_input_local_match+0x20>
 800bc10:	4b27      	ldr	r3, [pc, #156]	; (800bcb0 <udp_input_local_match+0xb4>)
 800bc12:	2287      	movs	r2, #135	; 0x87
 800bc14:	4927      	ldr	r1, [pc, #156]	; (800bcb4 <udp_input_local_match+0xb8>)
 800bc16:	4828      	ldr	r0, [pc, #160]	; (800bcb8 <udp_input_local_match+0xbc>)
 800bc18:	f002 fcba 	bl	800e590 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d105      	bne.n	800bc2e <udp_input_local_match+0x32>
 800bc22:	4b23      	ldr	r3, [pc, #140]	; (800bcb0 <udp_input_local_match+0xb4>)
 800bc24:	2288      	movs	r2, #136	; 0x88
 800bc26:	4925      	ldr	r1, [pc, #148]	; (800bcbc <udp_input_local_match+0xc0>)
 800bc28:	4823      	ldr	r0, [pc, #140]	; (800bcb8 <udp_input_local_match+0xbc>)
 800bc2a:	f002 fcb1 	bl	800e590 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	7a1b      	ldrb	r3, [r3, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00b      	beq.n	800bc4e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	7a1a      	ldrb	r2, [r3, #8]
 800bc3a:	4b21      	ldr	r3, [pc, #132]	; (800bcc0 <udp_input_local_match+0xc4>)
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc42:	3301      	adds	r3, #1
 800bc44:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d001      	beq.n	800bc4e <udp_input_local_match+0x52>
    return 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	e02b      	b.n	800bca6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bc4e:	79fb      	ldrb	r3, [r7, #7]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d018      	beq.n	800bc86 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d013      	beq.n	800bc82 <udp_input_local_match+0x86>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00f      	beq.n	800bc82 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bc62:	4b17      	ldr	r3, [pc, #92]	; (800bcc0 <udp_input_local_match+0xc4>)
 800bc64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6a:	d00a      	beq.n	800bc82 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	4b13      	ldr	r3, [pc, #76]	; (800bcc0 <udp_input_local_match+0xc4>)
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	405a      	eors	r2, r3
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	3308      	adds	r3, #8
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d110      	bne.n	800bca4 <udp_input_local_match+0xa8>
          return 1;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e00f      	b.n	800bca6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d009      	beq.n	800bca0 <udp_input_local_match+0xa4>
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <udp_input_local_match+0xa4>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <udp_input_local_match+0xc4>)
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d101      	bne.n	800bca4 <udp_input_local_match+0xa8>
        return 1;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e000      	b.n	800bca6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	08011968 	.word	0x08011968
 800bcb4:	08011998 	.word	0x08011998
 800bcb8:	080119bc 	.word	0x080119bc
 800bcbc:	080119e4 	.word	0x080119e4
 800bcc0:	200032d0 	.word	0x200032d0

0800bcc4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b08d      	sub	sp, #52	; 0x34
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d105      	bne.n	800bce4 <udp_input+0x20>
 800bcd8:	4b7c      	ldr	r3, [pc, #496]	; (800becc <udp_input+0x208>)
 800bcda:	22cf      	movs	r2, #207	; 0xcf
 800bcdc:	497c      	ldr	r1, [pc, #496]	; (800bed0 <udp_input+0x20c>)
 800bcde:	487d      	ldr	r0, [pc, #500]	; (800bed4 <udp_input+0x210>)
 800bce0:	f002 fc56 	bl	800e590 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d105      	bne.n	800bcf6 <udp_input+0x32>
 800bcea:	4b78      	ldr	r3, [pc, #480]	; (800becc <udp_input+0x208>)
 800bcec:	22d0      	movs	r2, #208	; 0xd0
 800bcee:	497a      	ldr	r1, [pc, #488]	; (800bed8 <udp_input+0x214>)
 800bcf0:	4878      	ldr	r0, [pc, #480]	; (800bed4 <udp_input+0x210>)
 800bcf2:	f002 fc4d 	bl	800e590 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	895b      	ldrh	r3, [r3, #10]
 800bcfa:	2b07      	cmp	r3, #7
 800bcfc:	d803      	bhi.n	800bd06 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7f9 fa98 	bl	8005234 <pbuf_free>
    goto end;
 800bd04:	e0de      	b.n	800bec4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bd0c:	4b73      	ldr	r3, [pc, #460]	; (800bedc <udp_input+0x218>)
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	4a72      	ldr	r2, [pc, #456]	; (800bedc <udp_input+0x218>)
 800bd12:	6812      	ldr	r2, [r2, #0]
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f001 fc88 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f7 ffea 	bl	8003d00 <lwip_htons>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	885b      	ldrh	r3, [r3, #2]
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f7 ffe2 	bl	8003d00 <lwip_htons>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd4c:	4b64      	ldr	r3, [pc, #400]	; (800bee0 <udp_input+0x21c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	627b      	str	r3, [r7, #36]	; 0x24
 800bd52:	e054      	b.n	800bdfe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	8a5b      	ldrh	r3, [r3, #18]
 800bd58:	89fa      	ldrh	r2, [r7, #14]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d14a      	bne.n	800bdf4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bd5e:	7cfb      	ldrb	r3, [r7, #19]
 800bd60:	461a      	mov	r2, r3
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd66:	f7ff ff49 	bl	800bbfc <udp_input_local_match>
 800bd6a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d041      	beq.n	800bdf4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	7c1b      	ldrb	r3, [r3, #16]
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d11d      	bne.n	800bdb8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d102      	bne.n	800bd88 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	61fb      	str	r3, [r7, #28]
 800bd86:	e017      	b.n	800bdb8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bd88:	7cfb      	ldrb	r3, [r7, #19]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d014      	beq.n	800bdb8 <udp_input+0xf4>
 800bd8e:	4b53      	ldr	r3, [pc, #332]	; (800bedc <udp_input+0x218>)
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd96:	d10f      	bne.n	800bdb8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d008      	beq.n	800bdb8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	3304      	adds	r3, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d101      	bne.n	800bdb8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	8a9b      	ldrh	r3, [r3, #20]
 800bdbc:	8a3a      	ldrh	r2, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d118      	bne.n	800bdf4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	4b43      	ldr	r3, [pc, #268]	; (800bedc <udp_input+0x218>)
 800bdd0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d10e      	bne.n	800bdf4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d014      	beq.n	800be06 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	68da      	ldr	r2, [r3, #12]
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bde4:	4b3e      	ldr	r3, [pc, #248]	; (800bee0 <udp_input+0x21c>)
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bdec:	4a3c      	ldr	r2, [pc, #240]	; (800bee0 <udp_input+0x21c>)
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bdf2:	e008      	b.n	800be06 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1a7      	bne.n	800bd54 <udp_input+0x90>
 800be04:	e000      	b.n	800be08 <udp_input+0x144>
        break;
 800be06:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <udp_input+0x14e>
    pcb = uncon_pcb;
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <udp_input+0x15a>
    for_us = 1;
 800be18:	2301      	movs	r3, #1
 800be1a:	76fb      	strb	r3, [r7, #27]
 800be1c:	e00a      	b.n	800be34 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	3304      	adds	r3, #4
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	4b2d      	ldr	r3, [pc, #180]	; (800bedc <udp_input+0x218>)
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	429a      	cmp	r2, r3
 800be2a:	bf0c      	ite	eq
 800be2c:	2301      	moveq	r3, #1
 800be2e:	2300      	movne	r3, #0
 800be30:	b2db      	uxtb	r3, r3
 800be32:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800be34:	7efb      	ldrb	r3, [r7, #27]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d041      	beq.n	800bebe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800be3a:	2108      	movs	r1, #8
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7f9 f973 	bl	8005128 <pbuf_remove_header>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800be48:	4b20      	ldr	r3, [pc, #128]	; (800becc <udp_input+0x208>)
 800be4a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800be4e:	4925      	ldr	r1, [pc, #148]	; (800bee4 <udp_input+0x220>)
 800be50:	4820      	ldr	r0, [pc, #128]	; (800bed4 <udp_input+0x210>)
 800be52:	f002 fb9d 	bl	800e590 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f7f9 f9ec 	bl	8005234 <pbuf_free>
      goto end;
 800be5c:	e032      	b.n	800bec4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	2b00      	cmp	r3, #0
 800be62:	d012      	beq.n	800be8a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	699c      	ldr	r4, [r3, #24]
 800be70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be72:	69d8      	ldr	r0, [r3, #28]
 800be74:	8a3b      	ldrh	r3, [r7, #16]
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <udp_input+0x224>)
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be7e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800be80:	e021      	b.n	800bec6 <udp_input+0x202>
        pbuf_free(p);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7f9 f9d6 	bl	8005234 <pbuf_free>
        goto end;
 800be88:	e01c      	b.n	800bec4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800be8a:	7cfb      	ldrb	r3, [r7, #19]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d112      	bne.n	800beb6 <udp_input+0x1f2>
 800be90:	4b12      	ldr	r3, [pc, #72]	; (800bedc <udp_input+0x218>)
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be98:	2be0      	cmp	r3, #224	; 0xe0
 800be9a:	d00c      	beq.n	800beb6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800be9c:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <udp_input+0x218>)
 800be9e:	899b      	ldrh	r3, [r3, #12]
 800bea0:	3308      	adds	r3, #8
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	b21b      	sxth	r3, r3
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7f9 f9b0 	bl	800520e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800beae:	2103      	movs	r1, #3
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f001 f89b 	bl	800cfec <icmp_dest_unreach>
      pbuf_free(p);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7f9 f9bc 	bl	8005234 <pbuf_free>
  return;
 800bebc:	e003      	b.n	800bec6 <udp_input+0x202>
    pbuf_free(p);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7f9 f9b8 	bl	8005234 <pbuf_free>
  return;
 800bec4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bec6:	372c      	adds	r7, #44	; 0x2c
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd90      	pop	{r4, r7, pc}
 800becc:	08011968 	.word	0x08011968
 800bed0:	08011a0c 	.word	0x08011a0c
 800bed4:	080119bc 	.word	0x080119bc
 800bed8:	08011a24 	.word	0x08011a24
 800bedc:	200032d0 	.word	0x200032d0
 800bee0:	20024d1c 	.word	0x20024d1c
 800bee4:	08011a40 	.word	0x08011a40
 800bee8:	200032e0 	.word	0x200032e0

0800beec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01e      	beq.n	800bf3a <udp_netif_ip_addr_changed+0x4e>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d01a      	beq.n	800bf3a <udp_netif_ip_addr_changed+0x4e>
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d017      	beq.n	800bf3a <udp_netif_ip_addr_changed+0x4e>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d013      	beq.n	800bf3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bf12:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <udp_netif_ip_addr_changed+0x5c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	e00c      	b.n	800bf34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d103      	bne.n	800bf2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	60fb      	str	r3, [r7, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1ef      	bne.n	800bf1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bf3a:	bf00      	nop
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	20024d1c 	.word	0x20024d1c

0800bf4c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bf54:	4915      	ldr	r1, [pc, #84]	; (800bfac <etharp_free_entry+0x60>)
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	440b      	add	r3, r1
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d013      	beq.n	800bf90 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bf68:	4910      	ldr	r1, [pc, #64]	; (800bfac <etharp_free_entry+0x60>)
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	4413      	add	r3, r2
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	440b      	add	r3, r1
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7f9 f95b 	bl	8005234 <pbuf_free>
    arp_table[i].q = NULL;
 800bf7e:	490b      	ldr	r1, [pc, #44]	; (800bfac <etharp_free_entry+0x60>)
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	4613      	mov	r3, r2
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	440b      	add	r3, r1
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bf90:	4906      	ldr	r1, [pc, #24]	; (800bfac <etharp_free_entry+0x60>)
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	4613      	mov	r3, r2
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	4413      	add	r3, r2
 800bf9a:	00db      	lsls	r3, r3, #3
 800bf9c:	440b      	add	r3, r1
 800bf9e:	3314      	adds	r3, #20
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20000094 	.word	0x20000094

0800bfb0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	607b      	str	r3, [r7, #4]
 800bfba:	e096      	b.n	800c0ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bfbc:	494f      	ldr	r1, [pc, #316]	; (800c0fc <etharp_tmr+0x14c>)
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	4413      	add	r3, r2
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	440b      	add	r3, r1
 800bfca:	3314      	adds	r3, #20
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 8086 	beq.w	800c0e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bfd8:	4948      	ldr	r1, [pc, #288]	; (800c0fc <etharp_tmr+0x14c>)
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	005b      	lsls	r3, r3, #1
 800bfe0:	4413      	add	r3, r2
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	440b      	add	r3, r1
 800bfe6:	3312      	adds	r3, #18
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	3301      	adds	r3, #1
 800bfec:	b298      	uxth	r0, r3
 800bfee:	4943      	ldr	r1, [pc, #268]	; (800c0fc <etharp_tmr+0x14c>)
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	4613      	mov	r3, r2
 800bff4:	005b      	lsls	r3, r3, #1
 800bff6:	4413      	add	r3, r2
 800bff8:	00db      	lsls	r3, r3, #3
 800bffa:	440b      	add	r3, r1
 800bffc:	3312      	adds	r3, #18
 800bffe:	4602      	mov	r2, r0
 800c000:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c002:	493e      	ldr	r1, [pc, #248]	; (800c0fc <etharp_tmr+0x14c>)
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	4613      	mov	r3, r2
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	4413      	add	r3, r2
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	440b      	add	r3, r1
 800c010:	3312      	adds	r3, #18
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c018:	d215      	bcs.n	800c046 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c01a:	4938      	ldr	r1, [pc, #224]	; (800c0fc <etharp_tmr+0x14c>)
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	4613      	mov	r3, r2
 800c020:	005b      	lsls	r3, r3, #1
 800c022:	4413      	add	r3, r2
 800c024:	00db      	lsls	r3, r3, #3
 800c026:	440b      	add	r3, r1
 800c028:	3314      	adds	r3, #20
 800c02a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d10e      	bne.n	800c04e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c030:	4932      	ldr	r1, [pc, #200]	; (800c0fc <etharp_tmr+0x14c>)
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	4613      	mov	r3, r2
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	4413      	add	r3, r2
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	440b      	add	r3, r1
 800c03e:	3312      	adds	r3, #18
 800c040:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c042:	2b04      	cmp	r3, #4
 800c044:	d903      	bls.n	800c04e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff ff80 	bl	800bf4c <etharp_free_entry>
 800c04c:	e04a      	b.n	800c0e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c04e:	492b      	ldr	r1, [pc, #172]	; (800c0fc <etharp_tmr+0x14c>)
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	4613      	mov	r3, r2
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	4413      	add	r3, r2
 800c058:	00db      	lsls	r3, r3, #3
 800c05a:	440b      	add	r3, r1
 800c05c:	3314      	adds	r3, #20
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	2b03      	cmp	r3, #3
 800c062:	d10a      	bne.n	800c07a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c064:	4925      	ldr	r1, [pc, #148]	; (800c0fc <etharp_tmr+0x14c>)
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	4613      	mov	r3, r2
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	4413      	add	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	440b      	add	r3, r1
 800c072:	3314      	adds	r3, #20
 800c074:	2204      	movs	r2, #4
 800c076:	701a      	strb	r2, [r3, #0]
 800c078:	e034      	b.n	800c0e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c07a:	4920      	ldr	r1, [pc, #128]	; (800c0fc <etharp_tmr+0x14c>)
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	4613      	mov	r3, r2
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	440b      	add	r3, r1
 800c088:	3314      	adds	r3, #20
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d10a      	bne.n	800c0a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c090:	491a      	ldr	r1, [pc, #104]	; (800c0fc <etharp_tmr+0x14c>)
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	440b      	add	r3, r1
 800c09e:	3314      	adds	r3, #20
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	701a      	strb	r2, [r3, #0]
 800c0a4:	e01e      	b.n	800c0e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c0a6:	4915      	ldr	r1, [pc, #84]	; (800c0fc <etharp_tmr+0x14c>)
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	4413      	add	r3, r2
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	440b      	add	r3, r1
 800c0b4:	3314      	adds	r3, #20
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d113      	bne.n	800c0e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c0bc:	490f      	ldr	r1, [pc, #60]	; (800c0fc <etharp_tmr+0x14c>)
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	440b      	add	r3, r1
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	4413      	add	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	4a08      	ldr	r2, [pc, #32]	; (800c0fc <etharp_tmr+0x14c>)
 800c0da:	4413      	add	r3, r2
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4619      	mov	r1, r3
 800c0e0:	f000 fe6e 	bl	800cdc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	607b      	str	r3, [r7, #4]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b09      	cmp	r3, #9
 800c0ee:	f77f af65 	ble.w	800bfbc <etharp_tmr+0xc>
      }
    }
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	20000094 	.word	0x20000094

0800c100 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	460b      	mov	r3, r1
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c10e:	230a      	movs	r3, #10
 800c110:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c112:	230a      	movs	r3, #10
 800c114:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c116:	230a      	movs	r3, #10
 800c118:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c11e:	230a      	movs	r3, #10
 800c120:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	83bb      	strh	r3, [r7, #28]
 800c126:	2300      	movs	r3, #0
 800c128:	837b      	strh	r3, [r7, #26]
 800c12a:	2300      	movs	r3, #0
 800c12c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c12e:	2300      	movs	r3, #0
 800c130:	843b      	strh	r3, [r7, #32]
 800c132:	e0ae      	b.n	800c292 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c134:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c138:	49a6      	ldr	r1, [pc, #664]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c13a:	4613      	mov	r3, r2
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	4413      	add	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	440b      	add	r3, r1
 800c144:	3314      	adds	r3, #20
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c14a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c14e:	2b0a      	cmp	r3, #10
 800c150:	d105      	bne.n	800c15e <etharp_find_entry+0x5e>
 800c152:	7dfb      	ldrb	r3, [r7, #23]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d102      	bne.n	800c15e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c158:	8c3b      	ldrh	r3, [r7, #32]
 800c15a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c15c:	e095      	b.n	800c28a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 8092 	beq.w	800c28a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c166:	7dfb      	ldrb	r3, [r7, #23]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d009      	beq.n	800c180 <etharp_find_entry+0x80>
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d806      	bhi.n	800c180 <etharp_find_entry+0x80>
 800c172:	4b99      	ldr	r3, [pc, #612]	; (800c3d8 <etharp_find_entry+0x2d8>)
 800c174:	f240 1223 	movw	r2, #291	; 0x123
 800c178:	4998      	ldr	r1, [pc, #608]	; (800c3dc <etharp_find_entry+0x2dc>)
 800c17a:	4899      	ldr	r0, [pc, #612]	; (800c3e0 <etharp_find_entry+0x2e0>)
 800c17c:	f002 fa08 	bl	800e590 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d020      	beq.n	800c1c8 <etharp_find_entry+0xc8>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6819      	ldr	r1, [r3, #0]
 800c18a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c18e:	4891      	ldr	r0, [pc, #580]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c190:	4613      	mov	r3, r2
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	4413      	add	r3, r2
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	4403      	add	r3, r0
 800c19a:	3304      	adds	r3, #4
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4299      	cmp	r1, r3
 800c1a0:	d112      	bne.n	800c1c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00c      	beq.n	800c1c2 <etharp_find_entry+0xc2>
 800c1a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1ac:	4989      	ldr	r1, [pc, #548]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	4413      	add	r3, r2
 800c1b4:	00db      	lsls	r3, r3, #3
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3308      	adds	r3, #8
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d102      	bne.n	800c1c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c1c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1c6:	e100      	b.n	800c3ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d140      	bne.n	800c250 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c1ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1d2:	4980      	ldr	r1, [pc, #512]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	4413      	add	r3, r2
 800c1da:	00db      	lsls	r3, r3, #3
 800c1dc:	440b      	add	r3, r1
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01a      	beq.n	800c21a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c1e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1e8:	497a      	ldr	r1, [pc, #488]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4413      	add	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3312      	adds	r3, #18
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	8bba      	ldrh	r2, [r7, #28]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d845      	bhi.n	800c28a <etharp_find_entry+0x18a>
            old_queue = i;
 800c1fe:	8c3b      	ldrh	r3, [r7, #32]
 800c200:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c202:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c206:	4973      	ldr	r1, [pc, #460]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c208:	4613      	mov	r3, r2
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	4413      	add	r3, r2
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	440b      	add	r3, r1
 800c212:	3312      	adds	r3, #18
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	83bb      	strh	r3, [r7, #28]
 800c218:	e037      	b.n	800c28a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c21a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c21e:	496d      	ldr	r1, [pc, #436]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c220:	4613      	mov	r3, r2
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	440b      	add	r3, r1
 800c22a:	3312      	adds	r3, #18
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	8b7a      	ldrh	r2, [r7, #26]
 800c230:	429a      	cmp	r2, r3
 800c232:	d82a      	bhi.n	800c28a <etharp_find_entry+0x18a>
            old_pending = i;
 800c234:	8c3b      	ldrh	r3, [r7, #32]
 800c236:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c23c:	4965      	ldr	r1, [pc, #404]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c23e:	4613      	mov	r3, r2
 800c240:	005b      	lsls	r3, r3, #1
 800c242:	4413      	add	r3, r2
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	440b      	add	r3, r1
 800c248:	3312      	adds	r3, #18
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	837b      	strh	r3, [r7, #26]
 800c24e:	e01c      	b.n	800c28a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c250:	7dfb      	ldrb	r3, [r7, #23]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d919      	bls.n	800c28a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c256:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c25a:	495e      	ldr	r1, [pc, #376]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c25c:	4613      	mov	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	440b      	add	r3, r1
 800c266:	3312      	adds	r3, #18
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	8b3a      	ldrh	r2, [r7, #24]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d80c      	bhi.n	800c28a <etharp_find_entry+0x18a>
            old_stable = i;
 800c270:	8c3b      	ldrh	r3, [r7, #32]
 800c272:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c274:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c278:	4956      	ldr	r1, [pc, #344]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c27a:	4613      	mov	r3, r2
 800c27c:	005b      	lsls	r3, r3, #1
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	440b      	add	r3, r1
 800c284:	3312      	adds	r3, #18
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c28a:	8c3b      	ldrh	r3, [r7, #32]
 800c28c:	3301      	adds	r3, #1
 800c28e:	b29b      	uxth	r3, r3
 800c290:	843b      	strh	r3, [r7, #32]
 800c292:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c296:	2b09      	cmp	r3, #9
 800c298:	f77f af4c 	ble.w	800c134 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c29c:	7afb      	ldrb	r3, [r7, #11]
 800c29e:	f003 0302 	and.w	r3, r3, #2
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d108      	bne.n	800c2b8 <etharp_find_entry+0x1b8>
 800c2a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c2aa:	2b0a      	cmp	r3, #10
 800c2ac:	d107      	bne.n	800c2be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d102      	bne.n	800c2be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2bc:	e085      	b.n	800c3ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c2be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c2c2:	2b09      	cmp	r3, #9
 800c2c4:	dc02      	bgt.n	800c2cc <etharp_find_entry+0x1cc>
    i = empty;
 800c2c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2c8:	843b      	strh	r3, [r7, #32]
 800c2ca:	e039      	b.n	800c340 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c2cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c2d0:	2b09      	cmp	r3, #9
 800c2d2:	dc14      	bgt.n	800c2fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c2d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c2d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2dc:	493d      	ldr	r1, [pc, #244]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c2de:	4613      	mov	r3, r2
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	4413      	add	r3, r2
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	440b      	add	r3, r1
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d018      	beq.n	800c320 <etharp_find_entry+0x220>
 800c2ee:	4b3a      	ldr	r3, [pc, #232]	; (800c3d8 <etharp_find_entry+0x2d8>)
 800c2f0:	f240 126d 	movw	r2, #365	; 0x16d
 800c2f4:	493b      	ldr	r1, [pc, #236]	; (800c3e4 <etharp_find_entry+0x2e4>)
 800c2f6:	483a      	ldr	r0, [pc, #232]	; (800c3e0 <etharp_find_entry+0x2e0>)
 800c2f8:	f002 f94a 	bl	800e590 <iprintf>
 800c2fc:	e010      	b.n	800c320 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c2fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c302:	2b09      	cmp	r3, #9
 800c304:	dc02      	bgt.n	800c30c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c306:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c308:	843b      	strh	r3, [r7, #32]
 800c30a:	e009      	b.n	800c320 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c30c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c310:	2b09      	cmp	r3, #9
 800c312:	dc02      	bgt.n	800c31a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c314:	8bfb      	ldrh	r3, [r7, #30]
 800c316:	843b      	strh	r3, [r7, #32]
 800c318:	e002      	b.n	800c320 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	e054      	b.n	800c3ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c320:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c324:	2b09      	cmp	r3, #9
 800c326:	dd06      	ble.n	800c336 <etharp_find_entry+0x236>
 800c328:	4b2b      	ldr	r3, [pc, #172]	; (800c3d8 <etharp_find_entry+0x2d8>)
 800c32a:	f240 127f 	movw	r2, #383	; 0x17f
 800c32e:	492e      	ldr	r1, [pc, #184]	; (800c3e8 <etharp_find_entry+0x2e8>)
 800c330:	482b      	ldr	r0, [pc, #172]	; (800c3e0 <etharp_find_entry+0x2e0>)
 800c332:	f002 f92d 	bl	800e590 <iprintf>
    etharp_free_entry(i);
 800c336:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff fe06 	bl	800bf4c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c340:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c344:	2b09      	cmp	r3, #9
 800c346:	dd06      	ble.n	800c356 <etharp_find_entry+0x256>
 800c348:	4b23      	ldr	r3, [pc, #140]	; (800c3d8 <etharp_find_entry+0x2d8>)
 800c34a:	f240 1283 	movw	r2, #387	; 0x183
 800c34e:	4926      	ldr	r1, [pc, #152]	; (800c3e8 <etharp_find_entry+0x2e8>)
 800c350:	4823      	ldr	r0, [pc, #140]	; (800c3e0 <etharp_find_entry+0x2e0>)
 800c352:	f002 f91d 	bl	800e590 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c35a:	491e      	ldr	r1, [pc, #120]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c35c:	4613      	mov	r3, r2
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	4413      	add	r3, r2
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	440b      	add	r3, r1
 800c366:	3314      	adds	r3, #20
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d006      	beq.n	800c37c <etharp_find_entry+0x27c>
 800c36e:	4b1a      	ldr	r3, [pc, #104]	; (800c3d8 <etharp_find_entry+0x2d8>)
 800c370:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c374:	491d      	ldr	r1, [pc, #116]	; (800c3ec <etharp_find_entry+0x2ec>)
 800c376:	481a      	ldr	r0, [pc, #104]	; (800c3e0 <etharp_find_entry+0x2e0>)
 800c378:	f002 f90a 	bl	800e590 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00b      	beq.n	800c39a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6819      	ldr	r1, [r3, #0]
 800c38a:	4812      	ldr	r0, [pc, #72]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c38c:	4613      	mov	r3, r2
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	4413      	add	r3, r2
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	4403      	add	r3, r0
 800c396:	3304      	adds	r3, #4
 800c398:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c39a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c39e:	490d      	ldr	r1, [pc, #52]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	440b      	add	r3, r1
 800c3aa:	3312      	adds	r3, #18
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c3b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3b4:	4907      	ldr	r1, [pc, #28]	; (800c3d4 <etharp_find_entry+0x2d4>)
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	4413      	add	r3, r2
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	440b      	add	r3, r1
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c3c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3728      	adds	r7, #40	; 0x28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	20000094 	.word	0x20000094
 800c3d8:	08011ccc 	.word	0x08011ccc
 800c3dc:	08011d04 	.word	0x08011d04
 800c3e0:	08011d44 	.word	0x08011d44
 800c3e4:	08011d6c 	.word	0x08011d6c
 800c3e8:	08011d84 	.word	0x08011d84
 800c3ec:	08011d98 	.word	0x08011d98

0800c3f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c404:	2b06      	cmp	r3, #6
 800c406:	d006      	beq.n	800c416 <etharp_update_arp_entry+0x26>
 800c408:	4b48      	ldr	r3, [pc, #288]	; (800c52c <etharp_update_arp_entry+0x13c>)
 800c40a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c40e:	4948      	ldr	r1, [pc, #288]	; (800c530 <etharp_update_arp_entry+0x140>)
 800c410:	4848      	ldr	r0, [pc, #288]	; (800c534 <etharp_update_arp_entry+0x144>)
 800c412:	f002 f8bd 	bl	800e590 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d012      	beq.n	800c442 <etharp_update_arp_entry+0x52>
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00e      	beq.n	800c442 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68f9      	ldr	r1, [r7, #12]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f001 f8fe 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800c430:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c432:	2b00      	cmp	r3, #0
 800c434:	d105      	bne.n	800c442 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c43e:	2be0      	cmp	r3, #224	; 0xe0
 800c440:	d102      	bne.n	800c448 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c442:	f06f 030f 	mvn.w	r3, #15
 800c446:	e06c      	b.n	800c522 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	4619      	mov	r1, r3
 800c44e:	68b8      	ldr	r0, [r7, #8]
 800c450:	f7ff fe56 	bl	800c100 <etharp_find_entry>
 800c454:	4603      	mov	r3, r0
 800c456:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c458:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	da02      	bge.n	800c466 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c460:	8afb      	ldrh	r3, [r7, #22]
 800c462:	b25b      	sxtb	r3, r3
 800c464:	e05d      	b.n	800c522 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c466:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c46a:	4933      	ldr	r1, [pc, #204]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c46c:	4613      	mov	r3, r2
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	4413      	add	r3, r2
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	440b      	add	r3, r1
 800c476:	3314      	adds	r3, #20
 800c478:	2202      	movs	r2, #2
 800c47a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c47c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c480:	492d      	ldr	r1, [pc, #180]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c482:	4613      	mov	r3, r2
 800c484:	005b      	lsls	r3, r3, #1
 800c486:	4413      	add	r3, r2
 800c488:	00db      	lsls	r3, r3, #3
 800c48a:	440b      	add	r3, r1
 800c48c:	3308      	adds	r3, #8
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c492:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c496:	4613      	mov	r3, r2
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	4413      	add	r3, r2
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	3308      	adds	r3, #8
 800c4a0:	4a25      	ldr	r2, [pc, #148]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c4a2:	4413      	add	r3, r2
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	2206      	movs	r2, #6
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f002 f840 	bl	800e530 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c4b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c4b4:	4920      	ldr	r1, [pc, #128]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	4413      	add	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	440b      	add	r3, r1
 800c4c0:	3312      	adds	r3, #18
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c4c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c4ca:	491b      	ldr	r1, [pc, #108]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	4413      	add	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	440b      	add	r3, r1
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d021      	beq.n	800c520 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c4dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c4e0:	4915      	ldr	r1, [pc, #84]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	440b      	add	r3, r1
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c4f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c4f4:	4910      	ldr	r1, [pc, #64]	; (800c538 <etharp_update_arp_entry+0x148>)
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	4413      	add	r3, r2
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	440b      	add	r3, r1
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c50a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6939      	ldr	r1, [r7, #16]
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f001 ff91 	bl	800e43c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c51a:	6938      	ldr	r0, [r7, #16]
 800c51c:	f7f8 fe8a 	bl	8005234 <pbuf_free>
  }
  return ERR_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3718      	adds	r7, #24
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	08011ccc 	.word	0x08011ccc
 800c530:	08011dc4 	.word	0x08011dc4
 800c534:	08011d44 	.word	0x08011d44
 800c538:	20000094 	.word	0x20000094

0800c53c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	e01e      	b.n	800c588 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c54a:	4913      	ldr	r1, [pc, #76]	; (800c598 <etharp_cleanup_netif+0x5c>)
 800c54c:	68fa      	ldr	r2, [r7, #12]
 800c54e:	4613      	mov	r3, r2
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	4413      	add	r3, r2
 800c554:	00db      	lsls	r3, r3, #3
 800c556:	440b      	add	r3, r1
 800c558:	3314      	adds	r3, #20
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00e      	beq.n	800c582 <etharp_cleanup_netif+0x46>
 800c564:	490c      	ldr	r1, [pc, #48]	; (800c598 <etharp_cleanup_netif+0x5c>)
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4613      	mov	r3, r2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	4413      	add	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	440b      	add	r3, r1
 800c572:	3308      	adds	r3, #8
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d102      	bne.n	800c582 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f7ff fce5 	bl	800bf4c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	3301      	adds	r3, #1
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b09      	cmp	r3, #9
 800c58c:	dddd      	ble.n	800c54a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c58e:	bf00      	nop
 800c590:	bf00      	nop
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20000094 	.word	0x20000094

0800c59c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c59c:	b5b0      	push	{r4, r5, r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af04      	add	r7, sp, #16
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d107      	bne.n	800c5bc <etharp_input+0x20>
 800c5ac:	4b3d      	ldr	r3, [pc, #244]	; (800c6a4 <etharp_input+0x108>)
 800c5ae:	f240 228a 	movw	r2, #650	; 0x28a
 800c5b2:	493d      	ldr	r1, [pc, #244]	; (800c6a8 <etharp_input+0x10c>)
 800c5b4:	483d      	ldr	r0, [pc, #244]	; (800c6ac <etharp_input+0x110>)
 800c5b6:	f001 ffeb 	bl	800e590 <iprintf>
 800c5ba:	e06f      	b.n	800c69c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	881b      	ldrh	r3, [r3, #0]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5cc:	d10c      	bne.n	800c5e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c5d2:	2b06      	cmp	r3, #6
 800c5d4:	d108      	bne.n	800c5e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d104      	bne.n	800c5e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	885b      	ldrh	r3, [r3, #2]
 800c5e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c5e4:	2b08      	cmp	r3, #8
 800c5e6:	d003      	beq.n	800c5f0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7f8 fe23 	bl	8005234 <pbuf_free>
    return;
 800c5ee:	e055      	b.n	800c69c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	330e      	adds	r3, #14
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	3318      	adds	r3, #24
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	3304      	adds	r3, #4
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d102      	bne.n	800c610 <etharp_input+0x74>
    for_us = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	75fb      	strb	r3, [r7, #23]
 800c60e:	e009      	b.n	800c624 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	3304      	adds	r3, #4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	429a      	cmp	r2, r3
 800c61a:	bf0c      	ite	eq
 800c61c:	2301      	moveq	r3, #1
 800c61e:	2300      	movne	r3, #0
 800c620:	b2db      	uxtb	r3, r3
 800c622:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f103 0208 	add.w	r2, r3, #8
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <etharp_input+0x98>
 800c630:	2301      	movs	r3, #1
 800c632:	e000      	b.n	800c636 <etharp_input+0x9a>
 800c634:	2302      	movs	r3, #2
 800c636:	f107 010c 	add.w	r1, r7, #12
 800c63a:	6838      	ldr	r0, [r7, #0]
 800c63c:	f7ff fed8 	bl	800c3f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	88db      	ldrh	r3, [r3, #6]
 800c644:	b29b      	uxth	r3, r3
 800c646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c64a:	d003      	beq.n	800c654 <etharp_input+0xb8>
 800c64c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c650:	d01e      	beq.n	800c690 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c652:	e020      	b.n	800c696 <etharp_input+0xfa>
      if (for_us) {
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d01c      	beq.n	800c694 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c674:	2102      	movs	r1, #2
 800c676:	9103      	str	r1, [sp, #12]
 800c678:	f107 010c 	add.w	r1, r7, #12
 800c67c:	9102      	str	r1, [sp, #8]
 800c67e:	9201      	str	r2, [sp, #4]
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	462b      	mov	r3, r5
 800c684:	4622      	mov	r2, r4
 800c686:	4601      	mov	r1, r0
 800c688:	6838      	ldr	r0, [r7, #0]
 800c68a:	f000 faeb 	bl	800cc64 <etharp_raw>
      break;
 800c68e:	e001      	b.n	800c694 <etharp_input+0xf8>
      break;
 800c690:	bf00      	nop
 800c692:	e000      	b.n	800c696 <etharp_input+0xfa>
      break;
 800c694:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7f8 fdcc 	bl	8005234 <pbuf_free>
}
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	08011ccc 	.word	0x08011ccc
 800c6a8:	08011e1c 	.word	0x08011e1c
 800c6ac:	08011d44 	.word	0x08011d44

0800c6b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af02      	add	r7, sp, #8
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c6be:	79fa      	ldrb	r2, [r7, #7]
 800c6c0:	4944      	ldr	r1, [pc, #272]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	440b      	add	r3, r1
 800c6cc:	3314      	adds	r3, #20
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d806      	bhi.n	800c6e2 <etharp_output_to_arp_index+0x32>
 800c6d4:	4b40      	ldr	r3, [pc, #256]	; (800c7d8 <etharp_output_to_arp_index+0x128>)
 800c6d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c6da:	4940      	ldr	r1, [pc, #256]	; (800c7dc <etharp_output_to_arp_index+0x12c>)
 800c6dc:	4840      	ldr	r0, [pc, #256]	; (800c7e0 <etharp_output_to_arp_index+0x130>)
 800c6de:	f001 ff57 	bl	800e590 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c6e2:	79fa      	ldrb	r2, [r7, #7]
 800c6e4:	493b      	ldr	r1, [pc, #236]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	005b      	lsls	r3, r3, #1
 800c6ea:	4413      	add	r3, r2
 800c6ec:	00db      	lsls	r3, r3, #3
 800c6ee:	440b      	add	r3, r1
 800c6f0:	3314      	adds	r3, #20
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d153      	bne.n	800c7a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c6f8:	79fa      	ldrb	r2, [r7, #7]
 800c6fa:	4936      	ldr	r1, [pc, #216]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	4413      	add	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	440b      	add	r3, r1
 800c706:	3312      	adds	r3, #18
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c70e:	d919      	bls.n	800c744 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c710:	79fa      	ldrb	r2, [r7, #7]
 800c712:	4613      	mov	r3, r2
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	4413      	add	r3, r2
 800c718:	00db      	lsls	r3, r3, #3
 800c71a:	4a2e      	ldr	r2, [pc, #184]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c71c:	4413      	add	r3, r2
 800c71e:	3304      	adds	r3, #4
 800c720:	4619      	mov	r1, r3
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f000 fb4c 	bl	800cdc0 <etharp_request>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d138      	bne.n	800c7a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c72e:	79fa      	ldrb	r2, [r7, #7]
 800c730:	4928      	ldr	r1, [pc, #160]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c732:	4613      	mov	r3, r2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	4413      	add	r3, r2
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	440b      	add	r3, r1
 800c73c:	3314      	adds	r3, #20
 800c73e:	2203      	movs	r2, #3
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	e02d      	b.n	800c7a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c744:	79fa      	ldrb	r2, [r7, #7]
 800c746:	4923      	ldr	r1, [pc, #140]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c748:	4613      	mov	r3, r2
 800c74a:	005b      	lsls	r3, r3, #1
 800c74c:	4413      	add	r3, r2
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	440b      	add	r3, r1
 800c752:	3312      	adds	r3, #18
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c75a:	d321      	bcc.n	800c7a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c75c:	79fa      	ldrb	r2, [r7, #7]
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	4a1b      	ldr	r2, [pc, #108]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c768:	4413      	add	r3, r2
 800c76a:	1d19      	adds	r1, r3, #4
 800c76c:	79fa      	ldrb	r2, [r7, #7]
 800c76e:	4613      	mov	r3, r2
 800c770:	005b      	lsls	r3, r3, #1
 800c772:	4413      	add	r3, r2
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	3308      	adds	r3, #8
 800c778:	4a16      	ldr	r2, [pc, #88]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c77a:	4413      	add	r3, r2
 800c77c:	3304      	adds	r3, #4
 800c77e:	461a      	mov	r2, r3
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 fafb 	bl	800cd7c <etharp_request_dst>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d109      	bne.n	800c7a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c78c:	79fa      	ldrb	r2, [r7, #7]
 800c78e:	4911      	ldr	r1, [pc, #68]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c790:	4613      	mov	r3, r2
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	4413      	add	r3, r2
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	440b      	add	r3, r1
 800c79a:	3314      	adds	r3, #20
 800c79c:	2203      	movs	r2, #3
 800c79e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c7a6:	79fa      	ldrb	r2, [r7, #7]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	4413      	add	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	4a08      	ldr	r2, [pc, #32]	; (800c7d4 <etharp_output_to_arp_index+0x124>)
 800c7b4:	4413      	add	r3, r2
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7bc:	9200      	str	r2, [sp, #0]
 800c7be:	460a      	mov	r2, r1
 800c7c0:	68b9      	ldr	r1, [r7, #8]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f001 fe3a 	bl	800e43c <ethernet_output>
 800c7c8:	4603      	mov	r3, r0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20000094 	.word	0x20000094
 800c7d8:	08011ccc 	.word	0x08011ccc
 800c7dc:	08011e3c 	.word	0x08011e3c
 800c7e0:	08011d44 	.word	0x08011d44

0800c7e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08a      	sub	sp, #40	; 0x28
 800c7e8:	af02      	add	r7, sp, #8
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <etharp_output+0x24>
 800c7fa:	4b73      	ldr	r3, [pc, #460]	; (800c9c8 <etharp_output+0x1e4>)
 800c7fc:	f240 321e 	movw	r2, #798	; 0x31e
 800c800:	4972      	ldr	r1, [pc, #456]	; (800c9cc <etharp_output+0x1e8>)
 800c802:	4873      	ldr	r0, [pc, #460]	; (800c9d0 <etharp_output+0x1ec>)
 800c804:	f001 fec4 	bl	800e590 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d106      	bne.n	800c81c <etharp_output+0x38>
 800c80e:	4b6e      	ldr	r3, [pc, #440]	; (800c9c8 <etharp_output+0x1e4>)
 800c810:	f240 321f 	movw	r2, #799	; 0x31f
 800c814:	496f      	ldr	r1, [pc, #444]	; (800c9d4 <etharp_output+0x1f0>)
 800c816:	486e      	ldr	r0, [pc, #440]	; (800c9d0 <etharp_output+0x1ec>)
 800c818:	f001 feba 	bl	800e590 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <etharp_output+0x4c>
 800c822:	4b69      	ldr	r3, [pc, #420]	; (800c9c8 <etharp_output+0x1e4>)
 800c824:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c828:	496b      	ldr	r1, [pc, #428]	; (800c9d8 <etharp_output+0x1f4>)
 800c82a:	4869      	ldr	r0, [pc, #420]	; (800c9d0 <etharp_output+0x1ec>)
 800c82c:	f001 feb0 	bl	800e590 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68f9      	ldr	r1, [r7, #12]
 800c836:	4618      	mov	r0, r3
 800c838:	f000 fef8 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c842:	4b66      	ldr	r3, [pc, #408]	; (800c9dc <etharp_output+0x1f8>)
 800c844:	61fb      	str	r3, [r7, #28]
 800c846:	e0af      	b.n	800c9a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c850:	2be0      	cmp	r3, #224	; 0xe0
 800c852:	d118      	bne.n	800c886 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c854:	2301      	movs	r3, #1
 800c856:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c858:	2300      	movs	r3, #0
 800c85a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c85c:	235e      	movs	r3, #94	; 0x5e
 800c85e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3301      	adds	r3, #1
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3302      	adds	r3, #2
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3303      	adds	r3, #3
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c87e:	f107 0310 	add.w	r3, r7, #16
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	e090      	b.n	800c9a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3304      	adds	r3, #4
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	405a      	eors	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3308      	adds	r3, #8
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4013      	ands	r3, r2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d012      	beq.n	800c8c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c8a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d00b      	beq.n	800c8c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	330c      	adds	r3, #12
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	330c      	adds	r3, #12
 800c8ba:	61bb      	str	r3, [r7, #24]
 800c8bc:	e002      	b.n	800c8c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c8be:	f06f 0303 	mvn.w	r3, #3
 800c8c2:	e07d      	b.n	800c9c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c8c4:	4b46      	ldr	r3, [pc, #280]	; (800c9e0 <etharp_output+0x1fc>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	4a46      	ldr	r2, [pc, #280]	; (800c9e4 <etharp_output+0x200>)
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	440b      	add	r3, r1
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	4413      	add	r3, r2
 800c8d6:	3314      	adds	r3, #20
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d925      	bls.n	800c92a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c8de:	4b40      	ldr	r3, [pc, #256]	; (800c9e0 <etharp_output+0x1fc>)
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4a3f      	ldr	r2, [pc, #252]	; (800c9e4 <etharp_output+0x200>)
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	440b      	add	r3, r1
 800c8ec:	00db      	lsls	r3, r3, #3
 800c8ee:	4413      	add	r3, r2
 800c8f0:	3308      	adds	r3, #8
 800c8f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d117      	bne.n	800c92a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b38      	ldr	r3, [pc, #224]	; (800c9e0 <etharp_output+0x1fc>)
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	4937      	ldr	r1, [pc, #220]	; (800c9e4 <etharp_output+0x200>)
 800c906:	4603      	mov	r3, r0
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	4403      	add	r3, r0
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	440b      	add	r3, r1
 800c910:	3304      	adds	r3, #4
 800c912:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c914:	429a      	cmp	r2, r3
 800c916:	d108      	bne.n	800c92a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c918:	4b31      	ldr	r3, [pc, #196]	; (800c9e0 <etharp_output+0x1fc>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	68b9      	ldr	r1, [r7, #8]
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f7ff fec5 	bl	800c6b0 <etharp_output_to_arp_index>
 800c926:	4603      	mov	r3, r0
 800c928:	e04a      	b.n	800c9c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c92a:	2300      	movs	r3, #0
 800c92c:	75fb      	strb	r3, [r7, #23]
 800c92e:	e031      	b.n	800c994 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c930:	7dfa      	ldrb	r2, [r7, #23]
 800c932:	492c      	ldr	r1, [pc, #176]	; (800c9e4 <etharp_output+0x200>)
 800c934:	4613      	mov	r3, r2
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	4413      	add	r3, r2
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	440b      	add	r3, r1
 800c93e:	3314      	adds	r3, #20
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d923      	bls.n	800c98e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c946:	7dfa      	ldrb	r2, [r7, #23]
 800c948:	4926      	ldr	r1, [pc, #152]	; (800c9e4 <etharp_output+0x200>)
 800c94a:	4613      	mov	r3, r2
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	4413      	add	r3, r2
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	440b      	add	r3, r1
 800c954:	3308      	adds	r3, #8
 800c956:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d117      	bne.n	800c98e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	6819      	ldr	r1, [r3, #0]
 800c962:	7dfa      	ldrb	r2, [r7, #23]
 800c964:	481f      	ldr	r0, [pc, #124]	; (800c9e4 <etharp_output+0x200>)
 800c966:	4613      	mov	r3, r2
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	4413      	add	r3, r2
 800c96c:	00db      	lsls	r3, r3, #3
 800c96e:	4403      	add	r3, r0
 800c970:	3304      	adds	r3, #4
 800c972:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c974:	4299      	cmp	r1, r3
 800c976:	d10a      	bne.n	800c98e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c978:	4a19      	ldr	r2, [pc, #100]	; (800c9e0 <etharp_output+0x1fc>)
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	461a      	mov	r2, r3
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7ff fe93 	bl	800c6b0 <etharp_output_to_arp_index>
 800c98a:	4603      	mov	r3, r0
 800c98c:	e018      	b.n	800c9c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	3301      	adds	r3, #1
 800c992:	75fb      	strb	r3, [r7, #23]
 800c994:	7dfb      	ldrb	r3, [r7, #23]
 800c996:	2b09      	cmp	r3, #9
 800c998:	d9ca      	bls.n	800c930 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	69b9      	ldr	r1, [r7, #24]
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f000 f822 	bl	800c9e8 <etharp_query>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	e00b      	b.n	800c9c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c9ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	68b9      	ldr	r1, [r7, #8]
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f001 fd3f 	bl	800e43c <ethernet_output>
 800c9be:	4603      	mov	r3, r0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3720      	adds	r7, #32
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	08011ccc 	.word	0x08011ccc
 800c9cc:	08011e1c 	.word	0x08011e1c
 800c9d0:	08011d44 	.word	0x08011d44
 800c9d4:	08011e6c 	.word	0x08011e6c
 800c9d8:	08011e0c 	.word	0x08011e0c
 800c9dc:	08012474 	.word	0x08012474
 800c9e0:	20000184 	.word	0x20000184
 800c9e4:	20000094 	.word	0x20000094

0800c9e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	; 0x30
 800c9ec:	af02      	add	r7, sp, #8
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3326      	adds	r3, #38	; 0x26
 800c9f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c9fa:	23ff      	movs	r3, #255	; 0xff
 800c9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68f9      	ldr	r1, [r7, #12]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f000 fe0e 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10c      	bne.n	800ca30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca1e:	2be0      	cmp	r3, #224	; 0xe0
 800ca20:	d006      	beq.n	800ca30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ca30:	f06f 030f 	mvn.w	r3, #15
 800ca34:	e101      	b.n	800cc3a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	2101      	movs	r1, #1
 800ca3a:	68b8      	ldr	r0, [r7, #8]
 800ca3c:	f7ff fb60 	bl	800c100 <etharp_find_entry>
 800ca40:	4603      	mov	r3, r0
 800ca42:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ca44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	da02      	bge.n	800ca52 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ca4c:	8a7b      	ldrh	r3, [r7, #18]
 800ca4e:	b25b      	sxtb	r3, r3
 800ca50:	e0f3      	b.n	800cc3a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ca52:	8a7b      	ldrh	r3, [r7, #18]
 800ca54:	2b7e      	cmp	r3, #126	; 0x7e
 800ca56:	d906      	bls.n	800ca66 <etharp_query+0x7e>
 800ca58:	4b7a      	ldr	r3, [pc, #488]	; (800cc44 <etharp_query+0x25c>)
 800ca5a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ca5e:	497a      	ldr	r1, [pc, #488]	; (800cc48 <etharp_query+0x260>)
 800ca60:	487a      	ldr	r0, [pc, #488]	; (800cc4c <etharp_query+0x264>)
 800ca62:	f001 fd95 	bl	800e590 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ca66:	8a7b      	ldrh	r3, [r7, #18]
 800ca68:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ca6a:	7c7a      	ldrb	r2, [r7, #17]
 800ca6c:	4978      	ldr	r1, [pc, #480]	; (800cc50 <etharp_query+0x268>)
 800ca6e:	4613      	mov	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4413      	add	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	440b      	add	r3, r1
 800ca78:	3314      	adds	r3, #20
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d115      	bne.n	800caac <etharp_query+0xc4>
    is_new_entry = 1;
 800ca80:	2301      	movs	r3, #1
 800ca82:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ca84:	7c7a      	ldrb	r2, [r7, #17]
 800ca86:	4972      	ldr	r1, [pc, #456]	; (800cc50 <etharp_query+0x268>)
 800ca88:	4613      	mov	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	4413      	add	r3, r2
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	440b      	add	r3, r1
 800ca92:	3314      	adds	r3, #20
 800ca94:	2201      	movs	r2, #1
 800ca96:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ca98:	7c7a      	ldrb	r2, [r7, #17]
 800ca9a:	496d      	ldr	r1, [pc, #436]	; (800cc50 <etharp_query+0x268>)
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	4413      	add	r3, r2
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	440b      	add	r3, r1
 800caa6:	3308      	adds	r3, #8
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800caac:	7c7a      	ldrb	r2, [r7, #17]
 800caae:	4968      	ldr	r1, [pc, #416]	; (800cc50 <etharp_query+0x268>)
 800cab0:	4613      	mov	r3, r2
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	4413      	add	r3, r2
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	440b      	add	r3, r1
 800caba:	3314      	adds	r3, #20
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d011      	beq.n	800cae6 <etharp_query+0xfe>
 800cac2:	7c7a      	ldrb	r2, [r7, #17]
 800cac4:	4962      	ldr	r1, [pc, #392]	; (800cc50 <etharp_query+0x268>)
 800cac6:	4613      	mov	r3, r2
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	4413      	add	r3, r2
 800cacc:	00db      	lsls	r3, r3, #3
 800cace:	440b      	add	r3, r1
 800cad0:	3314      	adds	r3, #20
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d806      	bhi.n	800cae6 <etharp_query+0xfe>
 800cad8:	4b5a      	ldr	r3, [pc, #360]	; (800cc44 <etharp_query+0x25c>)
 800cada:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cade:	495d      	ldr	r1, [pc, #372]	; (800cc54 <etharp_query+0x26c>)
 800cae0:	485a      	ldr	r0, [pc, #360]	; (800cc4c <etharp_query+0x264>)
 800cae2:	f001 fd55 	bl	800e590 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d102      	bne.n	800caf2 <etharp_query+0x10a>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10c      	bne.n	800cb0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800caf2:	68b9      	ldr	r1, [r7, #8]
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 f963 	bl	800cdc0 <etharp_request>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d102      	bne.n	800cb0c <etharp_query+0x124>
      return result;
 800cb06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb0a:	e096      	b.n	800cc3a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d106      	bne.n	800cb20 <etharp_query+0x138>
 800cb12:	4b4c      	ldr	r3, [pc, #304]	; (800cc44 <etharp_query+0x25c>)
 800cb14:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cb18:	494f      	ldr	r1, [pc, #316]	; (800cc58 <etharp_query+0x270>)
 800cb1a:	484c      	ldr	r0, [pc, #304]	; (800cc4c <etharp_query+0x264>)
 800cb1c:	f001 fd38 	bl	800e590 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb20:	7c7a      	ldrb	r2, [r7, #17]
 800cb22:	494b      	ldr	r1, [pc, #300]	; (800cc50 <etharp_query+0x268>)
 800cb24:	4613      	mov	r3, r2
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	4413      	add	r3, r2
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	440b      	add	r3, r1
 800cb2e:	3314      	adds	r3, #20
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d917      	bls.n	800cb66 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cb36:	4a49      	ldr	r2, [pc, #292]	; (800cc5c <etharp_query+0x274>)
 800cb38:	7c7b      	ldrb	r3, [r7, #17]
 800cb3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb3c:	7c7a      	ldrb	r2, [r7, #17]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	4413      	add	r3, r2
 800cb44:	00db      	lsls	r3, r3, #3
 800cb46:	3308      	adds	r3, #8
 800cb48:	4a41      	ldr	r2, [pc, #260]	; (800cc50 <etharp_query+0x268>)
 800cb4a:	4413      	add	r3, r2
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb52:	9200      	str	r2, [sp, #0]
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	6879      	ldr	r1, [r7, #4]
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f001 fc6f 	bl	800e43c <ethernet_output>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb64:	e067      	b.n	800cc36 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb66:	7c7a      	ldrb	r2, [r7, #17]
 800cb68:	4939      	ldr	r1, [pc, #228]	; (800cc50 <etharp_query+0x268>)
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	4413      	add	r3, r2
 800cb70:	00db      	lsls	r3, r3, #3
 800cb72:	440b      	add	r3, r1
 800cb74:	3314      	adds	r3, #20
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d15c      	bne.n	800cc36 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cb84:	e01c      	b.n	800cbc0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	895a      	ldrh	r2, [r3, #10]
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	891b      	ldrh	r3, [r3, #8]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d10a      	bne.n	800cba8 <etharp_query+0x1c0>
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d006      	beq.n	800cba8 <etharp_query+0x1c0>
 800cb9a:	4b2a      	ldr	r3, [pc, #168]	; (800cc44 <etharp_query+0x25c>)
 800cb9c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cba0:	492f      	ldr	r1, [pc, #188]	; (800cc60 <etharp_query+0x278>)
 800cba2:	482a      	ldr	r0, [pc, #168]	; (800cc4c <etharp_query+0x264>)
 800cba4:	f001 fcf4 	bl	800e590 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	7b1b      	ldrb	r3, [r3, #12]
 800cbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <etharp_query+0x1d2>
        copy_needed = 1;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	61bb      	str	r3, [r7, #24]
        break;
 800cbb8:	e005      	b.n	800cbc6 <etharp_query+0x1de>
      }
      p = p->next;
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1df      	bne.n	800cb86 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d007      	beq.n	800cbdc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cbd2:	200e      	movs	r0, #14
 800cbd4:	f7f8 fe2c 	bl	8005830 <pbuf_clone>
 800cbd8:	61f8      	str	r0, [r7, #28]
 800cbda:	e004      	b.n	800cbe6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cbe0:	69f8      	ldr	r0, [r7, #28]
 800cbe2:	f7f8 fbc7 	bl	8005374 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d021      	beq.n	800cc30 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cbec:	7c7a      	ldrb	r2, [r7, #17]
 800cbee:	4918      	ldr	r1, [pc, #96]	; (800cc50 <etharp_query+0x268>)
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	005b      	lsls	r3, r3, #1
 800cbf4:	4413      	add	r3, r2
 800cbf6:	00db      	lsls	r3, r3, #3
 800cbf8:	440b      	add	r3, r1
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00a      	beq.n	800cc16 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cc00:	7c7a      	ldrb	r2, [r7, #17]
 800cc02:	4913      	ldr	r1, [pc, #76]	; (800cc50 <etharp_query+0x268>)
 800cc04:	4613      	mov	r3, r2
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	4413      	add	r3, r2
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	440b      	add	r3, r1
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f8 fb0f 	bl	8005234 <pbuf_free>
      }
      arp_table[i].q = p;
 800cc16:	7c7a      	ldrb	r2, [r7, #17]
 800cc18:	490d      	ldr	r1, [pc, #52]	; (800cc50 <etharp_query+0x268>)
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	4413      	add	r3, r2
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	440b      	add	r3, r1
 800cc24:	69fa      	ldr	r2, [r7, #28]
 800cc26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc2e:	e002      	b.n	800cc36 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cc30:	23ff      	movs	r3, #255	; 0xff
 800cc32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cc36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3728      	adds	r7, #40	; 0x28
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	08011ccc 	.word	0x08011ccc
 800cc48:	08011e78 	.word	0x08011e78
 800cc4c:	08011d44 	.word	0x08011d44
 800cc50:	20000094 	.word	0x20000094
 800cc54:	08011e88 	.word	0x08011e88
 800cc58:	08011e6c 	.word	0x08011e6c
 800cc5c:	20000184 	.word	0x20000184
 800cc60:	08011eb0 	.word	0x08011eb0

0800cc64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b08a      	sub	sp, #40	; 0x28
 800cc68:	af02      	add	r7, sp, #8
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d106      	bne.n	800cc8a <etharp_raw+0x26>
 800cc7c:	4b3a      	ldr	r3, [pc, #232]	; (800cd68 <etharp_raw+0x104>)
 800cc7e:	f240 4257 	movw	r2, #1111	; 0x457
 800cc82:	493a      	ldr	r1, [pc, #232]	; (800cd6c <etharp_raw+0x108>)
 800cc84:	483a      	ldr	r0, [pc, #232]	; (800cd70 <etharp_raw+0x10c>)
 800cc86:	f001 fc83 	bl	800e590 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cc8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc8e:	211c      	movs	r1, #28
 800cc90:	200e      	movs	r0, #14
 800cc92:	f7f7 ffed 	bl	8004c70 <pbuf_alloc>
 800cc96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d102      	bne.n	800cca4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cca2:	e05d      	b.n	800cd60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	895b      	ldrh	r3, [r3, #10]
 800cca8:	2b1b      	cmp	r3, #27
 800ccaa:	d806      	bhi.n	800ccba <etharp_raw+0x56>
 800ccac:	4b2e      	ldr	r3, [pc, #184]	; (800cd68 <etharp_raw+0x104>)
 800ccae:	f240 4262 	movw	r2, #1122	; 0x462
 800ccb2:	4930      	ldr	r1, [pc, #192]	; (800cd74 <etharp_raw+0x110>)
 800ccb4:	482e      	ldr	r0, [pc, #184]	; (800cd70 <etharp_raw+0x10c>)
 800ccb6:	f001 fc6b 	bl	800e590 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ccc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7f7 f81c 	bl	8003d00 <lwip_htons>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	461a      	mov	r2, r3
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ccd6:	2b06      	cmp	r3, #6
 800ccd8:	d006      	beq.n	800cce8 <etharp_raw+0x84>
 800ccda:	4b23      	ldr	r3, [pc, #140]	; (800cd68 <etharp_raw+0x104>)
 800ccdc:	f240 4269 	movw	r2, #1129	; 0x469
 800cce0:	4925      	ldr	r1, [pc, #148]	; (800cd78 <etharp_raw+0x114>)
 800cce2:	4823      	ldr	r0, [pc, #140]	; (800cd70 <etharp_raw+0x10c>)
 800cce4:	f001 fc54 	bl	800e590 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	3308      	adds	r3, #8
 800ccec:	2206      	movs	r2, #6
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f001 fc1d 	bl	800e530 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	3312      	adds	r3, #18
 800ccfa:	2206      	movs	r2, #6
 800ccfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f001 fc16 	bl	800e530 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	330e      	adds	r3, #14
 800cd08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd0a:	6812      	ldr	r2, [r2, #0]
 800cd0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	3318      	adds	r3, #24
 800cd12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd14:	6812      	ldr	r2, [r2, #0]
 800cd16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	701a      	strb	r2, [r3, #0]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f042 0201 	orr.w	r2, r2, #1
 800cd24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f042 0208 	orr.w	r2, r2, #8
 800cd2e:	709a      	strb	r2, [r3, #2]
 800cd30:	2200      	movs	r2, #0
 800cd32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2206      	movs	r2, #6
 800cd38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2204      	movs	r2, #4
 800cd3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cd40:	f640 0306 	movw	r3, #2054	; 0x806
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	69b9      	ldr	r1, [r7, #24]
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f001 fb75 	bl	800e43c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cd52:	69b8      	ldr	r0, [r7, #24]
 800cd54:	f7f8 fa6e 	bl	8005234 <pbuf_free>
  p = NULL;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cd5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	08011ccc 	.word	0x08011ccc
 800cd6c:	08011e1c 	.word	0x08011e1c
 800cd70:	08011d44 	.word	0x08011d44
 800cd74:	08011ecc 	.word	0x08011ecc
 800cd78:	08011f00 	.word	0x08011f00

0800cd7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af04      	add	r7, sp, #16
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cd98:	2201      	movs	r2, #1
 800cd9a:	9203      	str	r2, [sp, #12]
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	9202      	str	r2, [sp, #8]
 800cda0:	4a06      	ldr	r2, [pc, #24]	; (800cdbc <etharp_request_dst+0x40>)
 800cda2:	9201      	str	r2, [sp, #4]
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	4603      	mov	r3, r0
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff ff5a 	bl	800cc64 <etharp_raw>
 800cdb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	0801247c 	.word	0x0801247c

0800cdc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cdca:	4a05      	ldr	r2, [pc, #20]	; (800cde0 <etharp_request+0x20>)
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff ffd4 	bl	800cd7c <etharp_request_dst>
 800cdd4:	4603      	mov	r3, r0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	08012474 	.word	0x08012474

0800cde4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08e      	sub	sp, #56	; 0x38
 800cde8:	af04      	add	r7, sp, #16
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cdee:	4b79      	ldr	r3, [pc, #484]	; (800cfd4 <icmp_input+0x1f0>)
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	f003 030f 	and.w	r3, r3, #15
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ce04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce06:	2b13      	cmp	r3, #19
 800ce08:	f240 80cd 	bls.w	800cfa6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	895b      	ldrh	r3, [r3, #10]
 800ce10:	2b03      	cmp	r3, #3
 800ce12:	f240 80ca 	bls.w	800cfaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ce20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 80b7 	beq.w	800cf98 <icmp_input+0x1b4>
 800ce2a:	2b08      	cmp	r3, #8
 800ce2c:	f040 80b7 	bne.w	800cf9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ce30:	4b69      	ldr	r3, [pc, #420]	; (800cfd8 <icmp_input+0x1f4>)
 800ce32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ce34:	4b67      	ldr	r3, [pc, #412]	; (800cfd4 <icmp_input+0x1f0>)
 800ce36:	695b      	ldr	r3, [r3, #20]
 800ce38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce3c:	2be0      	cmp	r3, #224	; 0xe0
 800ce3e:	f000 80bb 	beq.w	800cfb8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ce42:	4b64      	ldr	r3, [pc, #400]	; (800cfd4 <icmp_input+0x1f0>)
 800ce44:	695b      	ldr	r3, [r3, #20]
 800ce46:	4a63      	ldr	r2, [pc, #396]	; (800cfd4 <icmp_input+0x1f0>)
 800ce48:	6812      	ldr	r2, [r2, #0]
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fbed 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f040 80b1 	bne.w	800cfbc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	891b      	ldrh	r3, [r3, #8]
 800ce5e:	2b07      	cmp	r3, #7
 800ce60:	f240 80a5 	bls.w	800cfae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ce64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce66:	330e      	adds	r3, #14
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7f8 f94c 	bl	8005108 <pbuf_add_header>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d04b      	beq.n	800cf0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	891a      	ldrh	r2, [r3, #8]
 800ce7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce7c:	4413      	add	r3, r2
 800ce7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	891b      	ldrh	r3, [r3, #8]
 800ce84:	8b7a      	ldrh	r2, [r7, #26]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	f0c0 809a 	bcc.w	800cfc0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ce8c:	8b7b      	ldrh	r3, [r7, #26]
 800ce8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce92:	4619      	mov	r1, r3
 800ce94:	200e      	movs	r0, #14
 800ce96:	f7f7 feeb 	bl	8004c70 <pbuf_alloc>
 800ce9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 8090 	beq.w	800cfc4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	895b      	ldrh	r3, [r3, #10]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceac:	3308      	adds	r3, #8
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d203      	bcs.n	800ceba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ceb2:	6978      	ldr	r0, [r7, #20]
 800ceb4:	f7f8 f9be 	bl	8005234 <pbuf_free>
          goto icmperr;
 800ceb8:	e085      	b.n	800cfc6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 fb34 	bl	800e530 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceca:	4619      	mov	r1, r3
 800cecc:	6978      	ldr	r0, [r7, #20]
 800cece:	f7f8 f92b 	bl	8005128 <pbuf_remove_header>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ced8:	4b40      	ldr	r3, [pc, #256]	; (800cfdc <icmp_input+0x1f8>)
 800ceda:	22b6      	movs	r2, #182	; 0xb6
 800cedc:	4940      	ldr	r1, [pc, #256]	; (800cfe0 <icmp_input+0x1fc>)
 800cede:	4841      	ldr	r0, [pc, #260]	; (800cfe4 <icmp_input+0x200>)
 800cee0:	f001 fb56 	bl	800e590 <iprintf>
          pbuf_free(r);
 800cee4:	6978      	ldr	r0, [r7, #20]
 800cee6:	f7f8 f9a5 	bl	8005234 <pbuf_free>
          goto icmperr;
 800ceea:	e06c      	b.n	800cfc6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ceec:	6879      	ldr	r1, [r7, #4]
 800ceee:	6978      	ldr	r0, [r7, #20]
 800cef0:	f7f8 fac8 	bl	8005484 <pbuf_copy>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d003      	beq.n	800cf02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cefa:	6978      	ldr	r0, [r7, #20]
 800cefc:	f7f8 f99a 	bl	8005234 <pbuf_free>
          goto icmperr;
 800cf00:	e061      	b.n	800cfc6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7f8 f996 	bl	8005234 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	607b      	str	r3, [r7, #4]
 800cf0c:	e00f      	b.n	800cf2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cf0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf10:	330e      	adds	r3, #14
 800cf12:	4619      	mov	r1, r3
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7f8 f907 	bl	8005128 <pbuf_remove_header>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d006      	beq.n	800cf2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cf20:	4b2e      	ldr	r3, [pc, #184]	; (800cfdc <icmp_input+0x1f8>)
 800cf22:	22c7      	movs	r2, #199	; 0xc7
 800cf24:	4930      	ldr	r1, [pc, #192]	; (800cfe8 <icmp_input+0x204>)
 800cf26:	482f      	ldr	r0, [pc, #188]	; (800cfe4 <icmp_input+0x200>)
 800cf28:	f001 fb32 	bl	800e590 <iprintf>
          goto icmperr;
 800cf2c:	e04b      	b.n	800cfc6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cf34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7f8 f8e5 	bl	8005108 <pbuf_add_header>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d12b      	bne.n	800cf9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cf52:	4b20      	ldr	r3, [pc, #128]	; (800cfd4 <icmp_input+0x1f0>)
 800cf54:	691a      	ldr	r2, [r3, #16]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	2200      	movs	r2, #0
 800cf64:	709a      	strb	r2, [r3, #2]
 800cf66:	2200      	movs	r2, #0
 800cf68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	22ff      	movs	r2, #255	; 0xff
 800cf6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	729a      	strb	r2, [r3, #10]
 800cf76:	2200      	movs	r2, #0
 800cf78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	2301      	movs	r3, #1
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	2300      	movs	r3, #0
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	23ff      	movs	r3, #255	; 0xff
 800cf88:	2200      	movs	r2, #0
 800cf8a:	69f9      	ldr	r1, [r7, #28]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fa75 	bl	800d47c <ip4_output_if>
 800cf92:	4603      	mov	r3, r0
 800cf94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cf96:	e001      	b.n	800cf9c <icmp_input+0x1b8>
      break;
 800cf98:	bf00      	nop
 800cf9a:	e000      	b.n	800cf9e <icmp_input+0x1ba>
      break;
 800cf9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7f8 f948 	bl	8005234 <pbuf_free>
  return;
 800cfa4:	e013      	b.n	800cfce <icmp_input+0x1ea>
    goto lenerr;
 800cfa6:	bf00      	nop
 800cfa8:	e002      	b.n	800cfb0 <icmp_input+0x1cc>
    goto lenerr;
 800cfaa:	bf00      	nop
 800cfac:	e000      	b.n	800cfb0 <icmp_input+0x1cc>
        goto lenerr;
 800cfae:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7f8 f93f 	bl	8005234 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cfb6:	e00a      	b.n	800cfce <icmp_input+0x1ea>
        goto icmperr;
 800cfb8:	bf00      	nop
 800cfba:	e004      	b.n	800cfc6 <icmp_input+0x1e2>
        goto icmperr;
 800cfbc:	bf00      	nop
 800cfbe:	e002      	b.n	800cfc6 <icmp_input+0x1e2>
          goto icmperr;
 800cfc0:	bf00      	nop
 800cfc2:	e000      	b.n	800cfc6 <icmp_input+0x1e2>
          goto icmperr;
 800cfc4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7f8 f934 	bl	8005234 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cfcc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cfce:	3728      	adds	r7, #40	; 0x28
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	200032d0 	.word	0x200032d0
 800cfd8:	200032e4 	.word	0x200032e4
 800cfdc:	08011f44 	.word	0x08011f44
 800cfe0:	08011f7c 	.word	0x08011f7c
 800cfe4:	08011fb4 	.word	0x08011fb4
 800cfe8:	08011fdc 	.word	0x08011fdc

0800cfec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cff8:	78fb      	ldrb	r3, [r7, #3]
 800cffa:	461a      	mov	r2, r3
 800cffc:	2103      	movs	r1, #3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f814 	bl	800d02c <icmp_send_response>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	461a      	mov	r2, r3
 800d01c:	210b      	movs	r1, #11
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f804 	bl	800d02c <icmp_send_response>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b08c      	sub	sp, #48	; 0x30
 800d030:	af04      	add	r7, sp, #16
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
 800d038:	4613      	mov	r3, r2
 800d03a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d03c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d040:	2124      	movs	r1, #36	; 0x24
 800d042:	2022      	movs	r0, #34	; 0x22
 800d044:	f7f7 fe14 	bl	8004c70 <pbuf_alloc>
 800d048:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d04c      	beq.n	800d0ea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	895b      	ldrh	r3, [r3, #10]
 800d054:	2b23      	cmp	r3, #35	; 0x23
 800d056:	d806      	bhi.n	800d066 <icmp_send_response+0x3a>
 800d058:	4b26      	ldr	r3, [pc, #152]	; (800d0f4 <icmp_send_response+0xc8>)
 800d05a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d05e:	4926      	ldr	r1, [pc, #152]	; (800d0f8 <icmp_send_response+0xcc>)
 800d060:	4826      	ldr	r0, [pc, #152]	; (800d0fc <icmp_send_response+0xd0>)
 800d062:	f001 fa95 	bl	800e590 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	78fa      	ldrb	r2, [r7, #3]
 800d076:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	78ba      	ldrb	r2, [r7, #2]
 800d07c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2200      	movs	r2, #0
 800d082:	711a      	strb	r2, [r3, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2200      	movs	r2, #0
 800d08c:	719a      	strb	r2, [r3, #6]
 800d08e:	2200      	movs	r2, #0
 800d090:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	f103 0008 	add.w	r0, r3, #8
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	221c      	movs	r2, #28
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	f001 fa45 	bl	800e530 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d0ac:	f107 030c 	add.w	r3, r7, #12
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 f825 	bl	800d100 <ip4_route>
 800d0b6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d011      	beq.n	800d0e2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	709a      	strb	r2, [r3, #2]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d0c8:	f107 020c 	add.w	r2, r7, #12
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	9302      	str	r3, [sp, #8]
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	9301      	str	r3, [sp, #4]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	23ff      	movs	r3, #255	; 0xff
 800d0da:	2100      	movs	r1, #0
 800d0dc:	69f8      	ldr	r0, [r7, #28]
 800d0de:	f000 f9cd 	bl	800d47c <ip4_output_if>
  }
  pbuf_free(q);
 800d0e2:	69f8      	ldr	r0, [r7, #28]
 800d0e4:	f7f8 f8a6 	bl	8005234 <pbuf_free>
 800d0e8:	e000      	b.n	800d0ec <icmp_send_response+0xc0>
    return;
 800d0ea:	bf00      	nop
}
 800d0ec:	3720      	adds	r7, #32
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	08011f44 	.word	0x08011f44
 800d0f8:	08012010 	.word	0x08012010
 800d0fc:	08011fb4 	.word	0x08011fb4

0800d100 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d108:	4b33      	ldr	r3, [pc, #204]	; (800d1d8 <ip4_route+0xd8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	e036      	b.n	800d17e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d02b      	beq.n	800d178 <ip4_route+0x78>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d126:	089b      	lsrs	r3, r3, #2
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d022      	beq.n	800d178 <ip4_route+0x78>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3304      	adds	r3, #4
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d01d      	beq.n	800d178 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	3304      	adds	r3, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	405a      	eors	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	3308      	adds	r3, #8
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4013      	ands	r3, r2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d101      	bne.n	800d158 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	e038      	b.n	800d1ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b00      	cmp	r3, #0
 800d164:	d108      	bne.n	800d178 <ip4_route+0x78>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	330c      	adds	r3, #12
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d101      	bne.n	800d178 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	e028      	b.n	800d1ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1c5      	bne.n	800d110 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d184:	4b15      	ldr	r3, [pc, #84]	; (800d1dc <ip4_route+0xdc>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01a      	beq.n	800d1c2 <ip4_route+0xc2>
 800d18c:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <ip4_route+0xdc>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d012      	beq.n	800d1c2 <ip4_route+0xc2>
 800d19c:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <ip4_route+0xdc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00a      	beq.n	800d1c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d1ac:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <ip4_route+0xdc>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d004      	beq.n	800d1c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b7f      	cmp	r3, #127	; 0x7f
 800d1c0:	d101      	bne.n	800d1c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e001      	b.n	800d1ca <ip4_route+0xca>
  }

  return netif_default;
 800d1c6:	4b05      	ldr	r3, [pc, #20]	; (800d1dc <ip4_route+0xdc>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	20024cf4 	.word	0x20024cf4
 800d1dc:	20024cf8 	.word	0x20024cf8

0800d1e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d016      	beq.n	800d226 <ip4_input_accept+0x46>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d011      	beq.n	800d226 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d202:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <ip4_input_accept+0x50>)
 800d204:	695a      	ldr	r2, [r3, #20]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3304      	adds	r3, #4
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d008      	beq.n	800d222 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <ip4_input_accept+0x50>)
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 fa08 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800d21c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	200032d0 	.word	0x200032d0

0800d234 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	091b      	lsrs	r3, r3, #4
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b04      	cmp	r3, #4
 800d24e:	d004      	beq.n	800d25a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7f7 ffef 	bl	8005234 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	e107      	b.n	800d46a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	f003 030f 	and.w	r3, r3, #15
 800d262:	b2db      	uxtb	r3, r3
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	b2db      	uxtb	r3, r3
 800d268:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	885b      	ldrh	r3, [r3, #2]
 800d26e:	b29b      	uxth	r3, r3
 800d270:	4618      	mov	r0, r3
 800d272:	f7f6 fd45 	bl	8003d00 <lwip_htons>
 800d276:	4603      	mov	r3, r0
 800d278:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	89ba      	ldrh	r2, [r7, #12]
 800d280:	429a      	cmp	r2, r3
 800d282:	d204      	bcs.n	800d28e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d284:	89bb      	ldrh	r3, [r7, #12]
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7f7 fe4f 	bl	8004f2c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	895b      	ldrh	r3, [r3, #10]
 800d292:	89fa      	ldrh	r2, [r7, #14]
 800d294:	429a      	cmp	r2, r3
 800d296:	d807      	bhi.n	800d2a8 <ip4_input+0x74>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	891b      	ldrh	r3, [r3, #8]
 800d29c:	89ba      	ldrh	r2, [r7, #12]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d802      	bhi.n	800d2a8 <ip4_input+0x74>
 800d2a2:	89fb      	ldrh	r3, [r7, #14]
 800d2a4:	2b13      	cmp	r3, #19
 800d2a6:	d804      	bhi.n	800d2b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7f7 ffc3 	bl	8005234 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e0db      	b.n	800d46a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	691b      	ldr	r3, [r3, #16]
 800d2b6:	4a6f      	ldr	r2, [pc, #444]	; (800d474 <ip4_input+0x240>)
 800d2b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	4a6d      	ldr	r2, [pc, #436]	; (800d474 <ip4_input+0x240>)
 800d2c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d2c2:	4b6c      	ldr	r3, [pc, #432]	; (800d474 <ip4_input+0x240>)
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2ca:	2be0      	cmp	r3, #224	; 0xe0
 800d2cc:	d112      	bne.n	800d2f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2d4:	f003 0301 	and.w	r3, r3, #1
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d007      	beq.n	800d2ee <ip4_input+0xba>
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <ip4_input+0xba>
      netif = inp;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	613b      	str	r3, [r7, #16]
 800d2ec:	e02a      	b.n	800d344 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	613b      	str	r3, [r7, #16]
 800d2f2:	e027      	b.n	800d344 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d2f4:	6838      	ldr	r0, [r7, #0]
 800d2f6:	f7ff ff73 	bl	800d1e0 <ip4_input_accept>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <ip4_input+0xd2>
      netif = inp;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	613b      	str	r3, [r7, #16]
 800d304:	e01e      	b.n	800d344 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d306:	2300      	movs	r3, #0
 800d308:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d30a:	4b5a      	ldr	r3, [pc, #360]	; (800d474 <ip4_input+0x240>)
 800d30c:	695b      	ldr	r3, [r3, #20]
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b7f      	cmp	r3, #127	; 0x7f
 800d312:	d017      	beq.n	800d344 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d314:	4b58      	ldr	r3, [pc, #352]	; (800d478 <ip4_input+0x244>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	e00e      	b.n	800d33a <ip4_input+0x106>
          if (netif == inp) {
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d006      	beq.n	800d332 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d324:	6938      	ldr	r0, [r7, #16]
 800d326:	f7ff ff5b 	bl	800d1e0 <ip4_input_accept>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d108      	bne.n	800d342 <ip4_input+0x10e>
 800d330:	e000      	b.n	800d334 <ip4_input+0x100>
            continue;
 800d332:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	613b      	str	r3, [r7, #16]
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1ed      	bne.n	800d31c <ip4_input+0xe8>
 800d340:	e000      	b.n	800d344 <ip4_input+0x110>
            break;
 800d342:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d344:	4b4b      	ldr	r3, [pc, #300]	; (800d474 <ip4_input+0x240>)
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 f96e 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d105      	bne.n	800d362 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d356:	4b47      	ldr	r3, [pc, #284]	; (800d474 <ip4_input+0x240>)
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d35e:	2be0      	cmp	r3, #224	; 0xe0
 800d360:	d104      	bne.n	800d36c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7f7 ff66 	bl	8005234 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	e07e      	b.n	800d46a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d104      	bne.n	800d37c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7f7 ff5e 	bl	8005234 <pbuf_free>
    return ERR_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	e076      	b.n	800d46a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	88db      	ldrh	r3, [r3, #6]
 800d380:	b29b      	uxth	r3, r3
 800d382:	461a      	mov	r2, r3
 800d384:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d388:	4013      	ands	r3, r2
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00b      	beq.n	800d3a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 fc92 	bl	800dcb8 <ip4_reass>
 800d394:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <ip4_input+0x16c>
      return ERR_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	e064      	b.n	800d46a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d3a6:	4a33      	ldr	r2, [pc, #204]	; (800d474 <ip4_input+0x240>)
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d3ac:	4a31      	ldr	r2, [pc, #196]	; (800d474 <ip4_input+0x240>)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d3b2:	4a30      	ldr	r2, [pc, #192]	; (800d474 <ip4_input+0x240>)
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	f003 030f 	and.w	r3, r3, #15
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	4b2a      	ldr	r3, [pc, #168]	; (800d474 <ip4_input+0x240>)
 800d3ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7f7 fea9 	bl	8005128 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	7a5b      	ldrb	r3, [r3, #9]
 800d3da:	2b11      	cmp	r3, #17
 800d3dc:	d006      	beq.n	800d3ec <ip4_input+0x1b8>
 800d3de:	2b11      	cmp	r3, #17
 800d3e0:	dc13      	bgt.n	800d40a <ip4_input+0x1d6>
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d00c      	beq.n	800d400 <ip4_input+0x1cc>
 800d3e6:	2b06      	cmp	r3, #6
 800d3e8:	d005      	beq.n	800d3f6 <ip4_input+0x1c2>
 800d3ea:	e00e      	b.n	800d40a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d3ec:	6839      	ldr	r1, [r7, #0]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7fe fc68 	bl	800bcc4 <udp_input>
        break;
 800d3f4:	e026      	b.n	800d444 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d3f6:	6839      	ldr	r1, [r7, #0]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7fa f887 	bl	800750c <tcp_input>
        break;
 800d3fe:	e021      	b.n	800d444 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff fcee 	bl	800cde4 <icmp_input>
        break;
 800d408:	e01c      	b.n	800d444 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d40a:	4b1a      	ldr	r3, [pc, #104]	; (800d474 <ip4_input+0x240>)
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	6939      	ldr	r1, [r7, #16]
 800d410:	4618      	mov	r0, r3
 800d412:	f000 f90b 	bl	800d62c <ip4_addr_isbroadcast_u32>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10f      	bne.n	800d43c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d41c:	4b15      	ldr	r3, [pc, #84]	; (800d474 <ip4_input+0x240>)
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d424:	2be0      	cmp	r3, #224	; 0xe0
 800d426:	d009      	beq.n	800d43c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d428:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d42c:	4619      	mov	r1, r3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7f7 feed 	bl	800520e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d434:	2102      	movs	r1, #2
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff fdd8 	bl	800cfec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7f7 fef9 	bl	8005234 <pbuf_free>
        break;
 800d442:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d444:	4b0b      	ldr	r3, [pc, #44]	; (800d474 <ip4_input+0x240>)
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d44a:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <ip4_input+0x240>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d450:	4b08      	ldr	r3, [pc, #32]	; (800d474 <ip4_input+0x240>)
 800d452:	2200      	movs	r2, #0
 800d454:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d456:	4b07      	ldr	r3, [pc, #28]	; (800d474 <ip4_input+0x240>)
 800d458:	2200      	movs	r2, #0
 800d45a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d45c:	4b05      	ldr	r3, [pc, #20]	; (800d474 <ip4_input+0x240>)
 800d45e:	2200      	movs	r2, #0
 800d460:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d462:	4b04      	ldr	r3, [pc, #16]	; (800d474 <ip4_input+0x240>)
 800d464:	2200      	movs	r2, #0
 800d466:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	200032d0 	.word	0x200032d0
 800d478:	20024cf4 	.word	0x20024cf4

0800d47c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08a      	sub	sp, #40	; 0x28
 800d480:	af04      	add	r7, sp, #16
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d009      	beq.n	800d4a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <ip4_output_if+0x26>
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d102      	bne.n	800d4a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d4a8:	78fa      	ldrb	r2, [r7, #3]
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	9302      	str	r3, [sp, #8]
 800d4ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d4b2:	9301      	str	r3, [sp, #4]
 800d4b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	6979      	ldr	r1, [r7, #20]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 f805 	bl	800d4d0 <ip4_output_if_src>
 800d4c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	89db      	ldrh	r3, [r3, #14]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d006      	beq.n	800d4f4 <ip4_output_if_src+0x24>
 800d4e6:	4b4b      	ldr	r3, [pc, #300]	; (800d614 <ip4_output_if_src+0x144>)
 800d4e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d4ec:	494a      	ldr	r1, [pc, #296]	; (800d618 <ip4_output_if_src+0x148>)
 800d4ee:	484b      	ldr	r0, [pc, #300]	; (800d61c <ip4_output_if_src+0x14c>)
 800d4f0:	f001 f84e 	bl	800e590 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d060      	beq.n	800d5bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d4fa:	2314      	movs	r3, #20
 800d4fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d4fe:	2114      	movs	r1, #20
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f7f7 fe01 	bl	8005108 <pbuf_add_header>
 800d506:	4603      	mov	r3, r0
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d50c:	f06f 0301 	mvn.w	r3, #1
 800d510:	e07c      	b.n	800d60c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	895b      	ldrh	r3, [r3, #10]
 800d51c:	2b13      	cmp	r3, #19
 800d51e:	d806      	bhi.n	800d52e <ip4_output_if_src+0x5e>
 800d520:	4b3c      	ldr	r3, [pc, #240]	; (800d614 <ip4_output_if_src+0x144>)
 800d522:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d526:	493e      	ldr	r1, [pc, #248]	; (800d620 <ip4_output_if_src+0x150>)
 800d528:	483c      	ldr	r0, [pc, #240]	; (800d61c <ip4_output_if_src+0x14c>)
 800d52a:	f001 f831 	bl	800e590 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	78fa      	ldrb	r2, [r7, #3]
 800d532:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d53a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d544:	8b7b      	ldrh	r3, [r7, #26]
 800d546:	089b      	lsrs	r3, r3, #2
 800d548:	b29b      	uxth	r3, r3
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d550:	b2da      	uxtb	r2, r3
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d55c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	891b      	ldrh	r3, [r3, #8]
 800d562:	4618      	mov	r0, r3
 800d564:	f7f6 fbcc 	bl	8003d00 <lwip_htons>
 800d568:	4603      	mov	r3, r0
 800d56a:	461a      	mov	r2, r3
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	2200      	movs	r2, #0
 800d574:	719a      	strb	r2, [r3, #6]
 800d576:	2200      	movs	r2, #0
 800d578:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d57a:	4b2a      	ldr	r3, [pc, #168]	; (800d624 <ip4_output_if_src+0x154>)
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f6 fbbe 	bl	8003d00 <lwip_htons>
 800d584:	4603      	mov	r3, r0
 800d586:	461a      	mov	r2, r3
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d58c:	4b25      	ldr	r3, [pc, #148]	; (800d624 <ip4_output_if_src+0x154>)
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	3301      	adds	r3, #1
 800d592:	b29a      	uxth	r2, r3
 800d594:	4b23      	ldr	r3, [pc, #140]	; (800d624 <ip4_output_if_src+0x154>)
 800d596:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d104      	bne.n	800d5a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d59e:	4b22      	ldr	r3, [pc, #136]	; (800d628 <ip4_output_if_src+0x158>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	60da      	str	r2, [r3, #12]
 800d5a6:	e003      	b.n	800d5b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	729a      	strb	r2, [r3, #10]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	72da      	strb	r2, [r3, #11]
 800d5ba:	e00f      	b.n	800d5dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	2b13      	cmp	r3, #19
 800d5c2:	d802      	bhi.n	800d5ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d5c4:	f06f 0301 	mvn.w	r3, #1
 800d5c8:	e020      	b.n	800d60c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d5d6:	f107 0314 	add.w	r3, r7, #20
 800d5da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00c      	beq.n	800d5fe <ip4_output_if_src+0x12e>
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	891a      	ldrh	r2, [r3, #8]
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d906      	bls.n	800d5fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 fd4d 	bl	800e094 <ip4_frag>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	e006      	b.n	800d60c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	68f9      	ldr	r1, [r7, #12]
 800d606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d608:	4798      	blx	r3
 800d60a:	4603      	mov	r3, r0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	0801203c 	.word	0x0801203c
 800d618:	08012070 	.word	0x08012070
 800d61c:	0801207c 	.word	0x0801207c
 800d620:	080120a4 	.word	0x080120a4
 800d624:	20000186 	.word	0x20000186
 800d628:	08012470 	.word	0x08012470

0800d62c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d640:	d002      	beq.n	800d648 <ip4_addr_isbroadcast_u32+0x1c>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d648:	2301      	movs	r3, #1
 800d64a:	e02a      	b.n	800d6a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d652:	f003 0302 	and.w	r3, r3, #2
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	e021      	b.n	800d6a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	3304      	adds	r3, #4
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	429a      	cmp	r2, r3
 800d668:	d101      	bne.n	800d66e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	e019      	b.n	800d6a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	3304      	adds	r3, #4
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	405a      	eors	r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	3308      	adds	r3, #8
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4013      	ands	r3, r2
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10d      	bne.n	800d6a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	3308      	adds	r3, #8
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	43da      	mvns	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	3308      	adds	r3, #8
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d698:	429a      	cmp	r2, r3
 800d69a:	d101      	bne.n	800d6a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e000      	b.n	800d6a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d6a0:	2300      	movs	r3, #0
  }
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
	...

0800d6b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d6ba:	4b12      	ldr	r3, [pc, #72]	; (800d704 <ip_reass_tmr+0x54>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d6c0:	e018      	b.n	800d6f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	7fdb      	ldrb	r3, [r3, #31]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00b      	beq.n	800d6e2 <ip_reass_tmr+0x32>
      r->timer--;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	7fdb      	ldrb	r3, [r3, #31]
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	60fb      	str	r3, [r7, #12]
 800d6e0:	e008      	b.n	800d6f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d6ec:	68b9      	ldr	r1, [r7, #8]
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f80a 	bl	800d708 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1e3      	bne.n	800d6c2 <ip_reass_tmr+0x12>
    }
  }
}
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	20000188 	.word	0x20000188

0800d708 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d105      	bne.n	800d72a <ip_reass_free_complete_datagram+0x22>
 800d71e:	4b45      	ldr	r3, [pc, #276]	; (800d834 <ip_reass_free_complete_datagram+0x12c>)
 800d720:	22ab      	movs	r2, #171	; 0xab
 800d722:	4945      	ldr	r1, [pc, #276]	; (800d838 <ip_reass_free_complete_datagram+0x130>)
 800d724:	4845      	ldr	r0, [pc, #276]	; (800d83c <ip_reass_free_complete_datagram+0x134>)
 800d726:	f000 ff33 	bl	800e590 <iprintf>
  if (prev != NULL) {
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00a      	beq.n	800d746 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	429a      	cmp	r2, r3
 800d738:	d005      	beq.n	800d746 <ip_reass_free_complete_datagram+0x3e>
 800d73a:	4b3e      	ldr	r3, [pc, #248]	; (800d834 <ip_reass_free_complete_datagram+0x12c>)
 800d73c:	22ad      	movs	r2, #173	; 0xad
 800d73e:	4940      	ldr	r1, [pc, #256]	; (800d840 <ip_reass_free_complete_datagram+0x138>)
 800d740:	483e      	ldr	r0, [pc, #248]	; (800d83c <ip_reass_free_complete_datagram+0x134>)
 800d742:	f000 ff25 	bl	800e590 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	889b      	ldrh	r3, [r3, #4]
 800d752:	b29b      	uxth	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d12a      	bne.n	800d7ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	6858      	ldr	r0, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	3308      	adds	r3, #8
 800d76e:	2214      	movs	r2, #20
 800d770:	4619      	mov	r1, r3
 800d772:	f000 fedd 	bl	800e530 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d776:	2101      	movs	r1, #1
 800d778:	69b8      	ldr	r0, [r7, #24]
 800d77a:	f7ff fc47 	bl	800d00c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d77e:	69b8      	ldr	r0, [r7, #24]
 800d780:	f7f7 fde0 	bl	8005344 <pbuf_clen>
 800d784:	4603      	mov	r3, r0
 800d786:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d788:	8bfa      	ldrh	r2, [r7, #30]
 800d78a:	8a7b      	ldrh	r3, [r7, #18]
 800d78c:	4413      	add	r3, r2
 800d78e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d792:	db05      	blt.n	800d7a0 <ip_reass_free_complete_datagram+0x98>
 800d794:	4b27      	ldr	r3, [pc, #156]	; (800d834 <ip_reass_free_complete_datagram+0x12c>)
 800d796:	22bc      	movs	r2, #188	; 0xbc
 800d798:	492a      	ldr	r1, [pc, #168]	; (800d844 <ip_reass_free_complete_datagram+0x13c>)
 800d79a:	4828      	ldr	r0, [pc, #160]	; (800d83c <ip_reass_free_complete_datagram+0x134>)
 800d79c:	f000 fef8 	bl	800e590 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d7a0:	8bfa      	ldrh	r2, [r7, #30]
 800d7a2:	8a7b      	ldrh	r3, [r7, #18]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d7a8:	69b8      	ldr	r0, [r7, #24]
 800d7aa:	f7f7 fd43 	bl	8005234 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d7b4:	e01f      	b.n	800d7f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d7b6:	69bb      	ldr	r3, [r7, #24]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f7f7 fdbc 	bl	8005344 <pbuf_clen>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d7d0:	8bfa      	ldrh	r2, [r7, #30]
 800d7d2:	8a7b      	ldrh	r3, [r7, #18]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7da:	db05      	blt.n	800d7e8 <ip_reass_free_complete_datagram+0xe0>
 800d7dc:	4b15      	ldr	r3, [pc, #84]	; (800d834 <ip_reass_free_complete_datagram+0x12c>)
 800d7de:	22cc      	movs	r2, #204	; 0xcc
 800d7e0:	4918      	ldr	r1, [pc, #96]	; (800d844 <ip_reass_free_complete_datagram+0x13c>)
 800d7e2:	4816      	ldr	r0, [pc, #88]	; (800d83c <ip_reass_free_complete_datagram+0x134>)
 800d7e4:	f000 fed4 	bl	800e590 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d7e8:	8bfa      	ldrh	r2, [r7, #30]
 800d7ea:	8a7b      	ldrh	r3, [r7, #18]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7f7 fd1f 	bl	8005234 <pbuf_free>
  while (p != NULL) {
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1dc      	bne.n	800d7b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d7fc:	6839      	ldr	r1, [r7, #0]
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f8c2 	bl	800d988 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d804:	4b10      	ldr	r3, [pc, #64]	; (800d848 <ip_reass_free_complete_datagram+0x140>)
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	8bfa      	ldrh	r2, [r7, #30]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d905      	bls.n	800d81a <ip_reass_free_complete_datagram+0x112>
 800d80e:	4b09      	ldr	r3, [pc, #36]	; (800d834 <ip_reass_free_complete_datagram+0x12c>)
 800d810:	22d2      	movs	r2, #210	; 0xd2
 800d812:	490e      	ldr	r1, [pc, #56]	; (800d84c <ip_reass_free_complete_datagram+0x144>)
 800d814:	4809      	ldr	r0, [pc, #36]	; (800d83c <ip_reass_free_complete_datagram+0x134>)
 800d816:	f000 febb 	bl	800e590 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d81a:	4b0b      	ldr	r3, [pc, #44]	; (800d848 <ip_reass_free_complete_datagram+0x140>)
 800d81c:	881a      	ldrh	r2, [r3, #0]
 800d81e:	8bfb      	ldrh	r3, [r7, #30]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	b29a      	uxth	r2, r3
 800d824:	4b08      	ldr	r3, [pc, #32]	; (800d848 <ip_reass_free_complete_datagram+0x140>)
 800d826:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d828:	8bfb      	ldrh	r3, [r7, #30]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3720      	adds	r7, #32
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	080120d4 	.word	0x080120d4
 800d838:	08012110 	.word	0x08012110
 800d83c:	0801211c 	.word	0x0801211c
 800d840:	08012144 	.word	0x08012144
 800d844:	08012158 	.word	0x08012158
 800d848:	2000018c 	.word	0x2000018c
 800d84c:	08012178 	.word	0x08012178

0800d850 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08a      	sub	sp, #40	; 0x28
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d866:	2300      	movs	r3, #0
 800d868:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d86e:	4b28      	ldr	r3, [pc, #160]	; (800d910 <ip_reass_remove_oldest_datagram+0xc0>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d874:	e030      	b.n	800d8d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	695a      	ldr	r2, [r3, #20]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d10c      	bne.n	800d89c <ip_reass_remove_oldest_datagram+0x4c>
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	699a      	ldr	r2, [r3, #24]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d106      	bne.n	800d89c <ip_reass_remove_oldest_datagram+0x4c>
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	899a      	ldrh	r2, [r3, #12]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	889b      	ldrh	r3, [r3, #4]
 800d896:	b29b      	uxth	r3, r3
 800d898:	429a      	cmp	r2, r3
 800d89a:	d014      	beq.n	800d8c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	3301      	adds	r3, #1
 800d8a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d104      	bne.n	800d8b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	61bb      	str	r3, [r7, #24]
 800d8b0:	e009      	b.n	800d8c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	7fda      	ldrb	r2, [r3, #31]
 800d8b6:	6a3b      	ldr	r3, [r7, #32]
 800d8b8:	7fdb      	ldrb	r3, [r3, #31]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d803      	bhi.n	800d8c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1cb      	bne.n	800d876 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d008      	beq.n	800d8f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d8e4:	69b9      	ldr	r1, [r7, #24]
 800d8e6:	6a38      	ldr	r0, [r7, #32]
 800d8e8:	f7ff ff0e 	bl	800d708 <ip_reass_free_complete_datagram>
 800d8ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d8f6:	697a      	ldr	r2, [r7, #20]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	da02      	bge.n	800d904 <ip_reass_remove_oldest_datagram+0xb4>
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b01      	cmp	r3, #1
 800d902:	dcac      	bgt.n	800d85e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d904:	697b      	ldr	r3, [r7, #20]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3728      	adds	r7, #40	; 0x28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20000188 	.word	0x20000188

0800d914 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d91e:	2004      	movs	r0, #4
 800d920:	f7f6 fe2c 	bl	800457c <memp_malloc>
 800d924:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d110      	bne.n	800d94e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff ff8e 	bl	800d850 <ip_reass_remove_oldest_datagram>
 800d934:	4602      	mov	r2, r0
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	4293      	cmp	r3, r2
 800d93a:	dc03      	bgt.n	800d944 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d93c:	2004      	movs	r0, #4
 800d93e:	f7f6 fe1d 	bl	800457c <memp_malloc>
 800d942:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	e016      	b.n	800d97c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d94e:	2220      	movs	r2, #32
 800d950:	2100      	movs	r1, #0
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 fe14 	bl	800e580 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	220f      	movs	r2, #15
 800d95c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d95e:	4b09      	ldr	r3, [pc, #36]	; (800d984 <ip_reass_enqueue_new_datagram+0x70>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d966:	4a07      	ldr	r2, [pc, #28]	; (800d984 <ip_reass_enqueue_new_datagram+0x70>)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	3308      	adds	r3, #8
 800d970:	2214      	movs	r2, #20
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 fddb 	bl	800e530 <memcpy>
  return ipr;
 800d97a:	68fb      	ldr	r3, [r7, #12]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20000188 	.word	0x20000188

0800d988 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d992:	4b10      	ldr	r3, [pc, #64]	; (800d9d4 <ip_reass_dequeue_datagram+0x4c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d104      	bne.n	800d9a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a0c      	ldr	r2, [pc, #48]	; (800d9d4 <ip_reass_dequeue_datagram+0x4c>)
 800d9a2:	6013      	str	r3, [r2, #0]
 800d9a4:	e00d      	b.n	800d9c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d106      	bne.n	800d9ba <ip_reass_dequeue_datagram+0x32>
 800d9ac:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <ip_reass_dequeue_datagram+0x50>)
 800d9ae:	f240 1245 	movw	r2, #325	; 0x145
 800d9b2:	490a      	ldr	r1, [pc, #40]	; (800d9dc <ip_reass_dequeue_datagram+0x54>)
 800d9b4:	480a      	ldr	r0, [pc, #40]	; (800d9e0 <ip_reass_dequeue_datagram+0x58>)
 800d9b6:	f000 fdeb 	bl	800e590 <iprintf>
    prev->next = ipr->next;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d9c2:	6879      	ldr	r1, [r7, #4]
 800d9c4:	2004      	movs	r0, #4
 800d9c6:	f7f6 fe25 	bl	8004614 <memp_free>
}
 800d9ca:	bf00      	nop
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20000188 	.word	0x20000188
 800d9d8:	080120d4 	.word	0x080120d4
 800d9dc:	0801219c 	.word	0x0801219c
 800d9e0:	0801211c 	.word	0x0801211c

0800d9e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08c      	sub	sp, #48	; 0x30
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	885b      	ldrh	r3, [r3, #2]
 800da02:	b29b      	uxth	r3, r3
 800da04:	4618      	mov	r0, r3
 800da06:	f7f6 f97b 	bl	8003d00 <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	f003 030f 	and.w	r3, r3, #15
 800da16:	b2db      	uxtb	r3, r3
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800da1c:	7e7b      	ldrb	r3, [r7, #25]
 800da1e:	b29b      	uxth	r3, r3
 800da20:	8b7a      	ldrh	r2, [r7, #26]
 800da22:	429a      	cmp	r2, r3
 800da24:	d202      	bcs.n	800da2c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da26:	f04f 33ff 	mov.w	r3, #4294967295
 800da2a:	e135      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800da2c:	7e7b      	ldrb	r3, [r7, #25]
 800da2e:	b29b      	uxth	r3, r3
 800da30:	8b7a      	ldrh	r2, [r7, #26]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	88db      	ldrh	r3, [r3, #6]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7f6 f95f 	bl	8003d00 <lwip_htons>
 800da42:	4603      	mov	r3, r0
 800da44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da48:	b29b      	uxth	r3, r3
 800da4a:	00db      	lsls	r3, r3, #3
 800da4c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da56:	2200      	movs	r2, #0
 800da58:	701a      	strb	r2, [r3, #0]
 800da5a:	2200      	movs	r2, #0
 800da5c:	705a      	strb	r2, [r3, #1]
 800da5e:	2200      	movs	r2, #0
 800da60:	709a      	strb	r2, [r3, #2]
 800da62:	2200      	movs	r2, #0
 800da64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800da66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da68:	8afa      	ldrh	r2, [r7, #22]
 800da6a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800da6c:	8afa      	ldrh	r2, [r7, #22]
 800da6e:	8b7b      	ldrh	r3, [r7, #26]
 800da70:	4413      	add	r3, r2
 800da72:	b29a      	uxth	r2, r3
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	88db      	ldrh	r3, [r3, #6]
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	8afa      	ldrh	r2, [r7, #22]
 800da80:	429a      	cmp	r2, r3
 800da82:	d902      	bls.n	800da8a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da84:	f04f 33ff 	mov.w	r3, #4294967295
 800da88:	e106      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	627b      	str	r3, [r7, #36]	; 0x24
 800da90:	e068      	b.n	800db64 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9a:	889b      	ldrh	r3, [r3, #4]
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	889b      	ldrh	r3, [r3, #4]
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d235      	bcs.n	800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d020      	beq.n	800daf6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	889b      	ldrh	r3, [r3, #4]
 800dab8:	b29a      	uxth	r2, r3
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	88db      	ldrh	r3, [r3, #6]
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d307      	bcc.n	800dad4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	88db      	ldrh	r3, [r3, #6]
 800dac8:	b29a      	uxth	r2, r3
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	889b      	ldrh	r3, [r3, #4]
 800dace:	b29b      	uxth	r3, r3
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d902      	bls.n	800dada <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dad4:	f04f 33ff 	mov.w	r3, #4294967295
 800dad8:	e0de      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae2:	88db      	ldrh	r3, [r3, #6]
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	889b      	ldrh	r3, [r3, #4]
 800daea:	b29b      	uxth	r3, r3
 800daec:	429a      	cmp	r2, r3
 800daee:	d03d      	beq.n	800db6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800daf0:	2300      	movs	r3, #0
 800daf2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800daf4:	e03a      	b.n	800db6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800daf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf8:	88db      	ldrh	r3, [r3, #6]
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	889b      	ldrh	r3, [r3, #4]
 800db00:	b29b      	uxth	r3, r3
 800db02:	429a      	cmp	r2, r3
 800db04:	d902      	bls.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db06:	f04f 33ff 	mov.w	r3, #4294967295
 800db0a:	e0c5      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	605a      	str	r2, [r3, #4]
      break;
 800db12:	e02b      	b.n	800db6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	889b      	ldrh	r3, [r3, #4]
 800db18:	b29a      	uxth	r2, r3
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	889b      	ldrh	r3, [r3, #4]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	429a      	cmp	r2, r3
 800db22:	d102      	bne.n	800db2a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db24:	f04f 33ff 	mov.w	r3, #4294967295
 800db28:	e0b6      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	889b      	ldrh	r3, [r3, #4]
 800db2e:	b29a      	uxth	r2, r3
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	88db      	ldrh	r3, [r3, #6]
 800db34:	b29b      	uxth	r3, r3
 800db36:	429a      	cmp	r2, r3
 800db38:	d202      	bcs.n	800db40 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db3a:	f04f 33ff 	mov.w	r3, #4294967295
 800db3e:	e0ab      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800db40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db42:	2b00      	cmp	r3, #0
 800db44:	d009      	beq.n	800db5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	88db      	ldrh	r3, [r3, #6]
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	889b      	ldrh	r3, [r3, #4]
 800db50:	b29b      	uxth	r3, r3
 800db52:	429a      	cmp	r2, r3
 800db54:	d001      	beq.n	800db5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800db56:	2300      	movs	r3, #0
 800db58:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	2b00      	cmp	r3, #0
 800db68:	d193      	bne.n	800da92 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800db6a:	e000      	b.n	800db6e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800db6c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	2b00      	cmp	r3, #0
 800db72:	d12d      	bne.n	800dbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	2b00      	cmp	r3, #0
 800db78:	d01c      	beq.n	800dbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	88db      	ldrh	r3, [r3, #6]
 800db7e:	b29a      	uxth	r2, r3
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	889b      	ldrh	r3, [r3, #4]
 800db84:	b29b      	uxth	r3, r3
 800db86:	429a      	cmp	r2, r3
 800db88:	d906      	bls.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800db8a:	4b45      	ldr	r3, [pc, #276]	; (800dca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800db90:	4944      	ldr	r1, [pc, #272]	; (800dca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800db92:	4845      	ldr	r0, [pc, #276]	; (800dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db94:	f000 fcfc 	bl	800e590 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800db98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	88db      	ldrh	r3, [r3, #6]
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	889b      	ldrh	r3, [r3, #4]
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d010      	beq.n	800dbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	623b      	str	r3, [r7, #32]
 800dbb2:	e00d      	b.n	800dbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d006      	beq.n	800dbca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dbbc:	4b38      	ldr	r3, [pc, #224]	; (800dca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbbe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dbc2:	493a      	ldr	r1, [pc, #232]	; (800dcac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dbc4:	4838      	ldr	r0, [pc, #224]	; (800dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dbc6:	f000 fce3 	bl	800e590 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d105      	bne.n	800dbe2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	7f9b      	ldrb	r3, [r3, #30]
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d059      	beq.n	800dc96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dbe2:	6a3b      	ldr	r3, [r7, #32]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d04f      	beq.n	800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d006      	beq.n	800dbfe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	889b      	ldrh	r3, [r3, #4]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	623b      	str	r3, [r7, #32]
 800dc02:	e041      	b.n	800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc0e:	e012      	b.n	800dc36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	88db      	ldrh	r3, [r3, #6]
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	889b      	ldrh	r3, [r3, #4]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d002      	beq.n	800dc2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	623b      	str	r3, [r7, #32]
            break;
 800dc2a:	e007      	b.n	800dc3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1e9      	bne.n	800dc10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dc3c:	6a3b      	ldr	r3, [r7, #32]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d022      	beq.n	800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d106      	bne.n	800dc58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dc4a:	4b15      	ldr	r3, [pc, #84]	; (800dca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc4c:	f240 12df 	movw	r2, #479	; 0x1df
 800dc50:	4917      	ldr	r1, [pc, #92]	; (800dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dc52:	4815      	ldr	r0, [pc, #84]	; (800dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc54:	f000 fc9c 	bl	800e590 <iprintf>
          LWIP_ASSERT("sanity check",
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d106      	bne.n	800dc72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dc64:	4b0e      	ldr	r3, [pc, #56]	; (800dca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dc6a:	4911      	ldr	r1, [pc, #68]	; (800dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dc6c:	480e      	ldr	r0, [pc, #56]	; (800dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc6e:	f000 fc8f 	bl	800e590 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc7c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800dc80:	490c      	ldr	r1, [pc, #48]	; (800dcb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dc82:	4809      	ldr	r0, [pc, #36]	; (800dca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc84:	f000 fc84 	bl	800e590 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	bf14      	ite	ne
 800dc8e:	2301      	movne	r3, #1
 800dc90:	2300      	moveq	r3, #0
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	e000      	b.n	800dc98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3730      	adds	r7, #48	; 0x30
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	080120d4 	.word	0x080120d4
 800dca4:	080121b8 	.word	0x080121b8
 800dca8:	0801211c 	.word	0x0801211c
 800dcac:	080121d8 	.word	0x080121d8
 800dcb0:	08012210 	.word	0x08012210
 800dcb4:	08012220 	.word	0x08012220

0800dcb8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b08e      	sub	sp, #56	; 0x38
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	f003 030f 	and.w	r3, r3, #15
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b14      	cmp	r3, #20
 800dcd6:	f040 8167 	bne.w	800dfa8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	88db      	ldrh	r3, [r3, #6]
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7f6 f80d 	bl	8003d00 <lwip_htons>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf4:	885b      	ldrh	r3, [r3, #2]
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7f6 f801 	bl	8003d00 <lwip_htons>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	f003 030f 	and.w	r3, r3, #15
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dd12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd1a:	429a      	cmp	r2, r3
 800dd1c:	f0c0 8146 	bcc.w	800dfac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dd20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f7f7 fb09 	bl	8005344 <pbuf_clen>
 800dd32:	4603      	mov	r3, r0
 800dd34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dd36:	4b9f      	ldr	r3, [pc, #636]	; (800dfb4 <ip4_reass+0x2fc>)
 800dd38:	881b      	ldrh	r3, [r3, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	8c3b      	ldrh	r3, [r7, #32]
 800dd3e:	4413      	add	r3, r2
 800dd40:	2b0a      	cmp	r3, #10
 800dd42:	dd10      	ble.n	800dd66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dd44:	8c3b      	ldrh	r3, [r7, #32]
 800dd46:	4619      	mov	r1, r3
 800dd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd4a:	f7ff fd81 	bl	800d850 <ip_reass_remove_oldest_datagram>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 812d 	beq.w	800dfb0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dd56:	4b97      	ldr	r3, [pc, #604]	; (800dfb4 <ip4_reass+0x2fc>)
 800dd58:	881b      	ldrh	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	8c3b      	ldrh	r3, [r7, #32]
 800dd5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dd60:	2b0a      	cmp	r3, #10
 800dd62:	f300 8125 	bgt.w	800dfb0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dd66:	4b94      	ldr	r3, [pc, #592]	; (800dfb8 <ip4_reass+0x300>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	633b      	str	r3, [r7, #48]	; 0x30
 800dd6c:	e015      	b.n	800dd9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	695a      	ldr	r2, [r3, #20]
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d10c      	bne.n	800dd94 <ip4_reass+0xdc>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	699a      	ldr	r2, [r3, #24]
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d106      	bne.n	800dd94 <ip4_reass+0xdc>
 800dd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd88:	899a      	ldrh	r2, [r3, #12]
 800dd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8c:	889b      	ldrh	r3, [r3, #4]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d006      	beq.n	800dda2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	633b      	str	r3, [r7, #48]	; 0x30
 800dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d1e6      	bne.n	800dd6e <ip4_reass+0xb6>
 800dda0:	e000      	b.n	800dda4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dda2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d109      	bne.n	800ddbe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ddaa:	8c3b      	ldrh	r3, [r7, #32]
 800ddac:	4619      	mov	r1, r3
 800ddae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb0:	f7ff fdb0 	bl	800d914 <ip_reass_enqueue_new_datagram>
 800ddb4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d11c      	bne.n	800ddf6 <ip4_reass+0x13e>
      goto nullreturn;
 800ddbc:	e109      	b.n	800dfd2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	88db      	ldrh	r3, [r3, #6]
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7f5 ff9b 	bl	8003d00 <lwip_htons>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d110      	bne.n	800ddf6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	89db      	ldrh	r3, [r3, #14]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7f5 ff91 	bl	8003d00 <lwip_htons>
 800ddde:	4603      	mov	r3, r0
 800dde0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	3308      	adds	r3, #8
 800ddec:	2214      	movs	r2, #20
 800ddee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 fb9d 	bl	800e530 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ddf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf8:	88db      	ldrh	r3, [r3, #6]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	f003 0320 	and.w	r3, r3, #32
 800de00:	2b00      	cmp	r3, #0
 800de02:	bf0c      	ite	eq
 800de04:	2301      	moveq	r3, #1
 800de06:	2300      	movne	r3, #0
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00e      	beq.n	800de30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800de12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de16:	4413      	add	r3, r2
 800de18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800de1a:	8b7a      	ldrh	r2, [r7, #26]
 800de1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de1e:	429a      	cmp	r2, r3
 800de20:	f0c0 80a0 	bcc.w	800df64 <ip4_reass+0x2ac>
 800de24:	8b7b      	ldrh	r3, [r7, #26]
 800de26:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800de2a:	4293      	cmp	r3, r2
 800de2c:	f200 809a 	bhi.w	800df64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de36:	f7ff fdd5 	bl	800d9e4 <ip_reass_chain_frag_into_datagram_and_validate>
 800de3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de42:	f000 8091 	beq.w	800df68 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800de46:	4b5b      	ldr	r3, [pc, #364]	; (800dfb4 <ip4_reass+0x2fc>)
 800de48:	881a      	ldrh	r2, [r3, #0]
 800de4a:	8c3b      	ldrh	r3, [r7, #32]
 800de4c:	4413      	add	r3, r2
 800de4e:	b29a      	uxth	r2, r3
 800de50:	4b58      	ldr	r3, [pc, #352]	; (800dfb4 <ip4_reass+0x2fc>)
 800de52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800de54:	69fb      	ldr	r3, [r7, #28]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00d      	beq.n	800de76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800de5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de5e:	4413      	add	r3, r2
 800de60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	8a7a      	ldrh	r2, [r7, #18]
 800de66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800de68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6a:	7f9b      	ldrb	r3, [r3, #30]
 800de6c:	f043 0301 	orr.w	r3, r3, #1
 800de70:	b2da      	uxtb	r2, r3
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d171      	bne.n	800df60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	8b9b      	ldrh	r3, [r3, #28]
 800de80:	3314      	adds	r3, #20
 800de82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800de96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de98:	3308      	adds	r3, #8
 800de9a:	2214      	movs	r2, #20
 800de9c:	4619      	mov	r1, r3
 800de9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea0:	f000 fb46 	bl	800e530 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dea4:	8a3b      	ldrh	r3, [r7, #16]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7f5 ff2a 	bl	8003d00 <lwip_htons>
 800deac:	4603      	mov	r3, r0
 800deae:	461a      	mov	r2, r3
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	2200      	movs	r2, #0
 800deb8:	719a      	strb	r2, [r3, #6]
 800deba:	2200      	movs	r2, #0
 800debc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	2200      	movs	r2, #0
 800dec2:	729a      	strb	r2, [r3, #10]
 800dec4:	2200      	movs	r2, #0
 800dec6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dece:	e00d      	b.n	800deec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ded0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ded6:	2114      	movs	r1, #20
 800ded8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800deda:	f7f7 f925 	bl	8005128 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dede:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f7f7 fa69 	bl	80053b8 <pbuf_cat>
      r = iprh->next_pbuf;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800deec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1ee      	bne.n	800ded0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800def2:	4b31      	ldr	r3, [pc, #196]	; (800dfb8 <ip4_reass+0x300>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def8:	429a      	cmp	r2, r3
 800defa:	d102      	bne.n	800df02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800defc:	2300      	movs	r3, #0
 800defe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df00:	e010      	b.n	800df24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df02:	4b2d      	ldr	r3, [pc, #180]	; (800dfb8 <ip4_reass+0x300>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df08:	e007      	b.n	800df1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800df0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df10:	429a      	cmp	r2, r3
 800df12:	d006      	beq.n	800df22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d1f4      	bne.n	800df0a <ip4_reass+0x252>
 800df20:	e000      	b.n	800df24 <ip4_reass+0x26c>
          break;
 800df22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800df24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df28:	f7ff fd2e 	bl	800d988 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7f7 fa09 	bl	8005344 <pbuf_clen>
 800df32:	4603      	mov	r3, r0
 800df34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800df36:	4b1f      	ldr	r3, [pc, #124]	; (800dfb4 <ip4_reass+0x2fc>)
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	8c3a      	ldrh	r2, [r7, #32]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d906      	bls.n	800df4e <ip4_reass+0x296>
 800df40:	4b1e      	ldr	r3, [pc, #120]	; (800dfbc <ip4_reass+0x304>)
 800df42:	f240 229b 	movw	r2, #667	; 0x29b
 800df46:	491e      	ldr	r1, [pc, #120]	; (800dfc0 <ip4_reass+0x308>)
 800df48:	481e      	ldr	r0, [pc, #120]	; (800dfc4 <ip4_reass+0x30c>)
 800df4a:	f000 fb21 	bl	800e590 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800df4e:	4b19      	ldr	r3, [pc, #100]	; (800dfb4 <ip4_reass+0x2fc>)
 800df50:	881a      	ldrh	r2, [r3, #0]
 800df52:	8c3b      	ldrh	r3, [r7, #32]
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	b29a      	uxth	r2, r3
 800df58:	4b16      	ldr	r3, [pc, #88]	; (800dfb4 <ip4_reass+0x2fc>)
 800df5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	e03c      	b.n	800dfda <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	e03a      	b.n	800dfda <ip4_reass+0x322>
      goto nullreturn_ipr;
 800df64:	bf00      	nop
 800df66:	e000      	b.n	800df6a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800df68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800df6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d106      	bne.n	800df7e <ip4_reass+0x2c6>
 800df70:	4b12      	ldr	r3, [pc, #72]	; (800dfbc <ip4_reass+0x304>)
 800df72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800df76:	4914      	ldr	r1, [pc, #80]	; (800dfc8 <ip4_reass+0x310>)
 800df78:	4812      	ldr	r0, [pc, #72]	; (800dfc4 <ip4_reass+0x30c>)
 800df7a:	f000 fb09 	bl	800e590 <iprintf>
  if (ipr->p == NULL) {
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d124      	bne.n	800dfd0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800df86:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <ip4_reass+0x300>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d006      	beq.n	800df9e <ip4_reass+0x2e6>
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <ip4_reass+0x304>)
 800df92:	f240 22ab 	movw	r2, #683	; 0x2ab
 800df96:	490d      	ldr	r1, [pc, #52]	; (800dfcc <ip4_reass+0x314>)
 800df98:	480a      	ldr	r0, [pc, #40]	; (800dfc4 <ip4_reass+0x30c>)
 800df9a:	f000 faf9 	bl	800e590 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800df9e:	2100      	movs	r1, #0
 800dfa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfa2:	f7ff fcf1 	bl	800d988 <ip_reass_dequeue_datagram>
 800dfa6:	e014      	b.n	800dfd2 <ip4_reass+0x31a>
    goto nullreturn;
 800dfa8:	bf00      	nop
 800dfaa:	e012      	b.n	800dfd2 <ip4_reass+0x31a>
    goto nullreturn;
 800dfac:	bf00      	nop
 800dfae:	e010      	b.n	800dfd2 <ip4_reass+0x31a>
      goto nullreturn;
 800dfb0:	bf00      	nop
 800dfb2:	e00e      	b.n	800dfd2 <ip4_reass+0x31a>
 800dfb4:	2000018c 	.word	0x2000018c
 800dfb8:	20000188 	.word	0x20000188
 800dfbc:	080120d4 	.word	0x080120d4
 800dfc0:	08012244 	.word	0x08012244
 800dfc4:	0801211c 	.word	0x0801211c
 800dfc8:	08012260 	.word	0x08012260
 800dfcc:	0801226c 	.word	0x0801226c
  }

nullreturn:
 800dfd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7f7 f92e 	bl	8005234 <pbuf_free>
  return NULL;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3738      	adds	r7, #56	; 0x38
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop

0800dfe4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dfe8:	2005      	movs	r0, #5
 800dfea:	f7f6 fac7 	bl	800457c <memp_malloc>
 800dfee:	4603      	mov	r3, r0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e002:	4b07      	ldr	r3, [pc, #28]	; (800e020 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e004:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e008:	4906      	ldr	r1, [pc, #24]	; (800e024 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e00a:	4807      	ldr	r0, [pc, #28]	; (800e028 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e00c:	f000 fac0 	bl	800e590 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e010:	6879      	ldr	r1, [r7, #4]
 800e012:	2005      	movs	r0, #5
 800e014:	f7f6 fafe 	bl	8004614 <memp_free>
}
 800e018:	bf00      	nop
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	080120d4 	.word	0x080120d4
 800e024:	0801228c 	.word	0x0801228c
 800e028:	0801211c 	.word	0x0801211c

0800e02c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <ipfrag_free_pbuf_custom+0x20>
 800e03e:	4b11      	ldr	r3, [pc, #68]	; (800e084 <ipfrag_free_pbuf_custom+0x58>)
 800e040:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e044:	4910      	ldr	r1, [pc, #64]	; (800e088 <ipfrag_free_pbuf_custom+0x5c>)
 800e046:	4811      	ldr	r0, [pc, #68]	; (800e08c <ipfrag_free_pbuf_custom+0x60>)
 800e048:	f000 faa2 	bl	800e590 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	429a      	cmp	r2, r3
 800e052:	d006      	beq.n	800e062 <ipfrag_free_pbuf_custom+0x36>
 800e054:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <ipfrag_free_pbuf_custom+0x58>)
 800e056:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e05a:	490d      	ldr	r1, [pc, #52]	; (800e090 <ipfrag_free_pbuf_custom+0x64>)
 800e05c:	480b      	ldr	r0, [pc, #44]	; (800e08c <ipfrag_free_pbuf_custom+0x60>)
 800e05e:	f000 fa97 	bl	800e590 <iprintf>
  if (pcr->original != NULL) {
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d004      	beq.n	800e074 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	699b      	ldr	r3, [r3, #24]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f7 f8e0 	bl	8005234 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e074:	68f8      	ldr	r0, [r7, #12]
 800e076:	f7ff ffbd 	bl	800dff4 <ip_frag_free_pbuf_custom_ref>
}
 800e07a:	bf00      	nop
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	080120d4 	.word	0x080120d4
 800e088:	08012298 	.word	0x08012298
 800e08c:	0801211c 	.word	0x0801211c
 800e090:	080122a4 	.word	0x080122a4

0800e094 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b094      	sub	sp, #80	; 0x50
 800e098:	af02      	add	r7, sp, #8
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0aa:	3b14      	subs	r3, #20
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da00      	bge.n	800e0b2 <ip4_frag+0x1e>
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	10db      	asrs	r3, r3, #3
 800e0b4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e0b6:	2314      	movs	r3, #20
 800e0b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f003 030f 	and.w	r3, r3, #15
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	2b14      	cmp	r3, #20
 800e0d4:	d002      	beq.n	800e0dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e0d6:	f06f 0305 	mvn.w	r3, #5
 800e0da:	e110      	b.n	800e2fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	895b      	ldrh	r3, [r3, #10]
 800e0e0:	2b13      	cmp	r3, #19
 800e0e2:	d809      	bhi.n	800e0f8 <ip4_frag+0x64>
 800e0e4:	4b88      	ldr	r3, [pc, #544]	; (800e308 <ip4_frag+0x274>)
 800e0e6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e0ea:	4988      	ldr	r1, [pc, #544]	; (800e30c <ip4_frag+0x278>)
 800e0ec:	4888      	ldr	r0, [pc, #544]	; (800e310 <ip4_frag+0x27c>)
 800e0ee:	f000 fa4f 	bl	800e590 <iprintf>
 800e0f2:	f06f 0305 	mvn.w	r3, #5
 800e0f6:	e102      	b.n	800e2fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fa:	88db      	ldrh	r3, [r3, #6]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7f5 fdfe 	bl	8003d00 <lwip_htons>
 800e104:	4603      	mov	r3, r0
 800e106:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e108:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e10a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e10e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e118:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	891b      	ldrh	r3, [r3, #8]
 800e11e:	3b14      	subs	r3, #20
 800e120:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e124:	e0e1      	b.n	800e2ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e126:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e128:	00db      	lsls	r3, r3, #3
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e130:	4293      	cmp	r3, r2
 800e132:	bf28      	it	cs
 800e134:	4613      	movcs	r3, r2
 800e136:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e138:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e13c:	2114      	movs	r1, #20
 800e13e:	200e      	movs	r0, #14
 800e140:	f7f6 fd96 	bl	8004c70 <pbuf_alloc>
 800e144:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f000 80d5 	beq.w	800e2f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	895b      	ldrh	r3, [r3, #10]
 800e152:	2b13      	cmp	r3, #19
 800e154:	d806      	bhi.n	800e164 <ip4_frag+0xd0>
 800e156:	4b6c      	ldr	r3, [pc, #432]	; (800e308 <ip4_frag+0x274>)
 800e158:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e15c:	496d      	ldr	r1, [pc, #436]	; (800e314 <ip4_frag+0x280>)
 800e15e:	486c      	ldr	r0, [pc, #432]	; (800e310 <ip4_frag+0x27c>)
 800e160:	f000 fa16 	bl	800e590 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	2214      	movs	r2, #20
 800e16a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 f9df 	bl	800e530 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e178:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e17a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e17e:	e064      	b.n	800e24a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	895a      	ldrh	r2, [r3, #10]
 800e184:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	895b      	ldrh	r3, [r3, #10]
 800e18e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e190:	429a      	cmp	r2, r3
 800e192:	d906      	bls.n	800e1a2 <ip4_frag+0x10e>
 800e194:	4b5c      	ldr	r3, [pc, #368]	; (800e308 <ip4_frag+0x274>)
 800e196:	f240 322d 	movw	r2, #813	; 0x32d
 800e19a:	495f      	ldr	r1, [pc, #380]	; (800e318 <ip4_frag+0x284>)
 800e19c:	485c      	ldr	r0, [pc, #368]	; (800e310 <ip4_frag+0x27c>)
 800e19e:	f000 f9f7 	bl	800e590 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e1a2:	8bfa      	ldrh	r2, [r7, #30]
 800e1a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	bf28      	it	cs
 800e1ac:	4613      	movcs	r3, r2
 800e1ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e1b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d105      	bne.n	800e1c6 <ip4_frag+0x132>
        poff = 0;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	60fb      	str	r3, [r7, #12]
        continue;
 800e1c4:	e041      	b.n	800e24a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e1c6:	f7ff ff0d 	bl	800dfe4 <ip_frag_alloc_pbuf_custom_ref>
 800e1ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d103      	bne.n	800e1da <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e1d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d4:	f7f7 f82e 	bl	8005234 <pbuf_free>
        goto memerr;
 800e1d8:	e08f      	b.n	800e2fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e1da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e1e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e1e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e1ec:	9201      	str	r2, [sp, #4]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2241      	movs	r2, #65	; 0x41
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	f7f6 fe65 	bl	8004ec4 <pbuf_alloced_custom>
 800e1fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e202:	69b8      	ldr	r0, [r7, #24]
 800e204:	f7ff fef6 	bl	800dff4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e20a:	f7f7 f813 	bl	8005234 <pbuf_free>
        goto memerr;
 800e20e:	e074      	b.n	800e2fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7f7 f8af 	bl	8005374 <pbuf_ref>
      pcr->original = p;
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	619a      	str	r2, [r3, #24]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e21c:	69bb      	ldr	r3, [r7, #24]
 800e21e:	4a3f      	ldr	r2, [pc, #252]	; (800e31c <ip4_frag+0x288>)
 800e220:	615a      	str	r2, [r3, #20]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e222:	6979      	ldr	r1, [r7, #20]
 800e224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e226:	f7f7 f8c7 	bl	80053b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e22a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e22e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e238:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <ip4_frag+0x1b6>
        poff = 0;
 800e240:	2300      	movs	r3, #0
 800e242:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e24a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d196      	bne.n	800e180 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e252:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e254:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e258:	4413      	add	r3, r2
 800e25a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e260:	f1a3 0213 	sub.w	r2, r3, #19
 800e264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e268:	429a      	cmp	r2, r3
 800e26a:	bfcc      	ite	gt
 800e26c:	2301      	movgt	r3, #1
 800e26e:	2300      	movle	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e27c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <ip4_frag+0x1f6>
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	2b00      	cmp	r3, #0
 800e288:	d003      	beq.n	800e292 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e28a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e28c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e290:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e294:	4618      	mov	r0, r3
 800e296:	f7f5 fd33 	bl	8003d00 <lwip_htons>
 800e29a:	4603      	mov	r3, r0
 800e29c:	461a      	mov	r2, r3
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e2a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2a4:	3314      	adds	r3, #20
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7f5 fd29 	bl	8003d00 <lwip_htons>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	729a      	strb	r2, [r3, #10]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2c8:	68b8      	ldr	r0, [r7, #8]
 800e2ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e2cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2ce:	f7f6 ffb1 	bl	8005234 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e2d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e2de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e2e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e2ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f47f af19 	bne.w	800e126 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e002      	b.n	800e2fe <ip4_frag+0x26a>
      goto memerr;
 800e2f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e2fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3748      	adds	r7, #72	; 0x48
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	080120d4 	.word	0x080120d4
 800e30c:	080122b0 	.word	0x080122b0
 800e310:	0801211c 	.word	0x0801211c
 800e314:	080122cc 	.word	0x080122cc
 800e318:	080122ec 	.word	0x080122ec
 800e31c:	0800e02d 	.word	0x0800e02d

0800e320 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e32a:	230e      	movs	r3, #14
 800e32c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	895b      	ldrh	r3, [r3, #10]
 800e332:	2b0e      	cmp	r3, #14
 800e334:	d96e      	bls.n	800e414 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	7c1b      	ldrb	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d106      	bne.n	800e34c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e344:	3301      	adds	r3, #1
 800e346:	b2da      	uxtb	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	741a      	strb	r2, [r3, #16]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	7b1a      	ldrb	r2, [r3, #12]
 800e356:	7b5b      	ldrb	r3, [r3, #13]
 800e358:	021b      	lsls	r3, r3, #8
 800e35a:	4313      	orrs	r3, r2
 800e35c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	2b00      	cmp	r3, #0
 800e368:	d023      	beq.n	800e3b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d10f      	bne.n	800e392 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	785b      	ldrb	r3, [r3, #1]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d11b      	bne.n	800e3b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e37e:	2b5e      	cmp	r3, #94	; 0x5e
 800e380:	d117      	bne.n	800e3b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	7b5b      	ldrb	r3, [r3, #13]
 800e386:	f043 0310 	orr.w	r3, r3, #16
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	735a      	strb	r2, [r3, #13]
 800e390:	e00f      	b.n	800e3b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	2206      	movs	r2, #6
 800e396:	4928      	ldr	r1, [pc, #160]	; (800e438 <ethernet_input+0x118>)
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 f8bb 	bl	800e514 <memcmp>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d106      	bne.n	800e3b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7b5b      	ldrb	r3, [r3, #13]
 800e3a8:	f043 0308 	orr.w	r3, r3, #8
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e3b2:	89fb      	ldrh	r3, [r7, #14]
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	d003      	beq.n	800e3c0 <ethernet_input+0xa0>
 800e3b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e3bc:	d014      	beq.n	800e3e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e3be:	e032      	b.n	800e426 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3c6:	f003 0308 	and.w	r3, r3, #8
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d024      	beq.n	800e418 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e3ce:	8afb      	ldrh	r3, [r7, #22]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7f6 fea8 	bl	8005128 <pbuf_remove_header>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d11e      	bne.n	800e41c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e3de:	6839      	ldr	r1, [r7, #0]
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7fe ff27 	bl	800d234 <ip4_input>
      break;
 800e3e6:	e013      	b.n	800e410 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3ee:	f003 0308 	and.w	r3, r3, #8
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d014      	beq.n	800e420 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e3f6:	8afb      	ldrh	r3, [r7, #22]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7f6 fe94 	bl	8005128 <pbuf_remove_header>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10e      	bne.n	800e424 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e406:	6839      	ldr	r1, [r7, #0]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7fe f8c7 	bl	800c59c <etharp_input>
      break;
 800e40e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e410:	2300      	movs	r3, #0
 800e412:	e00c      	b.n	800e42e <ethernet_input+0x10e>
    goto free_and_return;
 800e414:	bf00      	nop
 800e416:	e006      	b.n	800e426 <ethernet_input+0x106>
        goto free_and_return;
 800e418:	bf00      	nop
 800e41a:	e004      	b.n	800e426 <ethernet_input+0x106>
        goto free_and_return;
 800e41c:	bf00      	nop
 800e41e:	e002      	b.n	800e426 <ethernet_input+0x106>
        goto free_and_return;
 800e420:	bf00      	nop
 800e422:	e000      	b.n	800e426 <ethernet_input+0x106>
        goto free_and_return;
 800e424:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7f6 ff04 	bl	8005234 <pbuf_free>
  return ERR_OK;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	08012474 	.word	0x08012474

0800e43c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
 800e448:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e44a:	8c3b      	ldrh	r3, [r7, #32]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f5 fc57 	bl	8003d00 <lwip_htons>
 800e452:	4603      	mov	r3, r0
 800e454:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e456:	210e      	movs	r1, #14
 800e458:	68b8      	ldr	r0, [r7, #8]
 800e45a:	f7f6 fe55 	bl	8005108 <pbuf_add_header>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d125      	bne.n	800e4b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	8afa      	ldrh	r2, [r7, #22]
 800e46e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	2206      	movs	r2, #6
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 f85a 	bl	800e530 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	3306      	adds	r3, #6
 800e480:	2206      	movs	r2, #6
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	4618      	mov	r0, r3
 800e486:	f000 f853 	bl	800e530 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e490:	2b06      	cmp	r3, #6
 800e492:	d006      	beq.n	800e4a2 <ethernet_output+0x66>
 800e494:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <ethernet_output+0x84>)
 800e496:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e49a:	490a      	ldr	r1, [pc, #40]	; (800e4c4 <ethernet_output+0x88>)
 800e49c:	480a      	ldr	r0, [pc, #40]	; (800e4c8 <ethernet_output+0x8c>)
 800e49e:	f000 f877 	bl	800e590 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	699b      	ldr	r3, [r3, #24]
 800e4a6:	68b9      	ldr	r1, [r7, #8]
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	4798      	blx	r3
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	e002      	b.n	800e4b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e4b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e4b2:	f06f 0301 	mvn.w	r3, #1
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3718      	adds	r7, #24
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	080122fc 	.word	0x080122fc
 800e4c4:	08012334 	.word	0x08012334
 800e4c8:	08012368 	.word	0x08012368

0800e4cc <__libc_init_array>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	4d0d      	ldr	r5, [pc, #52]	; (800e504 <__libc_init_array+0x38>)
 800e4d0:	4c0d      	ldr	r4, [pc, #52]	; (800e508 <__libc_init_array+0x3c>)
 800e4d2:	1b64      	subs	r4, r4, r5
 800e4d4:	10a4      	asrs	r4, r4, #2
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	42a6      	cmp	r6, r4
 800e4da:	d109      	bne.n	800e4f0 <__libc_init_array+0x24>
 800e4dc:	4d0b      	ldr	r5, [pc, #44]	; (800e50c <__libc_init_array+0x40>)
 800e4de:	4c0c      	ldr	r4, [pc, #48]	; (800e510 <__libc_init_array+0x44>)
 800e4e0:	f001 fa1a 	bl	800f918 <_init>
 800e4e4:	1b64      	subs	r4, r4, r5
 800e4e6:	10a4      	asrs	r4, r4, #2
 800e4e8:	2600      	movs	r6, #0
 800e4ea:	42a6      	cmp	r6, r4
 800e4ec:	d105      	bne.n	800e4fa <__libc_init_array+0x2e>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}
 800e4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4f4:	4798      	blx	r3
 800e4f6:	3601      	adds	r6, #1
 800e4f8:	e7ee      	b.n	800e4d8 <__libc_init_array+0xc>
 800e4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4fe:	4798      	blx	r3
 800e500:	3601      	adds	r6, #1
 800e502:	e7f2      	b.n	800e4ea <__libc_init_array+0x1e>
 800e504:	080125d8 	.word	0x080125d8
 800e508:	080125d8 	.word	0x080125d8
 800e50c:	080125d8 	.word	0x080125d8
 800e510:	080125dc 	.word	0x080125dc

0800e514 <memcmp>:
 800e514:	b530      	push	{r4, r5, lr}
 800e516:	3901      	subs	r1, #1
 800e518:	2400      	movs	r4, #0
 800e51a:	42a2      	cmp	r2, r4
 800e51c:	d101      	bne.n	800e522 <memcmp+0xe>
 800e51e:	2000      	movs	r0, #0
 800e520:	e005      	b.n	800e52e <memcmp+0x1a>
 800e522:	5d03      	ldrb	r3, [r0, r4]
 800e524:	3401      	adds	r4, #1
 800e526:	5d0d      	ldrb	r5, [r1, r4]
 800e528:	42ab      	cmp	r3, r5
 800e52a:	d0f6      	beq.n	800e51a <memcmp+0x6>
 800e52c:	1b58      	subs	r0, r3, r5
 800e52e:	bd30      	pop	{r4, r5, pc}

0800e530 <memcpy>:
 800e530:	440a      	add	r2, r1
 800e532:	4291      	cmp	r1, r2
 800e534:	f100 33ff 	add.w	r3, r0, #4294967295
 800e538:	d100      	bne.n	800e53c <memcpy+0xc>
 800e53a:	4770      	bx	lr
 800e53c:	b510      	push	{r4, lr}
 800e53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e542:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e546:	4291      	cmp	r1, r2
 800e548:	d1f9      	bne.n	800e53e <memcpy+0xe>
 800e54a:	bd10      	pop	{r4, pc}

0800e54c <memmove>:
 800e54c:	4288      	cmp	r0, r1
 800e54e:	b510      	push	{r4, lr}
 800e550:	eb01 0402 	add.w	r4, r1, r2
 800e554:	d902      	bls.n	800e55c <memmove+0x10>
 800e556:	4284      	cmp	r4, r0
 800e558:	4623      	mov	r3, r4
 800e55a:	d807      	bhi.n	800e56c <memmove+0x20>
 800e55c:	1e43      	subs	r3, r0, #1
 800e55e:	42a1      	cmp	r1, r4
 800e560:	d008      	beq.n	800e574 <memmove+0x28>
 800e562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e56a:	e7f8      	b.n	800e55e <memmove+0x12>
 800e56c:	4402      	add	r2, r0
 800e56e:	4601      	mov	r1, r0
 800e570:	428a      	cmp	r2, r1
 800e572:	d100      	bne.n	800e576 <memmove+0x2a>
 800e574:	bd10      	pop	{r4, pc}
 800e576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e57e:	e7f7      	b.n	800e570 <memmove+0x24>

0800e580 <memset>:
 800e580:	4402      	add	r2, r0
 800e582:	4603      	mov	r3, r0
 800e584:	4293      	cmp	r3, r2
 800e586:	d100      	bne.n	800e58a <memset+0xa>
 800e588:	4770      	bx	lr
 800e58a:	f803 1b01 	strb.w	r1, [r3], #1
 800e58e:	e7f9      	b.n	800e584 <memset+0x4>

0800e590 <iprintf>:
 800e590:	b40f      	push	{r0, r1, r2, r3}
 800e592:	4b0a      	ldr	r3, [pc, #40]	; (800e5bc <iprintf+0x2c>)
 800e594:	b513      	push	{r0, r1, r4, lr}
 800e596:	681c      	ldr	r4, [r3, #0]
 800e598:	b124      	cbz	r4, 800e5a4 <iprintf+0x14>
 800e59a:	69a3      	ldr	r3, [r4, #24]
 800e59c:	b913      	cbnz	r3, 800e5a4 <iprintf+0x14>
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f000 f8e4 	bl	800e76c <__sinit>
 800e5a4:	ab05      	add	r3, sp, #20
 800e5a6:	9a04      	ldr	r2, [sp, #16]
 800e5a8:	68a1      	ldr	r1, [r4, #8]
 800e5aa:	9301      	str	r3, [sp, #4]
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f000 fbc7 	bl	800ed40 <_vfiprintf_r>
 800e5b2:	b002      	add	sp, #8
 800e5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5b8:	b004      	add	sp, #16
 800e5ba:	4770      	bx	lr
 800e5bc:	10000014 	.word	0x10000014

0800e5c0 <rand>:
 800e5c0:	4b17      	ldr	r3, [pc, #92]	; (800e620 <rand+0x60>)
 800e5c2:	b510      	push	{r4, lr}
 800e5c4:	681c      	ldr	r4, [r3, #0]
 800e5c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e5c8:	b9b3      	cbnz	r3, 800e5f8 <rand+0x38>
 800e5ca:	2018      	movs	r0, #24
 800e5cc:	f000 f980 	bl	800e8d0 <malloc>
 800e5d0:	63a0      	str	r0, [r4, #56]	; 0x38
 800e5d2:	b928      	cbnz	r0, 800e5e0 <rand+0x20>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	4b13      	ldr	r3, [pc, #76]	; (800e624 <rand+0x64>)
 800e5d8:	4813      	ldr	r0, [pc, #76]	; (800e628 <rand+0x68>)
 800e5da:	214e      	movs	r1, #78	; 0x4e
 800e5dc:	f000 f850 	bl	800e680 <__assert_func>
 800e5e0:	4a12      	ldr	r2, [pc, #72]	; (800e62c <rand+0x6c>)
 800e5e2:	4b13      	ldr	r3, [pc, #76]	; (800e630 <rand+0x70>)
 800e5e4:	e9c0 2300 	strd	r2, r3, [r0]
 800e5e8:	4b12      	ldr	r3, [pc, #72]	; (800e634 <rand+0x74>)
 800e5ea:	6083      	str	r3, [r0, #8]
 800e5ec:	230b      	movs	r3, #11
 800e5ee:	8183      	strh	r3, [r0, #12]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e5f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e5fa:	480f      	ldr	r0, [pc, #60]	; (800e638 <rand+0x78>)
 800e5fc:	690a      	ldr	r2, [r1, #16]
 800e5fe:	694b      	ldr	r3, [r1, #20]
 800e600:	4c0e      	ldr	r4, [pc, #56]	; (800e63c <rand+0x7c>)
 800e602:	4350      	muls	r0, r2
 800e604:	fb04 0003 	mla	r0, r4, r3, r0
 800e608:	fba2 3404 	umull	r3, r4, r2, r4
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	4404      	add	r4, r0
 800e610:	f144 0000 	adc.w	r0, r4, #0
 800e614:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e618:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e61c:	bd10      	pop	{r4, pc}
 800e61e:	bf00      	nop
 800e620:	10000014 	.word	0x10000014
 800e624:	08012488 	.word	0x08012488
 800e628:	0801249f 	.word	0x0801249f
 800e62c:	abcd330e 	.word	0xabcd330e
 800e630:	e66d1234 	.word	0xe66d1234
 800e634:	0005deec 	.word	0x0005deec
 800e638:	5851f42d 	.word	0x5851f42d
 800e63c:	4c957f2d 	.word	0x4c957f2d

0800e640 <siprintf>:
 800e640:	b40e      	push	{r1, r2, r3}
 800e642:	b500      	push	{lr}
 800e644:	b09c      	sub	sp, #112	; 0x70
 800e646:	ab1d      	add	r3, sp, #116	; 0x74
 800e648:	9002      	str	r0, [sp, #8]
 800e64a:	9006      	str	r0, [sp, #24]
 800e64c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e650:	4809      	ldr	r0, [pc, #36]	; (800e678 <siprintf+0x38>)
 800e652:	9107      	str	r1, [sp, #28]
 800e654:	9104      	str	r1, [sp, #16]
 800e656:	4909      	ldr	r1, [pc, #36]	; (800e67c <siprintf+0x3c>)
 800e658:	f853 2b04 	ldr.w	r2, [r3], #4
 800e65c:	9105      	str	r1, [sp, #20]
 800e65e:	6800      	ldr	r0, [r0, #0]
 800e660:	9301      	str	r3, [sp, #4]
 800e662:	a902      	add	r1, sp, #8
 800e664:	f000 fa42 	bl	800eaec <_svfiprintf_r>
 800e668:	9b02      	ldr	r3, [sp, #8]
 800e66a:	2200      	movs	r2, #0
 800e66c:	701a      	strb	r2, [r3, #0]
 800e66e:	b01c      	add	sp, #112	; 0x70
 800e670:	f85d eb04 	ldr.w	lr, [sp], #4
 800e674:	b003      	add	sp, #12
 800e676:	4770      	bx	lr
 800e678:	10000014 	.word	0x10000014
 800e67c:	ffff0208 	.word	0xffff0208

0800e680 <__assert_func>:
 800e680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e682:	4614      	mov	r4, r2
 800e684:	461a      	mov	r2, r3
 800e686:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <__assert_func+0x2c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4605      	mov	r5, r0
 800e68c:	68d8      	ldr	r0, [r3, #12]
 800e68e:	b14c      	cbz	r4, 800e6a4 <__assert_func+0x24>
 800e690:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <__assert_func+0x30>)
 800e692:	9100      	str	r1, [sp, #0]
 800e694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e698:	4906      	ldr	r1, [pc, #24]	; (800e6b4 <__assert_func+0x34>)
 800e69a:	462b      	mov	r3, r5
 800e69c:	f000 f8e4 	bl	800e868 <fiprintf>
 800e6a0:	f000 ff38 	bl	800f514 <abort>
 800e6a4:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <__assert_func+0x38>)
 800e6a6:	461c      	mov	r4, r3
 800e6a8:	e7f3      	b.n	800e692 <__assert_func+0x12>
 800e6aa:	bf00      	nop
 800e6ac:	10000014 	.word	0x10000014
 800e6b0:	080124fe 	.word	0x080124fe
 800e6b4:	0801250b 	.word	0x0801250b
 800e6b8:	08012539 	.word	0x08012539

0800e6bc <std>:
 800e6bc:	2300      	movs	r3, #0
 800e6be:	b510      	push	{r4, lr}
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	e9c0 3300 	strd	r3, r3, [r0]
 800e6c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6ca:	6083      	str	r3, [r0, #8]
 800e6cc:	8181      	strh	r1, [r0, #12]
 800e6ce:	6643      	str	r3, [r0, #100]	; 0x64
 800e6d0:	81c2      	strh	r2, [r0, #14]
 800e6d2:	6183      	str	r3, [r0, #24]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	2208      	movs	r2, #8
 800e6d8:	305c      	adds	r0, #92	; 0x5c
 800e6da:	f7ff ff51 	bl	800e580 <memset>
 800e6de:	4b05      	ldr	r3, [pc, #20]	; (800e6f4 <std+0x38>)
 800e6e0:	6263      	str	r3, [r4, #36]	; 0x24
 800e6e2:	4b05      	ldr	r3, [pc, #20]	; (800e6f8 <std+0x3c>)
 800e6e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6e6:	4b05      	ldr	r3, [pc, #20]	; (800e6fc <std+0x40>)
 800e6e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6ea:	4b05      	ldr	r3, [pc, #20]	; (800e700 <std+0x44>)
 800e6ec:	6224      	str	r4, [r4, #32]
 800e6ee:	6323      	str	r3, [r4, #48]	; 0x30
 800e6f0:	bd10      	pop	{r4, pc}
 800e6f2:	bf00      	nop
 800e6f4:	0800f2e9 	.word	0x0800f2e9
 800e6f8:	0800f30b 	.word	0x0800f30b
 800e6fc:	0800f343 	.word	0x0800f343
 800e700:	0800f367 	.word	0x0800f367

0800e704 <_cleanup_r>:
 800e704:	4901      	ldr	r1, [pc, #4]	; (800e70c <_cleanup_r+0x8>)
 800e706:	f000 b8c1 	b.w	800e88c <_fwalk_reent>
 800e70a:	bf00      	nop
 800e70c:	0800f651 	.word	0x0800f651

0800e710 <__sfmoreglue>:
 800e710:	b570      	push	{r4, r5, r6, lr}
 800e712:	1e4a      	subs	r2, r1, #1
 800e714:	2568      	movs	r5, #104	; 0x68
 800e716:	4355      	muls	r5, r2
 800e718:	460e      	mov	r6, r1
 800e71a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e71e:	f000 f92f 	bl	800e980 <_malloc_r>
 800e722:	4604      	mov	r4, r0
 800e724:	b140      	cbz	r0, 800e738 <__sfmoreglue+0x28>
 800e726:	2100      	movs	r1, #0
 800e728:	e9c0 1600 	strd	r1, r6, [r0]
 800e72c:	300c      	adds	r0, #12
 800e72e:	60a0      	str	r0, [r4, #8]
 800e730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e734:	f7ff ff24 	bl	800e580 <memset>
 800e738:	4620      	mov	r0, r4
 800e73a:	bd70      	pop	{r4, r5, r6, pc}

0800e73c <__sfp_lock_acquire>:
 800e73c:	4801      	ldr	r0, [pc, #4]	; (800e744 <__sfp_lock_acquire+0x8>)
 800e73e:	f000 b8c5 	b.w	800e8cc <__retarget_lock_acquire_recursive>
 800e742:	bf00      	nop
 800e744:	20024d2c 	.word	0x20024d2c

0800e748 <__sfp_lock_release>:
 800e748:	4801      	ldr	r0, [pc, #4]	; (800e750 <__sfp_lock_release+0x8>)
 800e74a:	f000 b8c0 	b.w	800e8ce <__retarget_lock_release_recursive>
 800e74e:	bf00      	nop
 800e750:	20024d2c 	.word	0x20024d2c

0800e754 <__sinit_lock_acquire>:
 800e754:	4801      	ldr	r0, [pc, #4]	; (800e75c <__sinit_lock_acquire+0x8>)
 800e756:	f000 b8b9 	b.w	800e8cc <__retarget_lock_acquire_recursive>
 800e75a:	bf00      	nop
 800e75c:	20024d27 	.word	0x20024d27

0800e760 <__sinit_lock_release>:
 800e760:	4801      	ldr	r0, [pc, #4]	; (800e768 <__sinit_lock_release+0x8>)
 800e762:	f000 b8b4 	b.w	800e8ce <__retarget_lock_release_recursive>
 800e766:	bf00      	nop
 800e768:	20024d27 	.word	0x20024d27

0800e76c <__sinit>:
 800e76c:	b510      	push	{r4, lr}
 800e76e:	4604      	mov	r4, r0
 800e770:	f7ff fff0 	bl	800e754 <__sinit_lock_acquire>
 800e774:	69a3      	ldr	r3, [r4, #24]
 800e776:	b11b      	cbz	r3, 800e780 <__sinit+0x14>
 800e778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e77c:	f7ff bff0 	b.w	800e760 <__sinit_lock_release>
 800e780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e784:	6523      	str	r3, [r4, #80]	; 0x50
 800e786:	4b13      	ldr	r3, [pc, #76]	; (800e7d4 <__sinit+0x68>)
 800e788:	4a13      	ldr	r2, [pc, #76]	; (800e7d8 <__sinit+0x6c>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e78e:	42a3      	cmp	r3, r4
 800e790:	bf04      	itt	eq
 800e792:	2301      	moveq	r3, #1
 800e794:	61a3      	streq	r3, [r4, #24]
 800e796:	4620      	mov	r0, r4
 800e798:	f000 f820 	bl	800e7dc <__sfp>
 800e79c:	6060      	str	r0, [r4, #4]
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f000 f81c 	bl	800e7dc <__sfp>
 800e7a4:	60a0      	str	r0, [r4, #8]
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	f000 f818 	bl	800e7dc <__sfp>
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	60e0      	str	r0, [r4, #12]
 800e7b0:	2104      	movs	r1, #4
 800e7b2:	6860      	ldr	r0, [r4, #4]
 800e7b4:	f7ff ff82 	bl	800e6bc <std>
 800e7b8:	68a0      	ldr	r0, [r4, #8]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	2109      	movs	r1, #9
 800e7be:	f7ff ff7d 	bl	800e6bc <std>
 800e7c2:	68e0      	ldr	r0, [r4, #12]
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	2112      	movs	r1, #18
 800e7c8:	f7ff ff78 	bl	800e6bc <std>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	61a3      	str	r3, [r4, #24]
 800e7d0:	e7d2      	b.n	800e778 <__sinit+0xc>
 800e7d2:	bf00      	nop
 800e7d4:	08012484 	.word	0x08012484
 800e7d8:	0800e705 	.word	0x0800e705

0800e7dc <__sfp>:
 800e7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7de:	4607      	mov	r7, r0
 800e7e0:	f7ff ffac 	bl	800e73c <__sfp_lock_acquire>
 800e7e4:	4b1e      	ldr	r3, [pc, #120]	; (800e860 <__sfp+0x84>)
 800e7e6:	681e      	ldr	r6, [r3, #0]
 800e7e8:	69b3      	ldr	r3, [r6, #24]
 800e7ea:	b913      	cbnz	r3, 800e7f2 <__sfp+0x16>
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f7ff ffbd 	bl	800e76c <__sinit>
 800e7f2:	3648      	adds	r6, #72	; 0x48
 800e7f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	d503      	bpl.n	800e804 <__sfp+0x28>
 800e7fc:	6833      	ldr	r3, [r6, #0]
 800e7fe:	b30b      	cbz	r3, 800e844 <__sfp+0x68>
 800e800:	6836      	ldr	r6, [r6, #0]
 800e802:	e7f7      	b.n	800e7f4 <__sfp+0x18>
 800e804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e808:	b9d5      	cbnz	r5, 800e840 <__sfp+0x64>
 800e80a:	4b16      	ldr	r3, [pc, #88]	; (800e864 <__sfp+0x88>)
 800e80c:	60e3      	str	r3, [r4, #12]
 800e80e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e812:	6665      	str	r5, [r4, #100]	; 0x64
 800e814:	f000 f859 	bl	800e8ca <__retarget_lock_init_recursive>
 800e818:	f7ff ff96 	bl	800e748 <__sfp_lock_release>
 800e81c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e824:	6025      	str	r5, [r4, #0]
 800e826:	61a5      	str	r5, [r4, #24]
 800e828:	2208      	movs	r2, #8
 800e82a:	4629      	mov	r1, r5
 800e82c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e830:	f7ff fea6 	bl	800e580 <memset>
 800e834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e83c:	4620      	mov	r0, r4
 800e83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e840:	3468      	adds	r4, #104	; 0x68
 800e842:	e7d9      	b.n	800e7f8 <__sfp+0x1c>
 800e844:	2104      	movs	r1, #4
 800e846:	4638      	mov	r0, r7
 800e848:	f7ff ff62 	bl	800e710 <__sfmoreglue>
 800e84c:	4604      	mov	r4, r0
 800e84e:	6030      	str	r0, [r6, #0]
 800e850:	2800      	cmp	r0, #0
 800e852:	d1d5      	bne.n	800e800 <__sfp+0x24>
 800e854:	f7ff ff78 	bl	800e748 <__sfp_lock_release>
 800e858:	230c      	movs	r3, #12
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	e7ee      	b.n	800e83c <__sfp+0x60>
 800e85e:	bf00      	nop
 800e860:	08012484 	.word	0x08012484
 800e864:	ffff0001 	.word	0xffff0001

0800e868 <fiprintf>:
 800e868:	b40e      	push	{r1, r2, r3}
 800e86a:	b503      	push	{r0, r1, lr}
 800e86c:	4601      	mov	r1, r0
 800e86e:	ab03      	add	r3, sp, #12
 800e870:	4805      	ldr	r0, [pc, #20]	; (800e888 <fiprintf+0x20>)
 800e872:	f853 2b04 	ldr.w	r2, [r3], #4
 800e876:	6800      	ldr	r0, [r0, #0]
 800e878:	9301      	str	r3, [sp, #4]
 800e87a:	f000 fa61 	bl	800ed40 <_vfiprintf_r>
 800e87e:	b002      	add	sp, #8
 800e880:	f85d eb04 	ldr.w	lr, [sp], #4
 800e884:	b003      	add	sp, #12
 800e886:	4770      	bx	lr
 800e888:	10000014 	.word	0x10000014

0800e88c <_fwalk_reent>:
 800e88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e890:	4606      	mov	r6, r0
 800e892:	4688      	mov	r8, r1
 800e894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e898:	2700      	movs	r7, #0
 800e89a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e89e:	f1b9 0901 	subs.w	r9, r9, #1
 800e8a2:	d505      	bpl.n	800e8b0 <_fwalk_reent+0x24>
 800e8a4:	6824      	ldr	r4, [r4, #0]
 800e8a6:	2c00      	cmp	r4, #0
 800e8a8:	d1f7      	bne.n	800e89a <_fwalk_reent+0xe>
 800e8aa:	4638      	mov	r0, r7
 800e8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b0:	89ab      	ldrh	r3, [r5, #12]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d907      	bls.n	800e8c6 <_fwalk_reent+0x3a>
 800e8b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	d003      	beq.n	800e8c6 <_fwalk_reent+0x3a>
 800e8be:	4629      	mov	r1, r5
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	47c0      	blx	r8
 800e8c4:	4307      	orrs	r7, r0
 800e8c6:	3568      	adds	r5, #104	; 0x68
 800e8c8:	e7e9      	b.n	800e89e <_fwalk_reent+0x12>

0800e8ca <__retarget_lock_init_recursive>:
 800e8ca:	4770      	bx	lr

0800e8cc <__retarget_lock_acquire_recursive>:
 800e8cc:	4770      	bx	lr

0800e8ce <__retarget_lock_release_recursive>:
 800e8ce:	4770      	bx	lr

0800e8d0 <malloc>:
 800e8d0:	4b02      	ldr	r3, [pc, #8]	; (800e8dc <malloc+0xc>)
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	6818      	ldr	r0, [r3, #0]
 800e8d6:	f000 b853 	b.w	800e980 <_malloc_r>
 800e8da:	bf00      	nop
 800e8dc:	10000014 	.word	0x10000014

0800e8e0 <_free_r>:
 800e8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8e2:	2900      	cmp	r1, #0
 800e8e4:	d048      	beq.n	800e978 <_free_r+0x98>
 800e8e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ea:	9001      	str	r0, [sp, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	f1a1 0404 	sub.w	r4, r1, #4
 800e8f2:	bfb8      	it	lt
 800e8f4:	18e4      	addlt	r4, r4, r3
 800e8f6:	f000 ff5d 	bl	800f7b4 <__malloc_lock>
 800e8fa:	4a20      	ldr	r2, [pc, #128]	; (800e97c <_free_r+0x9c>)
 800e8fc:	9801      	ldr	r0, [sp, #4]
 800e8fe:	6813      	ldr	r3, [r2, #0]
 800e900:	4615      	mov	r5, r2
 800e902:	b933      	cbnz	r3, 800e912 <_free_r+0x32>
 800e904:	6063      	str	r3, [r4, #4]
 800e906:	6014      	str	r4, [r2, #0]
 800e908:	b003      	add	sp, #12
 800e90a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e90e:	f000 bf57 	b.w	800f7c0 <__malloc_unlock>
 800e912:	42a3      	cmp	r3, r4
 800e914:	d90b      	bls.n	800e92e <_free_r+0x4e>
 800e916:	6821      	ldr	r1, [r4, #0]
 800e918:	1862      	adds	r2, r4, r1
 800e91a:	4293      	cmp	r3, r2
 800e91c:	bf04      	itt	eq
 800e91e:	681a      	ldreq	r2, [r3, #0]
 800e920:	685b      	ldreq	r3, [r3, #4]
 800e922:	6063      	str	r3, [r4, #4]
 800e924:	bf04      	itt	eq
 800e926:	1852      	addeq	r2, r2, r1
 800e928:	6022      	streq	r2, [r4, #0]
 800e92a:	602c      	str	r4, [r5, #0]
 800e92c:	e7ec      	b.n	800e908 <_free_r+0x28>
 800e92e:	461a      	mov	r2, r3
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	b10b      	cbz	r3, 800e938 <_free_r+0x58>
 800e934:	42a3      	cmp	r3, r4
 800e936:	d9fa      	bls.n	800e92e <_free_r+0x4e>
 800e938:	6811      	ldr	r1, [r2, #0]
 800e93a:	1855      	adds	r5, r2, r1
 800e93c:	42a5      	cmp	r5, r4
 800e93e:	d10b      	bne.n	800e958 <_free_r+0x78>
 800e940:	6824      	ldr	r4, [r4, #0]
 800e942:	4421      	add	r1, r4
 800e944:	1854      	adds	r4, r2, r1
 800e946:	42a3      	cmp	r3, r4
 800e948:	6011      	str	r1, [r2, #0]
 800e94a:	d1dd      	bne.n	800e908 <_free_r+0x28>
 800e94c:	681c      	ldr	r4, [r3, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	6053      	str	r3, [r2, #4]
 800e952:	4421      	add	r1, r4
 800e954:	6011      	str	r1, [r2, #0]
 800e956:	e7d7      	b.n	800e908 <_free_r+0x28>
 800e958:	d902      	bls.n	800e960 <_free_r+0x80>
 800e95a:	230c      	movs	r3, #12
 800e95c:	6003      	str	r3, [r0, #0]
 800e95e:	e7d3      	b.n	800e908 <_free_r+0x28>
 800e960:	6825      	ldr	r5, [r4, #0]
 800e962:	1961      	adds	r1, r4, r5
 800e964:	428b      	cmp	r3, r1
 800e966:	bf04      	itt	eq
 800e968:	6819      	ldreq	r1, [r3, #0]
 800e96a:	685b      	ldreq	r3, [r3, #4]
 800e96c:	6063      	str	r3, [r4, #4]
 800e96e:	bf04      	itt	eq
 800e970:	1949      	addeq	r1, r1, r5
 800e972:	6021      	streq	r1, [r4, #0]
 800e974:	6054      	str	r4, [r2, #4]
 800e976:	e7c7      	b.n	800e908 <_free_r+0x28>
 800e978:	b003      	add	sp, #12
 800e97a:	bd30      	pop	{r4, r5, pc}
 800e97c:	20000190 	.word	0x20000190

0800e980 <_malloc_r>:
 800e980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e982:	1ccd      	adds	r5, r1, #3
 800e984:	f025 0503 	bic.w	r5, r5, #3
 800e988:	3508      	adds	r5, #8
 800e98a:	2d0c      	cmp	r5, #12
 800e98c:	bf38      	it	cc
 800e98e:	250c      	movcc	r5, #12
 800e990:	2d00      	cmp	r5, #0
 800e992:	4606      	mov	r6, r0
 800e994:	db01      	blt.n	800e99a <_malloc_r+0x1a>
 800e996:	42a9      	cmp	r1, r5
 800e998:	d903      	bls.n	800e9a2 <_malloc_r+0x22>
 800e99a:	230c      	movs	r3, #12
 800e99c:	6033      	str	r3, [r6, #0]
 800e99e:	2000      	movs	r0, #0
 800e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a2:	f000 ff07 	bl	800f7b4 <__malloc_lock>
 800e9a6:	4921      	ldr	r1, [pc, #132]	; (800ea2c <_malloc_r+0xac>)
 800e9a8:	680a      	ldr	r2, [r1, #0]
 800e9aa:	4614      	mov	r4, r2
 800e9ac:	b99c      	cbnz	r4, 800e9d6 <_malloc_r+0x56>
 800e9ae:	4f20      	ldr	r7, [pc, #128]	; (800ea30 <_malloc_r+0xb0>)
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	b923      	cbnz	r3, 800e9be <_malloc_r+0x3e>
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	4630      	mov	r0, r6
 800e9b8:	f000 fc86 	bl	800f2c8 <_sbrk_r>
 800e9bc:	6038      	str	r0, [r7, #0]
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f000 fc81 	bl	800f2c8 <_sbrk_r>
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d123      	bne.n	800ea12 <_malloc_r+0x92>
 800e9ca:	230c      	movs	r3, #12
 800e9cc:	6033      	str	r3, [r6, #0]
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f000 fef6 	bl	800f7c0 <__malloc_unlock>
 800e9d4:	e7e3      	b.n	800e99e <_malloc_r+0x1e>
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	1b5b      	subs	r3, r3, r5
 800e9da:	d417      	bmi.n	800ea0c <_malloc_r+0x8c>
 800e9dc:	2b0b      	cmp	r3, #11
 800e9de:	d903      	bls.n	800e9e8 <_malloc_r+0x68>
 800e9e0:	6023      	str	r3, [r4, #0]
 800e9e2:	441c      	add	r4, r3
 800e9e4:	6025      	str	r5, [r4, #0]
 800e9e6:	e004      	b.n	800e9f2 <_malloc_r+0x72>
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	42a2      	cmp	r2, r4
 800e9ec:	bf0c      	ite	eq
 800e9ee:	600b      	streq	r3, [r1, #0]
 800e9f0:	6053      	strne	r3, [r2, #4]
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f000 fee4 	bl	800f7c0 <__malloc_unlock>
 800e9f8:	f104 000b 	add.w	r0, r4, #11
 800e9fc:	1d23      	adds	r3, r4, #4
 800e9fe:	f020 0007 	bic.w	r0, r0, #7
 800ea02:	1ac2      	subs	r2, r0, r3
 800ea04:	d0cc      	beq.n	800e9a0 <_malloc_r+0x20>
 800ea06:	1a1b      	subs	r3, r3, r0
 800ea08:	50a3      	str	r3, [r4, r2]
 800ea0a:	e7c9      	b.n	800e9a0 <_malloc_r+0x20>
 800ea0c:	4622      	mov	r2, r4
 800ea0e:	6864      	ldr	r4, [r4, #4]
 800ea10:	e7cc      	b.n	800e9ac <_malloc_r+0x2c>
 800ea12:	1cc4      	adds	r4, r0, #3
 800ea14:	f024 0403 	bic.w	r4, r4, #3
 800ea18:	42a0      	cmp	r0, r4
 800ea1a:	d0e3      	beq.n	800e9e4 <_malloc_r+0x64>
 800ea1c:	1a21      	subs	r1, r4, r0
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f000 fc52 	bl	800f2c8 <_sbrk_r>
 800ea24:	3001      	adds	r0, #1
 800ea26:	d1dd      	bne.n	800e9e4 <_malloc_r+0x64>
 800ea28:	e7cf      	b.n	800e9ca <_malloc_r+0x4a>
 800ea2a:	bf00      	nop
 800ea2c:	20000190 	.word	0x20000190
 800ea30:	20000194 	.word	0x20000194

0800ea34 <__ssputs_r>:
 800ea34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea38:	688e      	ldr	r6, [r1, #8]
 800ea3a:	429e      	cmp	r6, r3
 800ea3c:	4682      	mov	sl, r0
 800ea3e:	460c      	mov	r4, r1
 800ea40:	4690      	mov	r8, r2
 800ea42:	461f      	mov	r7, r3
 800ea44:	d838      	bhi.n	800eab8 <__ssputs_r+0x84>
 800ea46:	898a      	ldrh	r2, [r1, #12]
 800ea48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea4c:	d032      	beq.n	800eab4 <__ssputs_r+0x80>
 800ea4e:	6825      	ldr	r5, [r4, #0]
 800ea50:	6909      	ldr	r1, [r1, #16]
 800ea52:	eba5 0901 	sub.w	r9, r5, r1
 800ea56:	6965      	ldr	r5, [r4, #20]
 800ea58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea60:	3301      	adds	r3, #1
 800ea62:	444b      	add	r3, r9
 800ea64:	106d      	asrs	r5, r5, #1
 800ea66:	429d      	cmp	r5, r3
 800ea68:	bf38      	it	cc
 800ea6a:	461d      	movcc	r5, r3
 800ea6c:	0553      	lsls	r3, r2, #21
 800ea6e:	d531      	bpl.n	800ead4 <__ssputs_r+0xa0>
 800ea70:	4629      	mov	r1, r5
 800ea72:	f7ff ff85 	bl	800e980 <_malloc_r>
 800ea76:	4606      	mov	r6, r0
 800ea78:	b950      	cbnz	r0, 800ea90 <__ssputs_r+0x5c>
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	f8ca 3000 	str.w	r3, [sl]
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea86:	81a3      	strh	r3, [r4, #12]
 800ea88:	f04f 30ff 	mov.w	r0, #4294967295
 800ea8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea90:	6921      	ldr	r1, [r4, #16]
 800ea92:	464a      	mov	r2, r9
 800ea94:	f7ff fd4c 	bl	800e530 <memcpy>
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eaa2:	81a3      	strh	r3, [r4, #12]
 800eaa4:	6126      	str	r6, [r4, #16]
 800eaa6:	6165      	str	r5, [r4, #20]
 800eaa8:	444e      	add	r6, r9
 800eaaa:	eba5 0509 	sub.w	r5, r5, r9
 800eaae:	6026      	str	r6, [r4, #0]
 800eab0:	60a5      	str	r5, [r4, #8]
 800eab2:	463e      	mov	r6, r7
 800eab4:	42be      	cmp	r6, r7
 800eab6:	d900      	bls.n	800eaba <__ssputs_r+0x86>
 800eab8:	463e      	mov	r6, r7
 800eaba:	4632      	mov	r2, r6
 800eabc:	6820      	ldr	r0, [r4, #0]
 800eabe:	4641      	mov	r1, r8
 800eac0:	f7ff fd44 	bl	800e54c <memmove>
 800eac4:	68a3      	ldr	r3, [r4, #8]
 800eac6:	6822      	ldr	r2, [r4, #0]
 800eac8:	1b9b      	subs	r3, r3, r6
 800eaca:	4432      	add	r2, r6
 800eacc:	60a3      	str	r3, [r4, #8]
 800eace:	6022      	str	r2, [r4, #0]
 800ead0:	2000      	movs	r0, #0
 800ead2:	e7db      	b.n	800ea8c <__ssputs_r+0x58>
 800ead4:	462a      	mov	r2, r5
 800ead6:	f000 fe79 	bl	800f7cc <_realloc_r>
 800eada:	4606      	mov	r6, r0
 800eadc:	2800      	cmp	r0, #0
 800eade:	d1e1      	bne.n	800eaa4 <__ssputs_r+0x70>
 800eae0:	6921      	ldr	r1, [r4, #16]
 800eae2:	4650      	mov	r0, sl
 800eae4:	f7ff fefc 	bl	800e8e0 <_free_r>
 800eae8:	e7c7      	b.n	800ea7a <__ssputs_r+0x46>
	...

0800eaec <_svfiprintf_r>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4698      	mov	r8, r3
 800eaf2:	898b      	ldrh	r3, [r1, #12]
 800eaf4:	061b      	lsls	r3, r3, #24
 800eaf6:	b09d      	sub	sp, #116	; 0x74
 800eaf8:	4607      	mov	r7, r0
 800eafa:	460d      	mov	r5, r1
 800eafc:	4614      	mov	r4, r2
 800eafe:	d50e      	bpl.n	800eb1e <_svfiprintf_r+0x32>
 800eb00:	690b      	ldr	r3, [r1, #16]
 800eb02:	b963      	cbnz	r3, 800eb1e <_svfiprintf_r+0x32>
 800eb04:	2140      	movs	r1, #64	; 0x40
 800eb06:	f7ff ff3b 	bl	800e980 <_malloc_r>
 800eb0a:	6028      	str	r0, [r5, #0]
 800eb0c:	6128      	str	r0, [r5, #16]
 800eb0e:	b920      	cbnz	r0, 800eb1a <_svfiprintf_r+0x2e>
 800eb10:	230c      	movs	r3, #12
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295
 800eb18:	e0d1      	b.n	800ecbe <_svfiprintf_r+0x1d2>
 800eb1a:	2340      	movs	r3, #64	; 0x40
 800eb1c:	616b      	str	r3, [r5, #20]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	9309      	str	r3, [sp, #36]	; 0x24
 800eb22:	2320      	movs	r3, #32
 800eb24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb28:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb2c:	2330      	movs	r3, #48	; 0x30
 800eb2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ecd8 <_svfiprintf_r+0x1ec>
 800eb32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb36:	f04f 0901 	mov.w	r9, #1
 800eb3a:	4623      	mov	r3, r4
 800eb3c:	469a      	mov	sl, r3
 800eb3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb42:	b10a      	cbz	r2, 800eb48 <_svfiprintf_r+0x5c>
 800eb44:	2a25      	cmp	r2, #37	; 0x25
 800eb46:	d1f9      	bne.n	800eb3c <_svfiprintf_r+0x50>
 800eb48:	ebba 0b04 	subs.w	fp, sl, r4
 800eb4c:	d00b      	beq.n	800eb66 <_svfiprintf_r+0x7a>
 800eb4e:	465b      	mov	r3, fp
 800eb50:	4622      	mov	r2, r4
 800eb52:	4629      	mov	r1, r5
 800eb54:	4638      	mov	r0, r7
 800eb56:	f7ff ff6d 	bl	800ea34 <__ssputs_r>
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	f000 80aa 	beq.w	800ecb4 <_svfiprintf_r+0x1c8>
 800eb60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb62:	445a      	add	r2, fp
 800eb64:	9209      	str	r2, [sp, #36]	; 0x24
 800eb66:	f89a 3000 	ldrb.w	r3, [sl]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 80a2 	beq.w	800ecb4 <_svfiprintf_r+0x1c8>
 800eb70:	2300      	movs	r3, #0
 800eb72:	f04f 32ff 	mov.w	r2, #4294967295
 800eb76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb7a:	f10a 0a01 	add.w	sl, sl, #1
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	9307      	str	r3, [sp, #28]
 800eb82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb86:	931a      	str	r3, [sp, #104]	; 0x68
 800eb88:	4654      	mov	r4, sl
 800eb8a:	2205      	movs	r2, #5
 800eb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb90:	4851      	ldr	r0, [pc, #324]	; (800ecd8 <_svfiprintf_r+0x1ec>)
 800eb92:	f7f1 fb3d 	bl	8000210 <memchr>
 800eb96:	9a04      	ldr	r2, [sp, #16]
 800eb98:	b9d8      	cbnz	r0, 800ebd2 <_svfiprintf_r+0xe6>
 800eb9a:	06d0      	lsls	r0, r2, #27
 800eb9c:	bf44      	itt	mi
 800eb9e:	2320      	movmi	r3, #32
 800eba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eba4:	0711      	lsls	r1, r2, #28
 800eba6:	bf44      	itt	mi
 800eba8:	232b      	movmi	r3, #43	; 0x2b
 800ebaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebae:	f89a 3000 	ldrb.w	r3, [sl]
 800ebb2:	2b2a      	cmp	r3, #42	; 0x2a
 800ebb4:	d015      	beq.n	800ebe2 <_svfiprintf_r+0xf6>
 800ebb6:	9a07      	ldr	r2, [sp, #28]
 800ebb8:	4654      	mov	r4, sl
 800ebba:	2000      	movs	r0, #0
 800ebbc:	f04f 0c0a 	mov.w	ip, #10
 800ebc0:	4621      	mov	r1, r4
 800ebc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebc6:	3b30      	subs	r3, #48	; 0x30
 800ebc8:	2b09      	cmp	r3, #9
 800ebca:	d94e      	bls.n	800ec6a <_svfiprintf_r+0x17e>
 800ebcc:	b1b0      	cbz	r0, 800ebfc <_svfiprintf_r+0x110>
 800ebce:	9207      	str	r2, [sp, #28]
 800ebd0:	e014      	b.n	800ebfc <_svfiprintf_r+0x110>
 800ebd2:	eba0 0308 	sub.w	r3, r0, r8
 800ebd6:	fa09 f303 	lsl.w	r3, r9, r3
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	9304      	str	r3, [sp, #16]
 800ebde:	46a2      	mov	sl, r4
 800ebe0:	e7d2      	b.n	800eb88 <_svfiprintf_r+0x9c>
 800ebe2:	9b03      	ldr	r3, [sp, #12]
 800ebe4:	1d19      	adds	r1, r3, #4
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	9103      	str	r1, [sp, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	bfbb      	ittet	lt
 800ebee:	425b      	neglt	r3, r3
 800ebf0:	f042 0202 	orrlt.w	r2, r2, #2
 800ebf4:	9307      	strge	r3, [sp, #28]
 800ebf6:	9307      	strlt	r3, [sp, #28]
 800ebf8:	bfb8      	it	lt
 800ebfa:	9204      	strlt	r2, [sp, #16]
 800ebfc:	7823      	ldrb	r3, [r4, #0]
 800ebfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ec00:	d10c      	bne.n	800ec1c <_svfiprintf_r+0x130>
 800ec02:	7863      	ldrb	r3, [r4, #1]
 800ec04:	2b2a      	cmp	r3, #42	; 0x2a
 800ec06:	d135      	bne.n	800ec74 <_svfiprintf_r+0x188>
 800ec08:	9b03      	ldr	r3, [sp, #12]
 800ec0a:	1d1a      	adds	r2, r3, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	9203      	str	r2, [sp, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	bfb8      	it	lt
 800ec14:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec18:	3402      	adds	r4, #2
 800ec1a:	9305      	str	r3, [sp, #20]
 800ec1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ece8 <_svfiprintf_r+0x1fc>
 800ec20:	7821      	ldrb	r1, [r4, #0]
 800ec22:	2203      	movs	r2, #3
 800ec24:	4650      	mov	r0, sl
 800ec26:	f7f1 faf3 	bl	8000210 <memchr>
 800ec2a:	b140      	cbz	r0, 800ec3e <_svfiprintf_r+0x152>
 800ec2c:	2340      	movs	r3, #64	; 0x40
 800ec2e:	eba0 000a 	sub.w	r0, r0, sl
 800ec32:	fa03 f000 	lsl.w	r0, r3, r0
 800ec36:	9b04      	ldr	r3, [sp, #16]
 800ec38:	4303      	orrs	r3, r0
 800ec3a:	3401      	adds	r4, #1
 800ec3c:	9304      	str	r3, [sp, #16]
 800ec3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec42:	4826      	ldr	r0, [pc, #152]	; (800ecdc <_svfiprintf_r+0x1f0>)
 800ec44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec48:	2206      	movs	r2, #6
 800ec4a:	f7f1 fae1 	bl	8000210 <memchr>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d038      	beq.n	800ecc4 <_svfiprintf_r+0x1d8>
 800ec52:	4b23      	ldr	r3, [pc, #140]	; (800ece0 <_svfiprintf_r+0x1f4>)
 800ec54:	bb1b      	cbnz	r3, 800ec9e <_svfiprintf_r+0x1b2>
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	3307      	adds	r3, #7
 800ec5a:	f023 0307 	bic.w	r3, r3, #7
 800ec5e:	3308      	adds	r3, #8
 800ec60:	9303      	str	r3, [sp, #12]
 800ec62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec64:	4433      	add	r3, r6
 800ec66:	9309      	str	r3, [sp, #36]	; 0x24
 800ec68:	e767      	b.n	800eb3a <_svfiprintf_r+0x4e>
 800ec6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec6e:	460c      	mov	r4, r1
 800ec70:	2001      	movs	r0, #1
 800ec72:	e7a5      	b.n	800ebc0 <_svfiprintf_r+0xd4>
 800ec74:	2300      	movs	r3, #0
 800ec76:	3401      	adds	r4, #1
 800ec78:	9305      	str	r3, [sp, #20]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	f04f 0c0a 	mov.w	ip, #10
 800ec80:	4620      	mov	r0, r4
 800ec82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec86:	3a30      	subs	r2, #48	; 0x30
 800ec88:	2a09      	cmp	r2, #9
 800ec8a:	d903      	bls.n	800ec94 <_svfiprintf_r+0x1a8>
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d0c5      	beq.n	800ec1c <_svfiprintf_r+0x130>
 800ec90:	9105      	str	r1, [sp, #20]
 800ec92:	e7c3      	b.n	800ec1c <_svfiprintf_r+0x130>
 800ec94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec98:	4604      	mov	r4, r0
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e7f0      	b.n	800ec80 <_svfiprintf_r+0x194>
 800ec9e:	ab03      	add	r3, sp, #12
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	462a      	mov	r2, r5
 800eca4:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <_svfiprintf_r+0x1f8>)
 800eca6:	a904      	add	r1, sp, #16
 800eca8:	4638      	mov	r0, r7
 800ecaa:	f3af 8000 	nop.w
 800ecae:	1c42      	adds	r2, r0, #1
 800ecb0:	4606      	mov	r6, r0
 800ecb2:	d1d6      	bne.n	800ec62 <_svfiprintf_r+0x176>
 800ecb4:	89ab      	ldrh	r3, [r5, #12]
 800ecb6:	065b      	lsls	r3, r3, #25
 800ecb8:	f53f af2c 	bmi.w	800eb14 <_svfiprintf_r+0x28>
 800ecbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecbe:	b01d      	add	sp, #116	; 0x74
 800ecc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc4:	ab03      	add	r3, sp, #12
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	462a      	mov	r2, r5
 800ecca:	4b06      	ldr	r3, [pc, #24]	; (800ece4 <_svfiprintf_r+0x1f8>)
 800eccc:	a904      	add	r1, sp, #16
 800ecce:	4638      	mov	r0, r7
 800ecd0:	f000 f9d4 	bl	800f07c <_printf_i>
 800ecd4:	e7eb      	b.n	800ecae <_svfiprintf_r+0x1c2>
 800ecd6:	bf00      	nop
 800ecd8:	0801259c 	.word	0x0801259c
 800ecdc:	080125a6 	.word	0x080125a6
 800ece0:	00000000 	.word	0x00000000
 800ece4:	0800ea35 	.word	0x0800ea35
 800ece8:	080125a2 	.word	0x080125a2

0800ecec <__sfputc_r>:
 800ecec:	6893      	ldr	r3, [r2, #8]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	b410      	push	{r4}
 800ecf4:	6093      	str	r3, [r2, #8]
 800ecf6:	da08      	bge.n	800ed0a <__sfputc_r+0x1e>
 800ecf8:	6994      	ldr	r4, [r2, #24]
 800ecfa:	42a3      	cmp	r3, r4
 800ecfc:	db01      	blt.n	800ed02 <__sfputc_r+0x16>
 800ecfe:	290a      	cmp	r1, #10
 800ed00:	d103      	bne.n	800ed0a <__sfputc_r+0x1e>
 800ed02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed06:	f000 bb33 	b.w	800f370 <__swbuf_r>
 800ed0a:	6813      	ldr	r3, [r2, #0]
 800ed0c:	1c58      	adds	r0, r3, #1
 800ed0e:	6010      	str	r0, [r2, #0]
 800ed10:	7019      	strb	r1, [r3, #0]
 800ed12:	4608      	mov	r0, r1
 800ed14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <__sfputs_r>:
 800ed1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	4614      	mov	r4, r2
 800ed22:	18d5      	adds	r5, r2, r3
 800ed24:	42ac      	cmp	r4, r5
 800ed26:	d101      	bne.n	800ed2c <__sfputs_r+0x12>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	e007      	b.n	800ed3c <__sfputs_r+0x22>
 800ed2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed30:	463a      	mov	r2, r7
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff ffda 	bl	800ecec <__sfputc_r>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d1f3      	bne.n	800ed24 <__sfputs_r+0xa>
 800ed3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed40 <_vfiprintf_r>:
 800ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	460d      	mov	r5, r1
 800ed46:	b09d      	sub	sp, #116	; 0x74
 800ed48:	4614      	mov	r4, r2
 800ed4a:	4698      	mov	r8, r3
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	b118      	cbz	r0, 800ed58 <_vfiprintf_r+0x18>
 800ed50:	6983      	ldr	r3, [r0, #24]
 800ed52:	b90b      	cbnz	r3, 800ed58 <_vfiprintf_r+0x18>
 800ed54:	f7ff fd0a 	bl	800e76c <__sinit>
 800ed58:	4b89      	ldr	r3, [pc, #548]	; (800ef80 <_vfiprintf_r+0x240>)
 800ed5a:	429d      	cmp	r5, r3
 800ed5c:	d11b      	bne.n	800ed96 <_vfiprintf_r+0x56>
 800ed5e:	6875      	ldr	r5, [r6, #4]
 800ed60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed62:	07d9      	lsls	r1, r3, #31
 800ed64:	d405      	bmi.n	800ed72 <_vfiprintf_r+0x32>
 800ed66:	89ab      	ldrh	r3, [r5, #12]
 800ed68:	059a      	lsls	r2, r3, #22
 800ed6a:	d402      	bmi.n	800ed72 <_vfiprintf_r+0x32>
 800ed6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed6e:	f7ff fdad 	bl	800e8cc <__retarget_lock_acquire_recursive>
 800ed72:	89ab      	ldrh	r3, [r5, #12]
 800ed74:	071b      	lsls	r3, r3, #28
 800ed76:	d501      	bpl.n	800ed7c <_vfiprintf_r+0x3c>
 800ed78:	692b      	ldr	r3, [r5, #16]
 800ed7a:	b9eb      	cbnz	r3, 800edb8 <_vfiprintf_r+0x78>
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f000 fb5a 	bl	800f438 <__swsetup_r>
 800ed84:	b1c0      	cbz	r0, 800edb8 <_vfiprintf_r+0x78>
 800ed86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed88:	07dc      	lsls	r4, r3, #31
 800ed8a:	d50e      	bpl.n	800edaa <_vfiprintf_r+0x6a>
 800ed8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed90:	b01d      	add	sp, #116	; 0x74
 800ed92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed96:	4b7b      	ldr	r3, [pc, #492]	; (800ef84 <_vfiprintf_r+0x244>)
 800ed98:	429d      	cmp	r5, r3
 800ed9a:	d101      	bne.n	800eda0 <_vfiprintf_r+0x60>
 800ed9c:	68b5      	ldr	r5, [r6, #8]
 800ed9e:	e7df      	b.n	800ed60 <_vfiprintf_r+0x20>
 800eda0:	4b79      	ldr	r3, [pc, #484]	; (800ef88 <_vfiprintf_r+0x248>)
 800eda2:	429d      	cmp	r5, r3
 800eda4:	bf08      	it	eq
 800eda6:	68f5      	ldreq	r5, [r6, #12]
 800eda8:	e7da      	b.n	800ed60 <_vfiprintf_r+0x20>
 800edaa:	89ab      	ldrh	r3, [r5, #12]
 800edac:	0598      	lsls	r0, r3, #22
 800edae:	d4ed      	bmi.n	800ed8c <_vfiprintf_r+0x4c>
 800edb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edb2:	f7ff fd8c 	bl	800e8ce <__retarget_lock_release_recursive>
 800edb6:	e7e9      	b.n	800ed8c <_vfiprintf_r+0x4c>
 800edb8:	2300      	movs	r3, #0
 800edba:	9309      	str	r3, [sp, #36]	; 0x24
 800edbc:	2320      	movs	r3, #32
 800edbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800edc6:	2330      	movs	r3, #48	; 0x30
 800edc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef8c <_vfiprintf_r+0x24c>
 800edcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edd0:	f04f 0901 	mov.w	r9, #1
 800edd4:	4623      	mov	r3, r4
 800edd6:	469a      	mov	sl, r3
 800edd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eddc:	b10a      	cbz	r2, 800ede2 <_vfiprintf_r+0xa2>
 800edde:	2a25      	cmp	r2, #37	; 0x25
 800ede0:	d1f9      	bne.n	800edd6 <_vfiprintf_r+0x96>
 800ede2:	ebba 0b04 	subs.w	fp, sl, r4
 800ede6:	d00b      	beq.n	800ee00 <_vfiprintf_r+0xc0>
 800ede8:	465b      	mov	r3, fp
 800edea:	4622      	mov	r2, r4
 800edec:	4629      	mov	r1, r5
 800edee:	4630      	mov	r0, r6
 800edf0:	f7ff ff93 	bl	800ed1a <__sfputs_r>
 800edf4:	3001      	adds	r0, #1
 800edf6:	f000 80aa 	beq.w	800ef4e <_vfiprintf_r+0x20e>
 800edfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edfc:	445a      	add	r2, fp
 800edfe:	9209      	str	r2, [sp, #36]	; 0x24
 800ee00:	f89a 3000 	ldrb.w	r3, [sl]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f000 80a2 	beq.w	800ef4e <_vfiprintf_r+0x20e>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee14:	f10a 0a01 	add.w	sl, sl, #1
 800ee18:	9304      	str	r3, [sp, #16]
 800ee1a:	9307      	str	r3, [sp, #28]
 800ee1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee20:	931a      	str	r3, [sp, #104]	; 0x68
 800ee22:	4654      	mov	r4, sl
 800ee24:	2205      	movs	r2, #5
 800ee26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee2a:	4858      	ldr	r0, [pc, #352]	; (800ef8c <_vfiprintf_r+0x24c>)
 800ee2c:	f7f1 f9f0 	bl	8000210 <memchr>
 800ee30:	9a04      	ldr	r2, [sp, #16]
 800ee32:	b9d8      	cbnz	r0, 800ee6c <_vfiprintf_r+0x12c>
 800ee34:	06d1      	lsls	r1, r2, #27
 800ee36:	bf44      	itt	mi
 800ee38:	2320      	movmi	r3, #32
 800ee3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee3e:	0713      	lsls	r3, r2, #28
 800ee40:	bf44      	itt	mi
 800ee42:	232b      	movmi	r3, #43	; 0x2b
 800ee44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee48:	f89a 3000 	ldrb.w	r3, [sl]
 800ee4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee4e:	d015      	beq.n	800ee7c <_vfiprintf_r+0x13c>
 800ee50:	9a07      	ldr	r2, [sp, #28]
 800ee52:	4654      	mov	r4, sl
 800ee54:	2000      	movs	r0, #0
 800ee56:	f04f 0c0a 	mov.w	ip, #10
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee60:	3b30      	subs	r3, #48	; 0x30
 800ee62:	2b09      	cmp	r3, #9
 800ee64:	d94e      	bls.n	800ef04 <_vfiprintf_r+0x1c4>
 800ee66:	b1b0      	cbz	r0, 800ee96 <_vfiprintf_r+0x156>
 800ee68:	9207      	str	r2, [sp, #28]
 800ee6a:	e014      	b.n	800ee96 <_vfiprintf_r+0x156>
 800ee6c:	eba0 0308 	sub.w	r3, r0, r8
 800ee70:	fa09 f303 	lsl.w	r3, r9, r3
 800ee74:	4313      	orrs	r3, r2
 800ee76:	9304      	str	r3, [sp, #16]
 800ee78:	46a2      	mov	sl, r4
 800ee7a:	e7d2      	b.n	800ee22 <_vfiprintf_r+0xe2>
 800ee7c:	9b03      	ldr	r3, [sp, #12]
 800ee7e:	1d19      	adds	r1, r3, #4
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	9103      	str	r1, [sp, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	bfbb      	ittet	lt
 800ee88:	425b      	neglt	r3, r3
 800ee8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee8e:	9307      	strge	r3, [sp, #28]
 800ee90:	9307      	strlt	r3, [sp, #28]
 800ee92:	bfb8      	it	lt
 800ee94:	9204      	strlt	r2, [sp, #16]
 800ee96:	7823      	ldrb	r3, [r4, #0]
 800ee98:	2b2e      	cmp	r3, #46	; 0x2e
 800ee9a:	d10c      	bne.n	800eeb6 <_vfiprintf_r+0x176>
 800ee9c:	7863      	ldrb	r3, [r4, #1]
 800ee9e:	2b2a      	cmp	r3, #42	; 0x2a
 800eea0:	d135      	bne.n	800ef0e <_vfiprintf_r+0x1ce>
 800eea2:	9b03      	ldr	r3, [sp, #12]
 800eea4:	1d1a      	adds	r2, r3, #4
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	9203      	str	r2, [sp, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	bfb8      	it	lt
 800eeae:	f04f 33ff 	movlt.w	r3, #4294967295
 800eeb2:	3402      	adds	r4, #2
 800eeb4:	9305      	str	r3, [sp, #20]
 800eeb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef9c <_vfiprintf_r+0x25c>
 800eeba:	7821      	ldrb	r1, [r4, #0]
 800eebc:	2203      	movs	r2, #3
 800eebe:	4650      	mov	r0, sl
 800eec0:	f7f1 f9a6 	bl	8000210 <memchr>
 800eec4:	b140      	cbz	r0, 800eed8 <_vfiprintf_r+0x198>
 800eec6:	2340      	movs	r3, #64	; 0x40
 800eec8:	eba0 000a 	sub.w	r0, r0, sl
 800eecc:	fa03 f000 	lsl.w	r0, r3, r0
 800eed0:	9b04      	ldr	r3, [sp, #16]
 800eed2:	4303      	orrs	r3, r0
 800eed4:	3401      	adds	r4, #1
 800eed6:	9304      	str	r3, [sp, #16]
 800eed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eedc:	482c      	ldr	r0, [pc, #176]	; (800ef90 <_vfiprintf_r+0x250>)
 800eede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eee2:	2206      	movs	r2, #6
 800eee4:	f7f1 f994 	bl	8000210 <memchr>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d03f      	beq.n	800ef6c <_vfiprintf_r+0x22c>
 800eeec:	4b29      	ldr	r3, [pc, #164]	; (800ef94 <_vfiprintf_r+0x254>)
 800eeee:	bb1b      	cbnz	r3, 800ef38 <_vfiprintf_r+0x1f8>
 800eef0:	9b03      	ldr	r3, [sp, #12]
 800eef2:	3307      	adds	r3, #7
 800eef4:	f023 0307 	bic.w	r3, r3, #7
 800eef8:	3308      	adds	r3, #8
 800eefa:	9303      	str	r3, [sp, #12]
 800eefc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eefe:	443b      	add	r3, r7
 800ef00:	9309      	str	r3, [sp, #36]	; 0x24
 800ef02:	e767      	b.n	800edd4 <_vfiprintf_r+0x94>
 800ef04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef08:	460c      	mov	r4, r1
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	e7a5      	b.n	800ee5a <_vfiprintf_r+0x11a>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	3401      	adds	r4, #1
 800ef12:	9305      	str	r3, [sp, #20]
 800ef14:	4619      	mov	r1, r3
 800ef16:	f04f 0c0a 	mov.w	ip, #10
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef20:	3a30      	subs	r2, #48	; 0x30
 800ef22:	2a09      	cmp	r2, #9
 800ef24:	d903      	bls.n	800ef2e <_vfiprintf_r+0x1ee>
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d0c5      	beq.n	800eeb6 <_vfiprintf_r+0x176>
 800ef2a:	9105      	str	r1, [sp, #20]
 800ef2c:	e7c3      	b.n	800eeb6 <_vfiprintf_r+0x176>
 800ef2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef32:	4604      	mov	r4, r0
 800ef34:	2301      	movs	r3, #1
 800ef36:	e7f0      	b.n	800ef1a <_vfiprintf_r+0x1da>
 800ef38:	ab03      	add	r3, sp, #12
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	462a      	mov	r2, r5
 800ef3e:	4b16      	ldr	r3, [pc, #88]	; (800ef98 <_vfiprintf_r+0x258>)
 800ef40:	a904      	add	r1, sp, #16
 800ef42:	4630      	mov	r0, r6
 800ef44:	f3af 8000 	nop.w
 800ef48:	4607      	mov	r7, r0
 800ef4a:	1c78      	adds	r0, r7, #1
 800ef4c:	d1d6      	bne.n	800eefc <_vfiprintf_r+0x1bc>
 800ef4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef50:	07d9      	lsls	r1, r3, #31
 800ef52:	d405      	bmi.n	800ef60 <_vfiprintf_r+0x220>
 800ef54:	89ab      	ldrh	r3, [r5, #12]
 800ef56:	059a      	lsls	r2, r3, #22
 800ef58:	d402      	bmi.n	800ef60 <_vfiprintf_r+0x220>
 800ef5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef5c:	f7ff fcb7 	bl	800e8ce <__retarget_lock_release_recursive>
 800ef60:	89ab      	ldrh	r3, [r5, #12]
 800ef62:	065b      	lsls	r3, r3, #25
 800ef64:	f53f af12 	bmi.w	800ed8c <_vfiprintf_r+0x4c>
 800ef68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef6a:	e711      	b.n	800ed90 <_vfiprintf_r+0x50>
 800ef6c:	ab03      	add	r3, sp, #12
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	462a      	mov	r2, r5
 800ef72:	4b09      	ldr	r3, [pc, #36]	; (800ef98 <_vfiprintf_r+0x258>)
 800ef74:	a904      	add	r1, sp, #16
 800ef76:	4630      	mov	r0, r6
 800ef78:	f000 f880 	bl	800f07c <_printf_i>
 800ef7c:	e7e4      	b.n	800ef48 <_vfiprintf_r+0x208>
 800ef7e:	bf00      	nop
 800ef80:	0801255c 	.word	0x0801255c
 800ef84:	0801257c 	.word	0x0801257c
 800ef88:	0801253c 	.word	0x0801253c
 800ef8c:	0801259c 	.word	0x0801259c
 800ef90:	080125a6 	.word	0x080125a6
 800ef94:	00000000 	.word	0x00000000
 800ef98:	0800ed1b 	.word	0x0800ed1b
 800ef9c:	080125a2 	.word	0x080125a2

0800efa0 <_printf_common>:
 800efa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa4:	4616      	mov	r6, r2
 800efa6:	4699      	mov	r9, r3
 800efa8:	688a      	ldr	r2, [r1, #8]
 800efaa:	690b      	ldr	r3, [r1, #16]
 800efac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efb0:	4293      	cmp	r3, r2
 800efb2:	bfb8      	it	lt
 800efb4:	4613      	movlt	r3, r2
 800efb6:	6033      	str	r3, [r6, #0]
 800efb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efbc:	4607      	mov	r7, r0
 800efbe:	460c      	mov	r4, r1
 800efc0:	b10a      	cbz	r2, 800efc6 <_printf_common+0x26>
 800efc2:	3301      	adds	r3, #1
 800efc4:	6033      	str	r3, [r6, #0]
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	0699      	lsls	r1, r3, #26
 800efca:	bf42      	ittt	mi
 800efcc:	6833      	ldrmi	r3, [r6, #0]
 800efce:	3302      	addmi	r3, #2
 800efd0:	6033      	strmi	r3, [r6, #0]
 800efd2:	6825      	ldr	r5, [r4, #0]
 800efd4:	f015 0506 	ands.w	r5, r5, #6
 800efd8:	d106      	bne.n	800efe8 <_printf_common+0x48>
 800efda:	f104 0a19 	add.w	sl, r4, #25
 800efde:	68e3      	ldr	r3, [r4, #12]
 800efe0:	6832      	ldr	r2, [r6, #0]
 800efe2:	1a9b      	subs	r3, r3, r2
 800efe4:	42ab      	cmp	r3, r5
 800efe6:	dc26      	bgt.n	800f036 <_printf_common+0x96>
 800efe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efec:	1e13      	subs	r3, r2, #0
 800efee:	6822      	ldr	r2, [r4, #0]
 800eff0:	bf18      	it	ne
 800eff2:	2301      	movne	r3, #1
 800eff4:	0692      	lsls	r2, r2, #26
 800eff6:	d42b      	bmi.n	800f050 <_printf_common+0xb0>
 800eff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800effc:	4649      	mov	r1, r9
 800effe:	4638      	mov	r0, r7
 800f000:	47c0      	blx	r8
 800f002:	3001      	adds	r0, #1
 800f004:	d01e      	beq.n	800f044 <_printf_common+0xa4>
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	68e5      	ldr	r5, [r4, #12]
 800f00a:	6832      	ldr	r2, [r6, #0]
 800f00c:	f003 0306 	and.w	r3, r3, #6
 800f010:	2b04      	cmp	r3, #4
 800f012:	bf08      	it	eq
 800f014:	1aad      	subeq	r5, r5, r2
 800f016:	68a3      	ldr	r3, [r4, #8]
 800f018:	6922      	ldr	r2, [r4, #16]
 800f01a:	bf0c      	ite	eq
 800f01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f020:	2500      	movne	r5, #0
 800f022:	4293      	cmp	r3, r2
 800f024:	bfc4      	itt	gt
 800f026:	1a9b      	subgt	r3, r3, r2
 800f028:	18ed      	addgt	r5, r5, r3
 800f02a:	2600      	movs	r6, #0
 800f02c:	341a      	adds	r4, #26
 800f02e:	42b5      	cmp	r5, r6
 800f030:	d11a      	bne.n	800f068 <_printf_common+0xc8>
 800f032:	2000      	movs	r0, #0
 800f034:	e008      	b.n	800f048 <_printf_common+0xa8>
 800f036:	2301      	movs	r3, #1
 800f038:	4652      	mov	r2, sl
 800f03a:	4649      	mov	r1, r9
 800f03c:	4638      	mov	r0, r7
 800f03e:	47c0      	blx	r8
 800f040:	3001      	adds	r0, #1
 800f042:	d103      	bne.n	800f04c <_printf_common+0xac>
 800f044:	f04f 30ff 	mov.w	r0, #4294967295
 800f048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f04c:	3501      	adds	r5, #1
 800f04e:	e7c6      	b.n	800efde <_printf_common+0x3e>
 800f050:	18e1      	adds	r1, r4, r3
 800f052:	1c5a      	adds	r2, r3, #1
 800f054:	2030      	movs	r0, #48	; 0x30
 800f056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f05a:	4422      	add	r2, r4
 800f05c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f064:	3302      	adds	r3, #2
 800f066:	e7c7      	b.n	800eff8 <_printf_common+0x58>
 800f068:	2301      	movs	r3, #1
 800f06a:	4622      	mov	r2, r4
 800f06c:	4649      	mov	r1, r9
 800f06e:	4638      	mov	r0, r7
 800f070:	47c0      	blx	r8
 800f072:	3001      	adds	r0, #1
 800f074:	d0e6      	beq.n	800f044 <_printf_common+0xa4>
 800f076:	3601      	adds	r6, #1
 800f078:	e7d9      	b.n	800f02e <_printf_common+0x8e>
	...

0800f07c <_printf_i>:
 800f07c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f080:	460c      	mov	r4, r1
 800f082:	4691      	mov	r9, r2
 800f084:	7e27      	ldrb	r7, [r4, #24]
 800f086:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f088:	2f78      	cmp	r7, #120	; 0x78
 800f08a:	4680      	mov	r8, r0
 800f08c:	469a      	mov	sl, r3
 800f08e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f092:	d807      	bhi.n	800f0a4 <_printf_i+0x28>
 800f094:	2f62      	cmp	r7, #98	; 0x62
 800f096:	d80a      	bhi.n	800f0ae <_printf_i+0x32>
 800f098:	2f00      	cmp	r7, #0
 800f09a:	f000 80d8 	beq.w	800f24e <_printf_i+0x1d2>
 800f09e:	2f58      	cmp	r7, #88	; 0x58
 800f0a0:	f000 80a3 	beq.w	800f1ea <_printf_i+0x16e>
 800f0a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f0a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0ac:	e03a      	b.n	800f124 <_printf_i+0xa8>
 800f0ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0b2:	2b15      	cmp	r3, #21
 800f0b4:	d8f6      	bhi.n	800f0a4 <_printf_i+0x28>
 800f0b6:	a001      	add	r0, pc, #4	; (adr r0, 800f0bc <_printf_i+0x40>)
 800f0b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f0bc:	0800f115 	.word	0x0800f115
 800f0c0:	0800f129 	.word	0x0800f129
 800f0c4:	0800f0a5 	.word	0x0800f0a5
 800f0c8:	0800f0a5 	.word	0x0800f0a5
 800f0cc:	0800f0a5 	.word	0x0800f0a5
 800f0d0:	0800f0a5 	.word	0x0800f0a5
 800f0d4:	0800f129 	.word	0x0800f129
 800f0d8:	0800f0a5 	.word	0x0800f0a5
 800f0dc:	0800f0a5 	.word	0x0800f0a5
 800f0e0:	0800f0a5 	.word	0x0800f0a5
 800f0e4:	0800f0a5 	.word	0x0800f0a5
 800f0e8:	0800f235 	.word	0x0800f235
 800f0ec:	0800f159 	.word	0x0800f159
 800f0f0:	0800f217 	.word	0x0800f217
 800f0f4:	0800f0a5 	.word	0x0800f0a5
 800f0f8:	0800f0a5 	.word	0x0800f0a5
 800f0fc:	0800f257 	.word	0x0800f257
 800f100:	0800f0a5 	.word	0x0800f0a5
 800f104:	0800f159 	.word	0x0800f159
 800f108:	0800f0a5 	.word	0x0800f0a5
 800f10c:	0800f0a5 	.word	0x0800f0a5
 800f110:	0800f21f 	.word	0x0800f21f
 800f114:	680b      	ldr	r3, [r1, #0]
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	600a      	str	r2, [r1, #0]
 800f11c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f124:	2301      	movs	r3, #1
 800f126:	e0a3      	b.n	800f270 <_printf_i+0x1f4>
 800f128:	6825      	ldr	r5, [r4, #0]
 800f12a:	6808      	ldr	r0, [r1, #0]
 800f12c:	062e      	lsls	r6, r5, #24
 800f12e:	f100 0304 	add.w	r3, r0, #4
 800f132:	d50a      	bpl.n	800f14a <_printf_i+0xce>
 800f134:	6805      	ldr	r5, [r0, #0]
 800f136:	600b      	str	r3, [r1, #0]
 800f138:	2d00      	cmp	r5, #0
 800f13a:	da03      	bge.n	800f144 <_printf_i+0xc8>
 800f13c:	232d      	movs	r3, #45	; 0x2d
 800f13e:	426d      	negs	r5, r5
 800f140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f144:	485e      	ldr	r0, [pc, #376]	; (800f2c0 <_printf_i+0x244>)
 800f146:	230a      	movs	r3, #10
 800f148:	e019      	b.n	800f17e <_printf_i+0x102>
 800f14a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f14e:	6805      	ldr	r5, [r0, #0]
 800f150:	600b      	str	r3, [r1, #0]
 800f152:	bf18      	it	ne
 800f154:	b22d      	sxthne	r5, r5
 800f156:	e7ef      	b.n	800f138 <_printf_i+0xbc>
 800f158:	680b      	ldr	r3, [r1, #0]
 800f15a:	6825      	ldr	r5, [r4, #0]
 800f15c:	1d18      	adds	r0, r3, #4
 800f15e:	6008      	str	r0, [r1, #0]
 800f160:	0628      	lsls	r0, r5, #24
 800f162:	d501      	bpl.n	800f168 <_printf_i+0xec>
 800f164:	681d      	ldr	r5, [r3, #0]
 800f166:	e002      	b.n	800f16e <_printf_i+0xf2>
 800f168:	0669      	lsls	r1, r5, #25
 800f16a:	d5fb      	bpl.n	800f164 <_printf_i+0xe8>
 800f16c:	881d      	ldrh	r5, [r3, #0]
 800f16e:	4854      	ldr	r0, [pc, #336]	; (800f2c0 <_printf_i+0x244>)
 800f170:	2f6f      	cmp	r7, #111	; 0x6f
 800f172:	bf0c      	ite	eq
 800f174:	2308      	moveq	r3, #8
 800f176:	230a      	movne	r3, #10
 800f178:	2100      	movs	r1, #0
 800f17a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f17e:	6866      	ldr	r6, [r4, #4]
 800f180:	60a6      	str	r6, [r4, #8]
 800f182:	2e00      	cmp	r6, #0
 800f184:	bfa2      	ittt	ge
 800f186:	6821      	ldrge	r1, [r4, #0]
 800f188:	f021 0104 	bicge.w	r1, r1, #4
 800f18c:	6021      	strge	r1, [r4, #0]
 800f18e:	b90d      	cbnz	r5, 800f194 <_printf_i+0x118>
 800f190:	2e00      	cmp	r6, #0
 800f192:	d04d      	beq.n	800f230 <_printf_i+0x1b4>
 800f194:	4616      	mov	r6, r2
 800f196:	fbb5 f1f3 	udiv	r1, r5, r3
 800f19a:	fb03 5711 	mls	r7, r3, r1, r5
 800f19e:	5dc7      	ldrb	r7, [r0, r7]
 800f1a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1a4:	462f      	mov	r7, r5
 800f1a6:	42bb      	cmp	r3, r7
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	d9f4      	bls.n	800f196 <_printf_i+0x11a>
 800f1ac:	2b08      	cmp	r3, #8
 800f1ae:	d10b      	bne.n	800f1c8 <_printf_i+0x14c>
 800f1b0:	6823      	ldr	r3, [r4, #0]
 800f1b2:	07df      	lsls	r7, r3, #31
 800f1b4:	d508      	bpl.n	800f1c8 <_printf_i+0x14c>
 800f1b6:	6923      	ldr	r3, [r4, #16]
 800f1b8:	6861      	ldr	r1, [r4, #4]
 800f1ba:	4299      	cmp	r1, r3
 800f1bc:	bfde      	ittt	le
 800f1be:	2330      	movle	r3, #48	; 0x30
 800f1c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1c8:	1b92      	subs	r2, r2, r6
 800f1ca:	6122      	str	r2, [r4, #16]
 800f1cc:	f8cd a000 	str.w	sl, [sp]
 800f1d0:	464b      	mov	r3, r9
 800f1d2:	aa03      	add	r2, sp, #12
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	4640      	mov	r0, r8
 800f1d8:	f7ff fee2 	bl	800efa0 <_printf_common>
 800f1dc:	3001      	adds	r0, #1
 800f1de:	d14c      	bne.n	800f27a <_printf_i+0x1fe>
 800f1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e4:	b004      	add	sp, #16
 800f1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ea:	4835      	ldr	r0, [pc, #212]	; (800f2c0 <_printf_i+0x244>)
 800f1ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	680e      	ldr	r6, [r1, #0]
 800f1f4:	061f      	lsls	r7, r3, #24
 800f1f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f1fa:	600e      	str	r6, [r1, #0]
 800f1fc:	d514      	bpl.n	800f228 <_printf_i+0x1ac>
 800f1fe:	07d9      	lsls	r1, r3, #31
 800f200:	bf44      	itt	mi
 800f202:	f043 0320 	orrmi.w	r3, r3, #32
 800f206:	6023      	strmi	r3, [r4, #0]
 800f208:	b91d      	cbnz	r5, 800f212 <_printf_i+0x196>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	f023 0320 	bic.w	r3, r3, #32
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	2310      	movs	r3, #16
 800f214:	e7b0      	b.n	800f178 <_printf_i+0xfc>
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	f043 0320 	orr.w	r3, r3, #32
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	2378      	movs	r3, #120	; 0x78
 800f220:	4828      	ldr	r0, [pc, #160]	; (800f2c4 <_printf_i+0x248>)
 800f222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f226:	e7e3      	b.n	800f1f0 <_printf_i+0x174>
 800f228:	065e      	lsls	r6, r3, #25
 800f22a:	bf48      	it	mi
 800f22c:	b2ad      	uxthmi	r5, r5
 800f22e:	e7e6      	b.n	800f1fe <_printf_i+0x182>
 800f230:	4616      	mov	r6, r2
 800f232:	e7bb      	b.n	800f1ac <_printf_i+0x130>
 800f234:	680b      	ldr	r3, [r1, #0]
 800f236:	6826      	ldr	r6, [r4, #0]
 800f238:	6960      	ldr	r0, [r4, #20]
 800f23a:	1d1d      	adds	r5, r3, #4
 800f23c:	600d      	str	r5, [r1, #0]
 800f23e:	0635      	lsls	r5, r6, #24
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	d501      	bpl.n	800f248 <_printf_i+0x1cc>
 800f244:	6018      	str	r0, [r3, #0]
 800f246:	e002      	b.n	800f24e <_printf_i+0x1d2>
 800f248:	0671      	lsls	r1, r6, #25
 800f24a:	d5fb      	bpl.n	800f244 <_printf_i+0x1c8>
 800f24c:	8018      	strh	r0, [r3, #0]
 800f24e:	2300      	movs	r3, #0
 800f250:	6123      	str	r3, [r4, #16]
 800f252:	4616      	mov	r6, r2
 800f254:	e7ba      	b.n	800f1cc <_printf_i+0x150>
 800f256:	680b      	ldr	r3, [r1, #0]
 800f258:	1d1a      	adds	r2, r3, #4
 800f25a:	600a      	str	r2, [r1, #0]
 800f25c:	681e      	ldr	r6, [r3, #0]
 800f25e:	6862      	ldr	r2, [r4, #4]
 800f260:	2100      	movs	r1, #0
 800f262:	4630      	mov	r0, r6
 800f264:	f7f0 ffd4 	bl	8000210 <memchr>
 800f268:	b108      	cbz	r0, 800f26e <_printf_i+0x1f2>
 800f26a:	1b80      	subs	r0, r0, r6
 800f26c:	6060      	str	r0, [r4, #4]
 800f26e:	6863      	ldr	r3, [r4, #4]
 800f270:	6123      	str	r3, [r4, #16]
 800f272:	2300      	movs	r3, #0
 800f274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f278:	e7a8      	b.n	800f1cc <_printf_i+0x150>
 800f27a:	6923      	ldr	r3, [r4, #16]
 800f27c:	4632      	mov	r2, r6
 800f27e:	4649      	mov	r1, r9
 800f280:	4640      	mov	r0, r8
 800f282:	47d0      	blx	sl
 800f284:	3001      	adds	r0, #1
 800f286:	d0ab      	beq.n	800f1e0 <_printf_i+0x164>
 800f288:	6823      	ldr	r3, [r4, #0]
 800f28a:	079b      	lsls	r3, r3, #30
 800f28c:	d413      	bmi.n	800f2b6 <_printf_i+0x23a>
 800f28e:	68e0      	ldr	r0, [r4, #12]
 800f290:	9b03      	ldr	r3, [sp, #12]
 800f292:	4298      	cmp	r0, r3
 800f294:	bfb8      	it	lt
 800f296:	4618      	movlt	r0, r3
 800f298:	e7a4      	b.n	800f1e4 <_printf_i+0x168>
 800f29a:	2301      	movs	r3, #1
 800f29c:	4632      	mov	r2, r6
 800f29e:	4649      	mov	r1, r9
 800f2a0:	4640      	mov	r0, r8
 800f2a2:	47d0      	blx	sl
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	d09b      	beq.n	800f1e0 <_printf_i+0x164>
 800f2a8:	3501      	adds	r5, #1
 800f2aa:	68e3      	ldr	r3, [r4, #12]
 800f2ac:	9903      	ldr	r1, [sp, #12]
 800f2ae:	1a5b      	subs	r3, r3, r1
 800f2b0:	42ab      	cmp	r3, r5
 800f2b2:	dcf2      	bgt.n	800f29a <_printf_i+0x21e>
 800f2b4:	e7eb      	b.n	800f28e <_printf_i+0x212>
 800f2b6:	2500      	movs	r5, #0
 800f2b8:	f104 0619 	add.w	r6, r4, #25
 800f2bc:	e7f5      	b.n	800f2aa <_printf_i+0x22e>
 800f2be:	bf00      	nop
 800f2c0:	080125ad 	.word	0x080125ad
 800f2c4:	080125be 	.word	0x080125be

0800f2c8 <_sbrk_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	4d06      	ldr	r5, [pc, #24]	; (800f2e4 <_sbrk_r+0x1c>)
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	4608      	mov	r0, r1
 800f2d2:	602b      	str	r3, [r5, #0]
 800f2d4:	f7f1 fbde 	bl	8000a94 <_sbrk>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d102      	bne.n	800f2e2 <_sbrk_r+0x1a>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	b103      	cbz	r3, 800f2e2 <_sbrk_r+0x1a>
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	bd38      	pop	{r3, r4, r5, pc}
 800f2e4:	20024d20 	.word	0x20024d20

0800f2e8 <__sread>:
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f0:	f000 fa92 	bl	800f818 <_read_r>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	bfab      	itete	ge
 800f2f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f2fc:	181b      	addge	r3, r3, r0
 800f2fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f302:	bfac      	ite	ge
 800f304:	6563      	strge	r3, [r4, #84]	; 0x54
 800f306:	81a3      	strhlt	r3, [r4, #12]
 800f308:	bd10      	pop	{r4, pc}

0800f30a <__swrite>:
 800f30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f30e:	461f      	mov	r7, r3
 800f310:	898b      	ldrh	r3, [r1, #12]
 800f312:	05db      	lsls	r3, r3, #23
 800f314:	4605      	mov	r5, r0
 800f316:	460c      	mov	r4, r1
 800f318:	4616      	mov	r6, r2
 800f31a:	d505      	bpl.n	800f328 <__swrite+0x1e>
 800f31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f320:	2302      	movs	r3, #2
 800f322:	2200      	movs	r2, #0
 800f324:	f000 f9d0 	bl	800f6c8 <_lseek_r>
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f32e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f332:	81a3      	strh	r3, [r4, #12]
 800f334:	4632      	mov	r2, r6
 800f336:	463b      	mov	r3, r7
 800f338:	4628      	mov	r0, r5
 800f33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f33e:	f000 b869 	b.w	800f414 <_write_r>

0800f342 <__sseek>:
 800f342:	b510      	push	{r4, lr}
 800f344:	460c      	mov	r4, r1
 800f346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f34a:	f000 f9bd 	bl	800f6c8 <_lseek_r>
 800f34e:	1c43      	adds	r3, r0, #1
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	bf15      	itete	ne
 800f354:	6560      	strne	r0, [r4, #84]	; 0x54
 800f356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f35a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f35e:	81a3      	strheq	r3, [r4, #12]
 800f360:	bf18      	it	ne
 800f362:	81a3      	strhne	r3, [r4, #12]
 800f364:	bd10      	pop	{r4, pc}

0800f366 <__sclose>:
 800f366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f36a:	f000 b8db 	b.w	800f524 <_close_r>
	...

0800f370 <__swbuf_r>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	460e      	mov	r6, r1
 800f374:	4614      	mov	r4, r2
 800f376:	4605      	mov	r5, r0
 800f378:	b118      	cbz	r0, 800f382 <__swbuf_r+0x12>
 800f37a:	6983      	ldr	r3, [r0, #24]
 800f37c:	b90b      	cbnz	r3, 800f382 <__swbuf_r+0x12>
 800f37e:	f7ff f9f5 	bl	800e76c <__sinit>
 800f382:	4b21      	ldr	r3, [pc, #132]	; (800f408 <__swbuf_r+0x98>)
 800f384:	429c      	cmp	r4, r3
 800f386:	d12b      	bne.n	800f3e0 <__swbuf_r+0x70>
 800f388:	686c      	ldr	r4, [r5, #4]
 800f38a:	69a3      	ldr	r3, [r4, #24]
 800f38c:	60a3      	str	r3, [r4, #8]
 800f38e:	89a3      	ldrh	r3, [r4, #12]
 800f390:	071a      	lsls	r2, r3, #28
 800f392:	d52f      	bpl.n	800f3f4 <__swbuf_r+0x84>
 800f394:	6923      	ldr	r3, [r4, #16]
 800f396:	b36b      	cbz	r3, 800f3f4 <__swbuf_r+0x84>
 800f398:	6923      	ldr	r3, [r4, #16]
 800f39a:	6820      	ldr	r0, [r4, #0]
 800f39c:	1ac0      	subs	r0, r0, r3
 800f39e:	6963      	ldr	r3, [r4, #20]
 800f3a0:	b2f6      	uxtb	r6, r6
 800f3a2:	4283      	cmp	r3, r0
 800f3a4:	4637      	mov	r7, r6
 800f3a6:	dc04      	bgt.n	800f3b2 <__swbuf_r+0x42>
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f000 f950 	bl	800f650 <_fflush_r>
 800f3b0:	bb30      	cbnz	r0, 800f400 <__swbuf_r+0x90>
 800f3b2:	68a3      	ldr	r3, [r4, #8]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	60a3      	str	r3, [r4, #8]
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	1c5a      	adds	r2, r3, #1
 800f3bc:	6022      	str	r2, [r4, #0]
 800f3be:	701e      	strb	r6, [r3, #0]
 800f3c0:	6963      	ldr	r3, [r4, #20]
 800f3c2:	3001      	adds	r0, #1
 800f3c4:	4283      	cmp	r3, r0
 800f3c6:	d004      	beq.n	800f3d2 <__swbuf_r+0x62>
 800f3c8:	89a3      	ldrh	r3, [r4, #12]
 800f3ca:	07db      	lsls	r3, r3, #31
 800f3cc:	d506      	bpl.n	800f3dc <__swbuf_r+0x6c>
 800f3ce:	2e0a      	cmp	r6, #10
 800f3d0:	d104      	bne.n	800f3dc <__swbuf_r+0x6c>
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f000 f93b 	bl	800f650 <_fflush_r>
 800f3da:	b988      	cbnz	r0, 800f400 <__swbuf_r+0x90>
 800f3dc:	4638      	mov	r0, r7
 800f3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e0:	4b0a      	ldr	r3, [pc, #40]	; (800f40c <__swbuf_r+0x9c>)
 800f3e2:	429c      	cmp	r4, r3
 800f3e4:	d101      	bne.n	800f3ea <__swbuf_r+0x7a>
 800f3e6:	68ac      	ldr	r4, [r5, #8]
 800f3e8:	e7cf      	b.n	800f38a <__swbuf_r+0x1a>
 800f3ea:	4b09      	ldr	r3, [pc, #36]	; (800f410 <__swbuf_r+0xa0>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	bf08      	it	eq
 800f3f0:	68ec      	ldreq	r4, [r5, #12]
 800f3f2:	e7ca      	b.n	800f38a <__swbuf_r+0x1a>
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f000 f81e 	bl	800f438 <__swsetup_r>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d0cb      	beq.n	800f398 <__swbuf_r+0x28>
 800f400:	f04f 37ff 	mov.w	r7, #4294967295
 800f404:	e7ea      	b.n	800f3dc <__swbuf_r+0x6c>
 800f406:	bf00      	nop
 800f408:	0801255c 	.word	0x0801255c
 800f40c:	0801257c 	.word	0x0801257c
 800f410:	0801253c 	.word	0x0801253c

0800f414 <_write_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	; (800f434 <_write_r+0x20>)
 800f418:	4604      	mov	r4, r0
 800f41a:	4608      	mov	r0, r1
 800f41c:	4611      	mov	r1, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	f7f1 fae5 	bl	80009f2 <_write>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_write_r+0x1e>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_write_r+0x1e>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	20024d20 	.word	0x20024d20

0800f438 <__swsetup_r>:
 800f438:	4b32      	ldr	r3, [pc, #200]	; (800f504 <__swsetup_r+0xcc>)
 800f43a:	b570      	push	{r4, r5, r6, lr}
 800f43c:	681d      	ldr	r5, [r3, #0]
 800f43e:	4606      	mov	r6, r0
 800f440:	460c      	mov	r4, r1
 800f442:	b125      	cbz	r5, 800f44e <__swsetup_r+0x16>
 800f444:	69ab      	ldr	r3, [r5, #24]
 800f446:	b913      	cbnz	r3, 800f44e <__swsetup_r+0x16>
 800f448:	4628      	mov	r0, r5
 800f44a:	f7ff f98f 	bl	800e76c <__sinit>
 800f44e:	4b2e      	ldr	r3, [pc, #184]	; (800f508 <__swsetup_r+0xd0>)
 800f450:	429c      	cmp	r4, r3
 800f452:	d10f      	bne.n	800f474 <__swsetup_r+0x3c>
 800f454:	686c      	ldr	r4, [r5, #4]
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f45c:	0719      	lsls	r1, r3, #28
 800f45e:	d42c      	bmi.n	800f4ba <__swsetup_r+0x82>
 800f460:	06dd      	lsls	r5, r3, #27
 800f462:	d411      	bmi.n	800f488 <__swsetup_r+0x50>
 800f464:	2309      	movs	r3, #9
 800f466:	6033      	str	r3, [r6, #0]
 800f468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f46c:	81a3      	strh	r3, [r4, #12]
 800f46e:	f04f 30ff 	mov.w	r0, #4294967295
 800f472:	e03e      	b.n	800f4f2 <__swsetup_r+0xba>
 800f474:	4b25      	ldr	r3, [pc, #148]	; (800f50c <__swsetup_r+0xd4>)
 800f476:	429c      	cmp	r4, r3
 800f478:	d101      	bne.n	800f47e <__swsetup_r+0x46>
 800f47a:	68ac      	ldr	r4, [r5, #8]
 800f47c:	e7eb      	b.n	800f456 <__swsetup_r+0x1e>
 800f47e:	4b24      	ldr	r3, [pc, #144]	; (800f510 <__swsetup_r+0xd8>)
 800f480:	429c      	cmp	r4, r3
 800f482:	bf08      	it	eq
 800f484:	68ec      	ldreq	r4, [r5, #12]
 800f486:	e7e6      	b.n	800f456 <__swsetup_r+0x1e>
 800f488:	0758      	lsls	r0, r3, #29
 800f48a:	d512      	bpl.n	800f4b2 <__swsetup_r+0x7a>
 800f48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f48e:	b141      	cbz	r1, 800f4a2 <__swsetup_r+0x6a>
 800f490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f494:	4299      	cmp	r1, r3
 800f496:	d002      	beq.n	800f49e <__swsetup_r+0x66>
 800f498:	4630      	mov	r0, r6
 800f49a:	f7ff fa21 	bl	800e8e0 <_free_r>
 800f49e:	2300      	movs	r3, #0
 800f4a0:	6363      	str	r3, [r4, #52]	; 0x34
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4a8:	81a3      	strh	r3, [r4, #12]
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	6063      	str	r3, [r4, #4]
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	89a3      	ldrh	r3, [r4, #12]
 800f4b4:	f043 0308 	orr.w	r3, r3, #8
 800f4b8:	81a3      	strh	r3, [r4, #12]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	b94b      	cbnz	r3, 800f4d2 <__swsetup_r+0x9a>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4c8:	d003      	beq.n	800f4d2 <__swsetup_r+0x9a>
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f000 f931 	bl	800f734 <__smakebuf_r>
 800f4d2:	89a0      	ldrh	r0, [r4, #12]
 800f4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4d8:	f010 0301 	ands.w	r3, r0, #1
 800f4dc:	d00a      	beq.n	800f4f4 <__swsetup_r+0xbc>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	60a3      	str	r3, [r4, #8]
 800f4e2:	6963      	ldr	r3, [r4, #20]
 800f4e4:	425b      	negs	r3, r3
 800f4e6:	61a3      	str	r3, [r4, #24]
 800f4e8:	6923      	ldr	r3, [r4, #16]
 800f4ea:	b943      	cbnz	r3, 800f4fe <__swsetup_r+0xc6>
 800f4ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4f0:	d1ba      	bne.n	800f468 <__swsetup_r+0x30>
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	0781      	lsls	r1, r0, #30
 800f4f6:	bf58      	it	pl
 800f4f8:	6963      	ldrpl	r3, [r4, #20]
 800f4fa:	60a3      	str	r3, [r4, #8]
 800f4fc:	e7f4      	b.n	800f4e8 <__swsetup_r+0xb0>
 800f4fe:	2000      	movs	r0, #0
 800f500:	e7f7      	b.n	800f4f2 <__swsetup_r+0xba>
 800f502:	bf00      	nop
 800f504:	10000014 	.word	0x10000014
 800f508:	0801255c 	.word	0x0801255c
 800f50c:	0801257c 	.word	0x0801257c
 800f510:	0801253c 	.word	0x0801253c

0800f514 <abort>:
 800f514:	b508      	push	{r3, lr}
 800f516:	2006      	movs	r0, #6
 800f518:	f000 f9b8 	bl	800f88c <raise>
 800f51c:	2001      	movs	r0, #1
 800f51e:	f7f1 fa41 	bl	80009a4 <_exit>
	...

0800f524 <_close_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_close_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f1 fa7b 	bl	8000a2a <_close>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_close_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_close_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	20024d20 	.word	0x20024d20

0800f544 <__sflush_r>:
 800f544:	898a      	ldrh	r2, [r1, #12]
 800f546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54a:	4605      	mov	r5, r0
 800f54c:	0710      	lsls	r0, r2, #28
 800f54e:	460c      	mov	r4, r1
 800f550:	d458      	bmi.n	800f604 <__sflush_r+0xc0>
 800f552:	684b      	ldr	r3, [r1, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	dc05      	bgt.n	800f564 <__sflush_r+0x20>
 800f558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	dc02      	bgt.n	800f564 <__sflush_r+0x20>
 800f55e:	2000      	movs	r0, #0
 800f560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f566:	2e00      	cmp	r6, #0
 800f568:	d0f9      	beq.n	800f55e <__sflush_r+0x1a>
 800f56a:	2300      	movs	r3, #0
 800f56c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f570:	682f      	ldr	r7, [r5, #0]
 800f572:	602b      	str	r3, [r5, #0]
 800f574:	d032      	beq.n	800f5dc <__sflush_r+0x98>
 800f576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	075a      	lsls	r2, r3, #29
 800f57c:	d505      	bpl.n	800f58a <__sflush_r+0x46>
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	1ac0      	subs	r0, r0, r3
 800f582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f584:	b10b      	cbz	r3, 800f58a <__sflush_r+0x46>
 800f586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f588:	1ac0      	subs	r0, r0, r3
 800f58a:	2300      	movs	r3, #0
 800f58c:	4602      	mov	r2, r0
 800f58e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f590:	6a21      	ldr	r1, [r4, #32]
 800f592:	4628      	mov	r0, r5
 800f594:	47b0      	blx	r6
 800f596:	1c43      	adds	r3, r0, #1
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	d106      	bne.n	800f5aa <__sflush_r+0x66>
 800f59c:	6829      	ldr	r1, [r5, #0]
 800f59e:	291d      	cmp	r1, #29
 800f5a0:	d82c      	bhi.n	800f5fc <__sflush_r+0xb8>
 800f5a2:	4a2a      	ldr	r2, [pc, #168]	; (800f64c <__sflush_r+0x108>)
 800f5a4:	40ca      	lsrs	r2, r1
 800f5a6:	07d6      	lsls	r6, r2, #31
 800f5a8:	d528      	bpl.n	800f5fc <__sflush_r+0xb8>
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	6062      	str	r2, [r4, #4]
 800f5ae:	04d9      	lsls	r1, r3, #19
 800f5b0:	6922      	ldr	r2, [r4, #16]
 800f5b2:	6022      	str	r2, [r4, #0]
 800f5b4:	d504      	bpl.n	800f5c0 <__sflush_r+0x7c>
 800f5b6:	1c42      	adds	r2, r0, #1
 800f5b8:	d101      	bne.n	800f5be <__sflush_r+0x7a>
 800f5ba:	682b      	ldr	r3, [r5, #0]
 800f5bc:	b903      	cbnz	r3, 800f5c0 <__sflush_r+0x7c>
 800f5be:	6560      	str	r0, [r4, #84]	; 0x54
 800f5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5c2:	602f      	str	r7, [r5, #0]
 800f5c4:	2900      	cmp	r1, #0
 800f5c6:	d0ca      	beq.n	800f55e <__sflush_r+0x1a>
 800f5c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5cc:	4299      	cmp	r1, r3
 800f5ce:	d002      	beq.n	800f5d6 <__sflush_r+0x92>
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7ff f985 	bl	800e8e0 <_free_r>
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	6360      	str	r0, [r4, #52]	; 0x34
 800f5da:	e7c1      	b.n	800f560 <__sflush_r+0x1c>
 800f5dc:	6a21      	ldr	r1, [r4, #32]
 800f5de:	2301      	movs	r3, #1
 800f5e0:	4628      	mov	r0, r5
 800f5e2:	47b0      	blx	r6
 800f5e4:	1c41      	adds	r1, r0, #1
 800f5e6:	d1c7      	bne.n	800f578 <__sflush_r+0x34>
 800f5e8:	682b      	ldr	r3, [r5, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d0c4      	beq.n	800f578 <__sflush_r+0x34>
 800f5ee:	2b1d      	cmp	r3, #29
 800f5f0:	d001      	beq.n	800f5f6 <__sflush_r+0xb2>
 800f5f2:	2b16      	cmp	r3, #22
 800f5f4:	d101      	bne.n	800f5fa <__sflush_r+0xb6>
 800f5f6:	602f      	str	r7, [r5, #0]
 800f5f8:	e7b1      	b.n	800f55e <__sflush_r+0x1a>
 800f5fa:	89a3      	ldrh	r3, [r4, #12]
 800f5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f600:	81a3      	strh	r3, [r4, #12]
 800f602:	e7ad      	b.n	800f560 <__sflush_r+0x1c>
 800f604:	690f      	ldr	r7, [r1, #16]
 800f606:	2f00      	cmp	r7, #0
 800f608:	d0a9      	beq.n	800f55e <__sflush_r+0x1a>
 800f60a:	0793      	lsls	r3, r2, #30
 800f60c:	680e      	ldr	r6, [r1, #0]
 800f60e:	bf08      	it	eq
 800f610:	694b      	ldreq	r3, [r1, #20]
 800f612:	600f      	str	r7, [r1, #0]
 800f614:	bf18      	it	ne
 800f616:	2300      	movne	r3, #0
 800f618:	eba6 0807 	sub.w	r8, r6, r7
 800f61c:	608b      	str	r3, [r1, #8]
 800f61e:	f1b8 0f00 	cmp.w	r8, #0
 800f622:	dd9c      	ble.n	800f55e <__sflush_r+0x1a>
 800f624:	6a21      	ldr	r1, [r4, #32]
 800f626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f628:	4643      	mov	r3, r8
 800f62a:	463a      	mov	r2, r7
 800f62c:	4628      	mov	r0, r5
 800f62e:	47b0      	blx	r6
 800f630:	2800      	cmp	r0, #0
 800f632:	dc06      	bgt.n	800f642 <__sflush_r+0xfe>
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f63a:	81a3      	strh	r3, [r4, #12]
 800f63c:	f04f 30ff 	mov.w	r0, #4294967295
 800f640:	e78e      	b.n	800f560 <__sflush_r+0x1c>
 800f642:	4407      	add	r7, r0
 800f644:	eba8 0800 	sub.w	r8, r8, r0
 800f648:	e7e9      	b.n	800f61e <__sflush_r+0xda>
 800f64a:	bf00      	nop
 800f64c:	20400001 	.word	0x20400001

0800f650 <_fflush_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	690b      	ldr	r3, [r1, #16]
 800f654:	4605      	mov	r5, r0
 800f656:	460c      	mov	r4, r1
 800f658:	b913      	cbnz	r3, 800f660 <_fflush_r+0x10>
 800f65a:	2500      	movs	r5, #0
 800f65c:	4628      	mov	r0, r5
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	b118      	cbz	r0, 800f66a <_fflush_r+0x1a>
 800f662:	6983      	ldr	r3, [r0, #24]
 800f664:	b90b      	cbnz	r3, 800f66a <_fflush_r+0x1a>
 800f666:	f7ff f881 	bl	800e76c <__sinit>
 800f66a:	4b14      	ldr	r3, [pc, #80]	; (800f6bc <_fflush_r+0x6c>)
 800f66c:	429c      	cmp	r4, r3
 800f66e:	d11b      	bne.n	800f6a8 <_fflush_r+0x58>
 800f670:	686c      	ldr	r4, [r5, #4]
 800f672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d0ef      	beq.n	800f65a <_fflush_r+0xa>
 800f67a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f67c:	07d0      	lsls	r0, r2, #31
 800f67e:	d404      	bmi.n	800f68a <_fflush_r+0x3a>
 800f680:	0599      	lsls	r1, r3, #22
 800f682:	d402      	bmi.n	800f68a <_fflush_r+0x3a>
 800f684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f686:	f7ff f921 	bl	800e8cc <__retarget_lock_acquire_recursive>
 800f68a:	4628      	mov	r0, r5
 800f68c:	4621      	mov	r1, r4
 800f68e:	f7ff ff59 	bl	800f544 <__sflush_r>
 800f692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f694:	07da      	lsls	r2, r3, #31
 800f696:	4605      	mov	r5, r0
 800f698:	d4e0      	bmi.n	800f65c <_fflush_r+0xc>
 800f69a:	89a3      	ldrh	r3, [r4, #12]
 800f69c:	059b      	lsls	r3, r3, #22
 800f69e:	d4dd      	bmi.n	800f65c <_fflush_r+0xc>
 800f6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6a2:	f7ff f914 	bl	800e8ce <__retarget_lock_release_recursive>
 800f6a6:	e7d9      	b.n	800f65c <_fflush_r+0xc>
 800f6a8:	4b05      	ldr	r3, [pc, #20]	; (800f6c0 <_fflush_r+0x70>)
 800f6aa:	429c      	cmp	r4, r3
 800f6ac:	d101      	bne.n	800f6b2 <_fflush_r+0x62>
 800f6ae:	68ac      	ldr	r4, [r5, #8]
 800f6b0:	e7df      	b.n	800f672 <_fflush_r+0x22>
 800f6b2:	4b04      	ldr	r3, [pc, #16]	; (800f6c4 <_fflush_r+0x74>)
 800f6b4:	429c      	cmp	r4, r3
 800f6b6:	bf08      	it	eq
 800f6b8:	68ec      	ldreq	r4, [r5, #12]
 800f6ba:	e7da      	b.n	800f672 <_fflush_r+0x22>
 800f6bc:	0801255c 	.word	0x0801255c
 800f6c0:	0801257c 	.word	0x0801257c
 800f6c4:	0801253c 	.word	0x0801253c

0800f6c8 <_lseek_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4d07      	ldr	r5, [pc, #28]	; (800f6e8 <_lseek_r+0x20>)
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	4608      	mov	r0, r1
 800f6d0:	4611      	mov	r1, r2
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	602a      	str	r2, [r5, #0]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	f7f1 f9ce 	bl	8000a78 <_lseek>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	d102      	bne.n	800f6e6 <_lseek_r+0x1e>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b103      	cbz	r3, 800f6e6 <_lseek_r+0x1e>
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	bd38      	pop	{r3, r4, r5, pc}
 800f6e8:	20024d20 	.word	0x20024d20

0800f6ec <__swhatbuf_r>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	460e      	mov	r6, r1
 800f6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6f4:	2900      	cmp	r1, #0
 800f6f6:	b096      	sub	sp, #88	; 0x58
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	461d      	mov	r5, r3
 800f6fc:	da07      	bge.n	800f70e <__swhatbuf_r+0x22>
 800f6fe:	2300      	movs	r3, #0
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	89b3      	ldrh	r3, [r6, #12]
 800f704:	061a      	lsls	r2, r3, #24
 800f706:	d410      	bmi.n	800f72a <__swhatbuf_r+0x3e>
 800f708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f70c:	e00e      	b.n	800f72c <__swhatbuf_r+0x40>
 800f70e:	466a      	mov	r2, sp
 800f710:	f000 f8d8 	bl	800f8c4 <_fstat_r>
 800f714:	2800      	cmp	r0, #0
 800f716:	dbf2      	blt.n	800f6fe <__swhatbuf_r+0x12>
 800f718:	9a01      	ldr	r2, [sp, #4]
 800f71a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f71e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f722:	425a      	negs	r2, r3
 800f724:	415a      	adcs	r2, r3
 800f726:	602a      	str	r2, [r5, #0]
 800f728:	e7ee      	b.n	800f708 <__swhatbuf_r+0x1c>
 800f72a:	2340      	movs	r3, #64	; 0x40
 800f72c:	2000      	movs	r0, #0
 800f72e:	6023      	str	r3, [r4, #0]
 800f730:	b016      	add	sp, #88	; 0x58
 800f732:	bd70      	pop	{r4, r5, r6, pc}

0800f734 <__smakebuf_r>:
 800f734:	898b      	ldrh	r3, [r1, #12]
 800f736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f738:	079d      	lsls	r5, r3, #30
 800f73a:	4606      	mov	r6, r0
 800f73c:	460c      	mov	r4, r1
 800f73e:	d507      	bpl.n	800f750 <__smakebuf_r+0x1c>
 800f740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	6123      	str	r3, [r4, #16]
 800f748:	2301      	movs	r3, #1
 800f74a:	6163      	str	r3, [r4, #20]
 800f74c:	b002      	add	sp, #8
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
 800f750:	ab01      	add	r3, sp, #4
 800f752:	466a      	mov	r2, sp
 800f754:	f7ff ffca 	bl	800f6ec <__swhatbuf_r>
 800f758:	9900      	ldr	r1, [sp, #0]
 800f75a:	4605      	mov	r5, r0
 800f75c:	4630      	mov	r0, r6
 800f75e:	f7ff f90f 	bl	800e980 <_malloc_r>
 800f762:	b948      	cbnz	r0, 800f778 <__smakebuf_r+0x44>
 800f764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f768:	059a      	lsls	r2, r3, #22
 800f76a:	d4ef      	bmi.n	800f74c <__smakebuf_r+0x18>
 800f76c:	f023 0303 	bic.w	r3, r3, #3
 800f770:	f043 0302 	orr.w	r3, r3, #2
 800f774:	81a3      	strh	r3, [r4, #12]
 800f776:	e7e3      	b.n	800f740 <__smakebuf_r+0xc>
 800f778:	4b0d      	ldr	r3, [pc, #52]	; (800f7b0 <__smakebuf_r+0x7c>)
 800f77a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	6020      	str	r0, [r4, #0]
 800f780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f784:	81a3      	strh	r3, [r4, #12]
 800f786:	9b00      	ldr	r3, [sp, #0]
 800f788:	6163      	str	r3, [r4, #20]
 800f78a:	9b01      	ldr	r3, [sp, #4]
 800f78c:	6120      	str	r0, [r4, #16]
 800f78e:	b15b      	cbz	r3, 800f7a8 <__smakebuf_r+0x74>
 800f790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f794:	4630      	mov	r0, r6
 800f796:	f000 f8a7 	bl	800f8e8 <_isatty_r>
 800f79a:	b128      	cbz	r0, 800f7a8 <__smakebuf_r+0x74>
 800f79c:	89a3      	ldrh	r3, [r4, #12]
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	f043 0301 	orr.w	r3, r3, #1
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	89a0      	ldrh	r0, [r4, #12]
 800f7aa:	4305      	orrs	r5, r0
 800f7ac:	81a5      	strh	r5, [r4, #12]
 800f7ae:	e7cd      	b.n	800f74c <__smakebuf_r+0x18>
 800f7b0:	0800e705 	.word	0x0800e705

0800f7b4 <__malloc_lock>:
 800f7b4:	4801      	ldr	r0, [pc, #4]	; (800f7bc <__malloc_lock+0x8>)
 800f7b6:	f7ff b889 	b.w	800e8cc <__retarget_lock_acquire_recursive>
 800f7ba:	bf00      	nop
 800f7bc:	20024d28 	.word	0x20024d28

0800f7c0 <__malloc_unlock>:
 800f7c0:	4801      	ldr	r0, [pc, #4]	; (800f7c8 <__malloc_unlock+0x8>)
 800f7c2:	f7ff b884 	b.w	800e8ce <__retarget_lock_release_recursive>
 800f7c6:	bf00      	nop
 800f7c8:	20024d28 	.word	0x20024d28

0800f7cc <_realloc_r>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	4614      	mov	r4, r2
 800f7d2:	460e      	mov	r6, r1
 800f7d4:	b921      	cbnz	r1, 800f7e0 <_realloc_r+0x14>
 800f7d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7da:	4611      	mov	r1, r2
 800f7dc:	f7ff b8d0 	b.w	800e980 <_malloc_r>
 800f7e0:	b922      	cbnz	r2, 800f7ec <_realloc_r+0x20>
 800f7e2:	f7ff f87d 	bl	800e8e0 <_free_r>
 800f7e6:	4625      	mov	r5, r4
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ec:	f000 f88c 	bl	800f908 <_malloc_usable_size_r>
 800f7f0:	42a0      	cmp	r0, r4
 800f7f2:	d20f      	bcs.n	800f814 <_realloc_r+0x48>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	f7ff f8c2 	bl	800e980 <_malloc_r>
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d0f2      	beq.n	800f7e8 <_realloc_r+0x1c>
 800f802:	4631      	mov	r1, r6
 800f804:	4622      	mov	r2, r4
 800f806:	f7fe fe93 	bl	800e530 <memcpy>
 800f80a:	4631      	mov	r1, r6
 800f80c:	4638      	mov	r0, r7
 800f80e:	f7ff f867 	bl	800e8e0 <_free_r>
 800f812:	e7e9      	b.n	800f7e8 <_realloc_r+0x1c>
 800f814:	4635      	mov	r5, r6
 800f816:	e7e7      	b.n	800f7e8 <_realloc_r+0x1c>

0800f818 <_read_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4d07      	ldr	r5, [pc, #28]	; (800f838 <_read_r+0x20>)
 800f81c:	4604      	mov	r4, r0
 800f81e:	4608      	mov	r0, r1
 800f820:	4611      	mov	r1, r2
 800f822:	2200      	movs	r2, #0
 800f824:	602a      	str	r2, [r5, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	f7f1 f8c6 	bl	80009b8 <_read>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_read_r+0x1e>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_read_r+0x1e>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	20024d20 	.word	0x20024d20

0800f83c <_raise_r>:
 800f83c:	291f      	cmp	r1, #31
 800f83e:	b538      	push	{r3, r4, r5, lr}
 800f840:	4604      	mov	r4, r0
 800f842:	460d      	mov	r5, r1
 800f844:	d904      	bls.n	800f850 <_raise_r+0x14>
 800f846:	2316      	movs	r3, #22
 800f848:	6003      	str	r3, [r0, #0]
 800f84a:	f04f 30ff 	mov.w	r0, #4294967295
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f852:	b112      	cbz	r2, 800f85a <_raise_r+0x1e>
 800f854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f858:	b94b      	cbnz	r3, 800f86e <_raise_r+0x32>
 800f85a:	4620      	mov	r0, r4
 800f85c:	f000 f830 	bl	800f8c0 <_getpid_r>
 800f860:	462a      	mov	r2, r5
 800f862:	4601      	mov	r1, r0
 800f864:	4620      	mov	r0, r4
 800f866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f86a:	f000 b817 	b.w	800f89c <_kill_r>
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d00a      	beq.n	800f888 <_raise_r+0x4c>
 800f872:	1c59      	adds	r1, r3, #1
 800f874:	d103      	bne.n	800f87e <_raise_r+0x42>
 800f876:	2316      	movs	r3, #22
 800f878:	6003      	str	r3, [r0, #0]
 800f87a:	2001      	movs	r0, #1
 800f87c:	e7e7      	b.n	800f84e <_raise_r+0x12>
 800f87e:	2400      	movs	r4, #0
 800f880:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f884:	4628      	mov	r0, r5
 800f886:	4798      	blx	r3
 800f888:	2000      	movs	r0, #0
 800f88a:	e7e0      	b.n	800f84e <_raise_r+0x12>

0800f88c <raise>:
 800f88c:	4b02      	ldr	r3, [pc, #8]	; (800f898 <raise+0xc>)
 800f88e:	4601      	mov	r1, r0
 800f890:	6818      	ldr	r0, [r3, #0]
 800f892:	f7ff bfd3 	b.w	800f83c <_raise_r>
 800f896:	bf00      	nop
 800f898:	10000014 	.word	0x10000014

0800f89c <_kill_r>:
 800f89c:	b538      	push	{r3, r4, r5, lr}
 800f89e:	4d07      	ldr	r5, [pc, #28]	; (800f8bc <_kill_r+0x20>)
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	4608      	mov	r0, r1
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	602b      	str	r3, [r5, #0]
 800f8aa:	f7f1 f869 	bl	8000980 <_kill>
 800f8ae:	1c43      	adds	r3, r0, #1
 800f8b0:	d102      	bne.n	800f8b8 <_kill_r+0x1c>
 800f8b2:	682b      	ldr	r3, [r5, #0]
 800f8b4:	b103      	cbz	r3, 800f8b8 <_kill_r+0x1c>
 800f8b6:	6023      	str	r3, [r4, #0]
 800f8b8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ba:	bf00      	nop
 800f8bc:	20024d20 	.word	0x20024d20

0800f8c0 <_getpid_r>:
 800f8c0:	f7f1 b856 	b.w	8000970 <_getpid>

0800f8c4 <_fstat_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4d07      	ldr	r5, [pc, #28]	; (800f8e4 <_fstat_r+0x20>)
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	602b      	str	r3, [r5, #0]
 800f8d2:	f7f1 f8b6 	bl	8000a42 <_fstat>
 800f8d6:	1c43      	adds	r3, r0, #1
 800f8d8:	d102      	bne.n	800f8e0 <_fstat_r+0x1c>
 800f8da:	682b      	ldr	r3, [r5, #0]
 800f8dc:	b103      	cbz	r3, 800f8e0 <_fstat_r+0x1c>
 800f8de:	6023      	str	r3, [r4, #0]
 800f8e0:	bd38      	pop	{r3, r4, r5, pc}
 800f8e2:	bf00      	nop
 800f8e4:	20024d20 	.word	0x20024d20

0800f8e8 <_isatty_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4d06      	ldr	r5, [pc, #24]	; (800f904 <_isatty_r+0x1c>)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	602b      	str	r3, [r5, #0]
 800f8f4:	f7f1 f8b5 	bl	8000a62 <_isatty>
 800f8f8:	1c43      	adds	r3, r0, #1
 800f8fa:	d102      	bne.n	800f902 <_isatty_r+0x1a>
 800f8fc:	682b      	ldr	r3, [r5, #0]
 800f8fe:	b103      	cbz	r3, 800f902 <_isatty_r+0x1a>
 800f900:	6023      	str	r3, [r4, #0]
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	20024d20 	.word	0x20024d20

0800f908 <_malloc_usable_size_r>:
 800f908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f90c:	1f18      	subs	r0, r3, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	bfbc      	itt	lt
 800f912:	580b      	ldrlt	r3, [r1, r0]
 800f914:	18c0      	addlt	r0, r0, r3
 800f916:	4770      	bx	lr

0800f918 <_init>:
 800f918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91a:	bf00      	nop
 800f91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91e:	bc08      	pop	{r3}
 800f920:	469e      	mov	lr, r3
 800f922:	4770      	bx	lr

0800f924 <_fini>:
 800f924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f926:	bf00      	nop
 800f928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f92a:	bc08      	pop	{r3}
 800f92c:	469e      	mov	lr, r3
 800f92e:	4770      	bx	lr
